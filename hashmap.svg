<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="30026"><g><title>dateo_fun_remover`&lt;T as alloc::vec::spec_from_elem::SpecFromElem&gt;::from_elem (4 samples, 0.01%)</title><rect x="0.0100%" y="181" width="0.0133%" height="15" fill="rgb(227,0,7)" fg:x="3" fg:w="4"/><text x="0.2600%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58464 (4 samples, 0.01%)</title><rect x="0.0100%" y="165" width="0.0133%" height="15" fill="rgb(217,0,24)" fg:x="3" fg:w="4"/><text x="0.2600%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.02%)</title><rect x="0.0266%" y="165" width="0.0233%" height="15" fill="rgb(221,193,54)" fg:x="8" fg:w="7"/><text x="0.2766%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (7 samples, 0.02%)</title><rect x="0.0266%" y="149" width="0.0233%" height="15" fill="rgb(248,212,6)" fg:x="8" fg:w="7"/><text x="0.2766%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (5 samples, 0.02%)</title><rect x="0.0333%" y="133" width="0.0167%" height="15" fill="rgb(208,68,35)" fg:x="10" fg:w="5"/><text x="0.2833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (5 samples, 0.02%)</title><rect x="0.0333%" y="117" width="0.0167%" height="15" fill="rgb(232,128,0)" fg:x="10" fg:w="5"/><text x="0.2833%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.04%)</title><rect x="0.0233%" y="181" width="0.0433%" height="15" fill="rgb(207,160,47)" fg:x="7" fg:w="13"/><text x="0.2733%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (10 samples, 0.03%)</title><rect x="0.0666%" y="181" width="0.0333%" height="15" fill="rgb(228,23,34)" fg:x="20" fg:w="10"/><text x="0.3166%" y="191.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (13 samples, 0.04%)</title><rect x="0.1099%" y="181" width="0.0433%" height="15" fill="rgb(218,30,26)" fg:x="33" fg:w="13"/><text x="0.3599%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (71 samples, 0.24%)</title><rect x="0.1565%" y="181" width="0.2365%" height="15" fill="rgb(220,122,19)" fg:x="47" fg:w="71"/><text x="0.4065%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (5 samples, 0.02%)</title><rect x="0.3930%" y="165" width="0.0167%" height="15" fill="rgb(250,228,42)" fg:x="118" fg:w="5"/><text x="0.6430%" y="175.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (17 samples, 0.06%)</title><rect x="0.3930%" y="181" width="0.0566%" height="15" fill="rgb(240,193,28)" fg:x="118" fg:w="17"/><text x="0.6430%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (7 samples, 0.02%)</title><rect x="0.4596%" y="133" width="0.0233%" height="15" fill="rgb(216,20,37)" fg:x="138" fg:w="7"/><text x="0.7096%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (11 samples, 0.04%)</title><rect x="0.4596%" y="149" width="0.0366%" height="15" fill="rgb(206,188,39)" fg:x="138" fg:w="11"/><text x="0.7096%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (16 samples, 0.05%)</title><rect x="0.4496%" y="165" width="0.0533%" height="15" fill="rgb(217,207,13)" fg:x="135" fg:w="16"/><text x="0.6996%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (17 samples, 0.06%)</title><rect x="0.4496%" y="181" width="0.0566%" height="15" fill="rgb(231,73,38)" fg:x="135" fg:w="17"/><text x="0.6996%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,786 samples, 5.95%)</title><rect x="52.2514%" y="133" width="5.9482%" height="15" fill="rgb(225,20,46)" fg:x="15689" fg:w="1786"/><text x="52.5014%" y="143.50">dateo_fu..</text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (13,621 samples, 45.36%)</title><rect x="13.4317%" y="149" width="45.3640%" height="15" fill="rgb(210,31,41)" fg:x="4033" fg:w="13621"/><text x="13.6817%" y="159.50">dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (179 samples, 0.60%)</title><rect x="58.1996%" y="133" width="0.5962%" height="15" fill="rgb(221,200,47)" fg:x="17475" fg:w="179"/><text x="58.4496%" y="143.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::insert (14 samples, 0.05%)</title><rect x="58.7957%" y="149" width="0.0466%" height="15" fill="rgb(226,26,5)" fg:x="17654" fg:w="14"/><text x="59.0457%" y="159.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (68 samples, 0.23%)</title><rect x="58.8423%" y="149" width="0.2265%" height="15" fill="rgb(249,33,26)" fg:x="17668" fg:w="68"/><text x="59.0923%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (68 samples, 0.23%)</title><rect x="58.8423%" y="133" width="0.2265%" height="15" fill="rgb(235,183,28)" fg:x="17668" fg:w="68"/><text x="59.0923%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (17,612 samples, 58.66%)</title><rect x="0.5062%" y="165" width="58.6558%" height="15" fill="rgb(221,5,38)" fg:x="152" fg:w="17612"/><text x="0.7562%" y="175.50">dateo_fun_remover`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K..</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (28 samples, 0.09%)</title><rect x="59.0688%" y="149" width="0.0933%" height="15" fill="rgb(247,18,42)" fg:x="17736" fg:w="28"/><text x="59.3188%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects (17,654 samples, 58.80%)</title><rect x="0.5062%" y="181" width="58.7957%" height="15" fill="rgb(241,131,45)" fg:x="152" fg:w="17654"/><text x="0.7562%" y="191.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects</text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (42 samples, 0.14%)</title><rect x="59.1621%" y="165" width="0.1399%" height="15" fill="rgb(249,31,29)" fg:x="17764" fg:w="42"/><text x="59.4121%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (7 samples, 0.02%)</title><rect x="59.3086%" y="165" width="0.0233%" height="15" fill="rgb(225,111,53)" fg:x="17808" fg:w="7"/><text x="59.5586%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (7 samples, 0.02%)</title><rect x="59.3386%" y="149" width="0.0233%" height="15" fill="rgb(238,160,17)" fg:x="17817" fg:w="7"/><text x="59.5886%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (12 samples, 0.04%)</title><rect x="59.3319%" y="165" width="0.0400%" height="15" fill="rgb(214,148,48)" fg:x="17815" fg:w="12"/><text x="59.5819%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (23 samples, 0.08%)</title><rect x="59.3019%" y="181" width="0.0766%" height="15" fill="rgb(232,36,49)" fg:x="17806" fg:w="23"/><text x="59.5519%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::fill_map_rec (7 samples, 0.02%)</title><rect x="59.3785%" y="181" width="0.0233%" height="15" fill="rgb(209,103,24)" fg:x="17829" fg:w="7"/><text x="59.6285%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::get_vals_from_memo (5 samples, 0.02%)</title><rect x="59.3852%" y="165" width="0.0167%" height="15" fill="rgb(229,88,8)" fg:x="17831" fg:w="5"/><text x="59.6352%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (4 samples, 0.01%)</title><rect x="59.4085%" y="117" width="0.0133%" height="15" fill="rgb(213,181,19)" fg:x="17838" fg:w="4"/><text x="59.6585%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (7 samples, 0.02%)</title><rect x="59.4052%" y="133" width="0.0233%" height="15" fill="rgb(254,191,54)" fg:x="17837" fg:w="7"/><text x="59.6552%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (9 samples, 0.03%)</title><rect x="59.4019%" y="181" width="0.0300%" height="15" fill="rgb(241,83,37)" fg:x="17836" fg:w="9"/><text x="59.6519%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (8 samples, 0.03%)</title><rect x="59.4052%" y="165" width="0.0266%" height="15" fill="rgb(233,36,39)" fg:x="17837" fg:w="8"/><text x="59.6552%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (8 samples, 0.03%)</title><rect x="59.4052%" y="149" width="0.0266%" height="15" fill="rgb(226,3,54)" fg:x="17837" fg:w="8"/><text x="59.6552%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (11 samples, 0.04%)</title><rect x="64.1711%" y="101" width="0.0366%" height="15" fill="rgb(245,192,40)" fg:x="19268" fg:w="11"/><text x="64.4211%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b671 (11 samples, 0.04%)</title><rect x="64.1711%" y="85" width="0.0366%" height="15" fill="rgb(238,167,29)" fg:x="19268" fg:w="11"/><text x="64.4211%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ddf (11 samples, 0.04%)</title><rect x="64.1711%" y="69" width="0.0366%" height="15" fill="rgb(232,182,51)" fg:x="19268" fg:w="11"/><text x="64.4211%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (11 samples, 0.04%)</title><rect x="64.1711%" y="53" width="0.0366%" height="15" fill="rgb(231,60,39)" fg:x="19268" fg:w="11"/><text x="64.4211%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (11 samples, 0.04%)</title><rect x="64.1711%" y="37" width="0.0366%" height="15" fill="rgb(208,69,12)" fg:x="19268" fg:w="11"/><text x="64.4211%" y="47.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.04%)</title><rect x="64.1711%" y="149" width="0.0400%" height="15" fill="rgb(235,93,37)" fg:x="19268" fg:w="12"/><text x="64.4211%" y="159.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (12 samples, 0.04%)</title><rect x="64.1711%" y="133" width="0.0400%" height="15" fill="rgb(213,116,39)" fg:x="19268" fg:w="12"/><text x="64.4211%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (12 samples, 0.04%)</title><rect x="64.1711%" y="117" width="0.0400%" height="15" fill="rgb(222,207,29)" fg:x="19268" fg:w="12"/><text x="64.4211%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (753 samples, 2.51%)</title><rect x="61.7132%" y="165" width="2.5078%" height="15" fill="rgb(206,96,30)" fg:x="18530" fg:w="753"/><text x="61.9632%" y="175.50">da..</text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="64.2210%" y="165" width="0.0266%" height="15" fill="rgb(218,138,4)" fg:x="19283" fg:w="8"/><text x="64.4710%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,682 samples, 5.60%)</title><rect x="64.2477%" y="165" width="5.6018%" height="15" fill="rgb(250,191,14)" fg:x="19291" fg:w="1682"/><text x="64.4977%" y="175.50">dateo_f..</text></g><g><title>dateo_fun_remover`DYLD-STUB$$memcpy (9 samples, 0.03%)</title><rect x="69.8694%" y="165" width="0.0300%" height="15" fill="rgb(239,60,40)" fg:x="20979" fg:w="9"/><text x="70.1194%" y="175.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$pow (5 samples, 0.02%)</title><rect x="69.8994%" y="165" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="20988" fg:w="5"/><text x="70.1494%" y="175.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (22 samples, 0.07%)</title><rect x="69.9261%" y="165" width="0.0733%" height="15" fill="rgb(225,35,8)" fg:x="20996" fg:w="22"/><text x="70.1761%" y="175.50"></text></g><g><title>dateo_fun_remover`__rust_dealloc (13 samples, 0.04%)</title><rect x="70.0060%" y="165" width="0.0433%" height="15" fill="rgb(250,213,24)" fg:x="21020" fg:w="13"/><text x="70.2560%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b794 (6 samples, 0.02%)</title><rect x="70.1126%" y="101" width="0.0200%" height="15" fill="rgb(247,123,22)" fg:x="21052" fg:w="6"/><text x="70.3626%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (6 samples, 0.02%)</title><rect x="70.1126%" y="85" width="0.0200%" height="15" fill="rgb(231,138,38)" fg:x="21052" fg:w="6"/><text x="70.3626%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (5 samples, 0.02%)</title><rect x="70.1159%" y="69" width="0.0167%" height="15" fill="rgb(231,145,46)" fg:x="21053" fg:w="5"/><text x="70.3659%" y="79.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (67 samples, 0.22%)</title><rect x="70.0493%" y="165" width="0.2231%" height="15" fill="rgb(251,118,11)" fg:x="21033" fg:w="67"/><text x="70.2993%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (48 samples, 0.16%)</title><rect x="70.1126%" y="149" width="0.1599%" height="15" fill="rgb(217,147,25)" fg:x="21052" fg:w="48"/><text x="70.3626%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (48 samples, 0.16%)</title><rect x="70.1126%" y="133" width="0.1599%" height="15" fill="rgb(247,81,37)" fg:x="21052" fg:w="48"/><text x="70.3626%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (48 samples, 0.16%)</title><rect x="70.1126%" y="117" width="0.1599%" height="15" fill="rgb(209,12,38)" fg:x="21052" fg:w="48"/><text x="70.3626%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7b3 (42 samples, 0.14%)</title><rect x="70.1326%" y="101" width="0.1399%" height="15" fill="rgb(227,1,9)" fg:x="21058" fg:w="42"/><text x="70.3826%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (42 samples, 0.14%)</title><rect x="70.1326%" y="85" width="0.1399%" height="15" fill="rgb(248,47,43)" fg:x="21058" fg:w="42"/><text x="70.3826%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (42 samples, 0.14%)</title><rect x="70.1326%" y="69" width="0.1399%" height="15" fill="rgb(221,10,30)" fg:x="21058" fg:w="42"/><text x="70.3826%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (42 samples, 0.14%)</title><rect x="70.1326%" y="53" width="0.1399%" height="15" fill="rgb(210,229,1)" fg:x="21058" fg:w="42"/><text x="70.3826%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (42 samples, 0.14%)</title><rect x="70.1326%" y="37" width="0.1399%" height="15" fill="rgb(222,148,37)" fg:x="21058" fg:w="42"/><text x="70.3826%" y="47.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (5 samples, 0.02%)</title><rect x="70.2724%" y="165" width="0.0167%" height="15" fill="rgb(234,67,33)" fg:x="21100" fg:w="5"/><text x="70.5224%" y="175.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (19 samples, 0.06%)</title><rect x="77.2963%" y="117" width="0.0633%" height="15" fill="rgb(247,98,35)" fg:x="23209" fg:w="19"/><text x="77.5463%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (761 samples, 2.53%)</title><rect x="77.3596%" y="117" width="2.5345%" height="15" fill="rgb(247,138,52)" fg:x="23228" fg:w="761"/><text x="77.6096%" y="127.50">da..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (56 samples, 0.19%)</title><rect x="79.8941%" y="117" width="0.1865%" height="15" fill="rgb(213,79,30)" fg:x="23989" fg:w="56"/><text x="80.1441%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,732 samples, 5.77%)</title><rect x="74.5920%" y="133" width="5.7683%" height="15" fill="rgb(246,177,23)" fg:x="22397" fg:w="1732"/><text x="74.8420%" y="143.50">dateo_f..</text></g><g><title>libsystem_m.dylib`trunc (84 samples, 0.28%)</title><rect x="80.0806%" y="117" width="0.2798%" height="15" fill="rgb(230,62,27)" fg:x="24045" fg:w="84"/><text x="80.3306%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (86 samples, 0.29%)</title><rect x="80.3703%" y="133" width="0.2864%" height="15" fill="rgb(216,154,8)" fg:x="24132" fg:w="86"/><text x="80.6203%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (16 samples, 0.05%)</title><rect x="80.6568%" y="133" width="0.0533%" height="15" fill="rgb(244,35,45)" fg:x="24218" fg:w="16"/><text x="80.9068%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (7 samples, 0.02%)</title><rect x="80.7101%" y="133" width="0.0233%" height="15" fill="rgb(251,115,12)" fg:x="24234" fg:w="7"/><text x="80.9601%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (7 samples, 0.02%)</title><rect x="80.7500%" y="133" width="0.0233%" height="15" fill="rgb(240,54,50)" fg:x="24246" fg:w="7"/><text x="81.0000%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573a0 (6 samples, 0.02%)</title><rect x="80.7867%" y="133" width="0.0200%" height="15" fill="rgb(233,84,52)" fg:x="24257" fg:w="6"/><text x="81.0367%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573b2 (5 samples, 0.02%)</title><rect x="80.8133%" y="133" width="0.0167%" height="15" fill="rgb(207,117,47)" fg:x="24265" fg:w="5"/><text x="81.0633%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (5 samples, 0.02%)</title><rect x="80.8366%" y="133" width="0.0167%" height="15" fill="rgb(249,43,39)" fg:x="24272" fg:w="5"/><text x="81.0866%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573cc (4 samples, 0.01%)</title><rect x="80.8533%" y="133" width="0.0133%" height="15" fill="rgb(209,38,44)" fg:x="24277" fg:w="4"/><text x="81.1033%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (8 samples, 0.03%)</title><rect x="80.8666%" y="133" width="0.0266%" height="15" fill="rgb(236,212,23)" fg:x="24281" fg:w="8"/><text x="81.1166%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (26 samples, 0.09%)</title><rect x="80.8932%" y="133" width="0.0866%" height="15" fill="rgb(242,79,21)" fg:x="24289" fg:w="26"/><text x="81.1432%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e3 (8 samples, 0.03%)</title><rect x="80.9798%" y="133" width="0.0266%" height="15" fill="rgb(211,96,35)" fg:x="24315" fg:w="8"/><text x="81.2298%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (111 samples, 0.37%)</title><rect x="81.0065%" y="133" width="0.3697%" height="15" fill="rgb(253,215,40)" fg:x="24323" fg:w="111"/><text x="81.2565%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (39 samples, 0.13%)</title><rect x="81.3761%" y="133" width="0.1299%" height="15" fill="rgb(211,81,21)" fg:x="24434" fg:w="39"/><text x="81.6261%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ed (4 samples, 0.01%)</title><rect x="81.5060%" y="133" width="0.0133%" height="15" fill="rgb(208,190,38)" fg:x="24473" fg:w="4"/><text x="81.7560%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (8 samples, 0.03%)</title><rect x="81.5193%" y="133" width="0.0266%" height="15" fill="rgb(235,213,38)" fg:x="24477" fg:w="8"/><text x="81.7693%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (25 samples, 0.08%)</title><rect x="81.5560%" y="133" width="0.0833%" height="15" fill="rgb(237,122,38)" fg:x="24488" fg:w="25"/><text x="81.8060%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (23 samples, 0.08%)</title><rect x="81.6392%" y="133" width="0.0766%" height="15" fill="rgb(244,218,35)" fg:x="24513" fg:w="23"/><text x="81.8892%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740e (4 samples, 0.01%)</title><rect x="81.7158%" y="133" width="0.0133%" height="15" fill="rgb(240,68,47)" fg:x="24536" fg:w="4"/><text x="81.9658%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57414 (5 samples, 0.02%)</title><rect x="81.7292%" y="133" width="0.0167%" height="15" fill="rgb(210,16,53)" fg:x="24540" fg:w="5"/><text x="81.9792%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (19 samples, 0.06%)</title><rect x="81.7492%" y="133" width="0.0633%" height="15" fill="rgb(235,124,12)" fg:x="24546" fg:w="19"/><text x="81.9992%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741e (5 samples, 0.02%)</title><rect x="81.8124%" y="133" width="0.0167%" height="15" fill="rgb(224,169,11)" fg:x="24565" fg:w="5"/><text x="82.0624%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5742b (4 samples, 0.01%)</title><rect x="81.8291%" y="133" width="0.0133%" height="15" fill="rgb(250,166,2)" fg:x="24570" fg:w="4"/><text x="82.0791%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (10 samples, 0.03%)</title><rect x="81.8524%" y="133" width="0.0333%" height="15" fill="rgb(242,216,29)" fg:x="24577" fg:w="10"/><text x="82.1024%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (8 samples, 0.03%)</title><rect x="81.9024%" y="133" width="0.0266%" height="15" fill="rgb(230,116,27)" fg:x="24592" fg:w="8"/><text x="82.1524%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (7 samples, 0.02%)</title><rect x="81.9390%" y="133" width="0.0233%" height="15" fill="rgb(228,99,48)" fg:x="24603" fg:w="7"/><text x="82.1890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (8 samples, 0.03%)</title><rect x="81.9690%" y="133" width="0.0266%" height="15" fill="rgb(253,11,6)" fg:x="24612" fg:w="8"/><text x="82.2190%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57484 (6 samples, 0.02%)</title><rect x="81.9989%" y="133" width="0.0200%" height="15" fill="rgb(247,143,39)" fg:x="24621" fg:w="6"/><text x="82.2489%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (10 samples, 0.03%)</title><rect x="82.0222%" y="133" width="0.0333%" height="15" fill="rgb(236,97,10)" fg:x="24628" fg:w="10"/><text x="82.2722%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (6 samples, 0.02%)</title><rect x="82.0556%" y="133" width="0.0200%" height="15" fill="rgb(233,208,19)" fg:x="24638" fg:w="6"/><text x="82.3056%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ad (4 samples, 0.01%)</title><rect x="82.0755%" y="133" width="0.0133%" height="15" fill="rgb(216,164,2)" fg:x="24644" fg:w="4"/><text x="82.3255%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (28 samples, 0.09%)</title><rect x="82.0988%" y="133" width="0.0933%" height="15" fill="rgb(220,129,5)" fg:x="24651" fg:w="28"/><text x="82.3488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574e7 (4 samples, 0.01%)</title><rect x="82.2154%" y="133" width="0.0133%" height="15" fill="rgb(242,17,10)" fg:x="24686" fg:w="4"/><text x="82.4654%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (25 samples, 0.08%)</title><rect x="82.2354%" y="133" width="0.0833%" height="15" fill="rgb(242,107,0)" fg:x="24692" fg:w="25"/><text x="82.4854%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574f6 (14 samples, 0.05%)</title><rect x="82.3187%" y="133" width="0.0466%" height="15" fill="rgb(251,28,31)" fg:x="24717" fg:w="14"/><text x="82.5687%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fc (7 samples, 0.02%)</title><rect x="82.3653%" y="133" width="0.0233%" height="15" fill="rgb(233,223,10)" fg:x="24731" fg:w="7"/><text x="82.6153%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fe (6 samples, 0.02%)</title><rect x="82.3886%" y="133" width="0.0200%" height="15" fill="rgb(215,21,27)" fg:x="24738" fg:w="6"/><text x="82.6386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57504 (6 samples, 0.02%)</title><rect x="82.4086%" y="133" width="0.0200%" height="15" fill="rgb(232,23,21)" fg:x="24744" fg:w="6"/><text x="82.6586%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (81 samples, 0.27%)</title><rect x="82.4286%" y="133" width="0.2698%" height="15" fill="rgb(244,5,23)" fg:x="24750" fg:w="81"/><text x="82.6786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575a4 (6 samples, 0.02%)</title><rect x="82.7116%" y="133" width="0.0200%" height="15" fill="rgb(226,81,46)" fg:x="24835" fg:w="6"/><text x="82.9616%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575ae (10 samples, 0.03%)</title><rect x="82.7416%" y="133" width="0.0333%" height="15" fill="rgb(247,70,30)" fg:x="24844" fg:w="10"/><text x="82.9916%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b0 (4 samples, 0.01%)</title><rect x="82.7749%" y="133" width="0.0133%" height="15" fill="rgb(212,68,19)" fg:x="24854" fg:w="4"/><text x="83.0249%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b6 (31 samples, 0.10%)</title><rect x="82.7916%" y="133" width="0.1032%" height="15" fill="rgb(240,187,13)" fg:x="24859" fg:w="31"/><text x="83.0416%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575c6 (4 samples, 0.01%)</title><rect x="82.9115%" y="133" width="0.0133%" height="15" fill="rgb(223,113,26)" fg:x="24895" fg:w="4"/><text x="83.1615%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,483 samples, 11.60%)</title><rect x="71.3681%" y="149" width="11.5999%" height="15" fill="rgb(206,192,2)" fg:x="21429" fg:w="3483"/><text x="71.6181%" y="159.50">dateo_fun_remover..</text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.06%)</title><rect x="82.9681%" y="149" width="0.0566%" height="15" fill="rgb(241,108,4)" fg:x="24912" fg:w="17"/><text x="83.2181%" y="159.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (18 samples, 0.06%)</title><rect x="83.0314%" y="149" width="0.0599%" height="15" fill="rgb(247,173,49)" fg:x="24931" fg:w="18"/><text x="83.2814%" y="159.50"></text></g><g><title>dateo_fun_remover`__rust_alloc (5 samples, 0.02%)</title><rect x="83.0913%" y="149" width="0.0167%" height="15" fill="rgb(224,114,35)" fg:x="24949" fg:w="5"/><text x="83.3413%" y="159.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (9 samples, 0.03%)</title><rect x="83.3511%" y="133" width="0.0300%" height="15" fill="rgb(245,159,27)" fg:x="25027" fg:w="9"/><text x="83.6011%" y="143.50"></text></g><g><title>dateo_fun_remover`__rust_realloc (5 samples, 0.02%)</title><rect x="83.3811%" y="133" width="0.0167%" height="15" fill="rgb(245,172,44)" fg:x="25036" fg:w="5"/><text x="83.6311%" y="143.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (27 samples, 0.09%)</title><rect x="83.5509%" y="117" width="0.0899%" height="15" fill="rgb(236,23,11)" fg:x="25087" fg:w="27"/><text x="83.8009%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e96 (6 samples, 0.02%)</title><rect x="83.6408%" y="117" width="0.0200%" height="15" fill="rgb(205,117,38)" fg:x="25114" fg:w="6"/><text x="83.8908%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57ec5 (5 samples, 0.02%)</title><rect x="83.6908%" y="117" width="0.0167%" height="15" fill="rgb(237,72,25)" fg:x="25129" fg:w="5"/><text x="83.9408%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f6b (7 samples, 0.02%)</title><rect x="83.7308%" y="117" width="0.0233%" height="15" fill="rgb(244,70,9)" fg:x="25141" fg:w="7"/><text x="83.9808%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f7b (15 samples, 0.05%)</title><rect x="83.7707%" y="117" width="0.0500%" height="15" fill="rgb(217,125,39)" fg:x="25153" fg:w="15"/><text x="84.0207%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f8d (5 samples, 0.02%)</title><rect x="83.8240%" y="117" width="0.0167%" height="15" fill="rgb(235,36,10)" fg:x="25169" fg:w="5"/><text x="84.0740%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f9a (5 samples, 0.02%)</title><rect x="83.8440%" y="117" width="0.0167%" height="15" fill="rgb(251,123,47)" fg:x="25175" fg:w="5"/><text x="84.0940%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fe9 (4 samples, 0.01%)</title><rect x="83.9039%" y="117" width="0.0133%" height="15" fill="rgb(221,13,13)" fg:x="25193" fg:w="4"/><text x="84.1539%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fff (4 samples, 0.01%)</title><rect x="83.9406%" y="117" width="0.0133%" height="15" fill="rgb(238,131,9)" fg:x="25204" fg:w="4"/><text x="84.1906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58004 (105 samples, 0.35%)</title><rect x="83.9539%" y="117" width="0.3497%" height="15" fill="rgb(211,50,8)" fg:x="25208" fg:w="105"/><text x="84.2039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58017 (40 samples, 0.13%)</title><rect x="84.3036%" y="117" width="0.1332%" height="15" fill="rgb(245,182,24)" fg:x="25313" fg:w="40"/><text x="84.5536%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5916b (4 samples, 0.01%)</title><rect x="84.5234%" y="117" width="0.0133%" height="15" fill="rgb(242,14,37)" fg:x="25379" fg:w="4"/><text x="84.7734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5917a (5 samples, 0.02%)</title><rect x="84.5600%" y="117" width="0.0167%" height="15" fill="rgb(246,228,12)" fg:x="25390" fg:w="5"/><text x="84.8100%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5920d (7 samples, 0.02%)</title><rect x="84.5834%" y="117" width="0.0233%" height="15" fill="rgb(213,55,15)" fg:x="25397" fg:w="7"/><text x="84.8334%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59227 (4 samples, 0.01%)</title><rect x="84.6067%" y="117" width="0.0133%" height="15" fill="rgb(209,9,3)" fg:x="25404" fg:w="4"/><text x="84.8567%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a66a (4 samples, 0.01%)</title><rect x="84.6566%" y="101" width="0.0133%" height="15" fill="rgb(230,59,30)" fg:x="25419" fg:w="4"/><text x="84.9066%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a68b (6 samples, 0.02%)</title><rect x="84.6833%" y="101" width="0.0200%" height="15" fill="rgb(209,121,21)" fg:x="25427" fg:w="6"/><text x="84.9333%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5807b (6 samples, 0.02%)</title><rect x="84.7832%" y="85" width="0.0200%" height="15" fill="rgb(220,109,13)" fg:x="25457" fg:w="6"/><text x="85.0332%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58120 (5 samples, 0.02%)</title><rect x="84.8265%" y="85" width="0.0167%" height="15" fill="rgb(232,18,1)" fg:x="25470" fg:w="5"/><text x="85.0765%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5815f (6 samples, 0.02%)</title><rect x="84.8864%" y="85" width="0.0200%" height="15" fill="rgb(215,41,42)" fg:x="25488" fg:w="6"/><text x="85.1364%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581a0 (6 samples, 0.02%)</title><rect x="84.9397%" y="85" width="0.0200%" height="15" fill="rgb(224,123,36)" fg:x="25504" fg:w="6"/><text x="85.1897%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581b2 (5 samples, 0.02%)</title><rect x="84.9664%" y="85" width="0.0167%" height="15" fill="rgb(240,125,3)" fg:x="25512" fg:w="5"/><text x="85.2164%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581bf (4 samples, 0.01%)</title><rect x="84.9930%" y="85" width="0.0133%" height="15" fill="rgb(205,98,50)" fg:x="25520" fg:w="4"/><text x="85.2430%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581cb (72 samples, 0.24%)</title><rect x="85.0163%" y="85" width="0.2398%" height="15" fill="rgb(205,185,37)" fg:x="25527" fg:w="72"/><text x="85.2663%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581d4 (26 samples, 0.09%)</title><rect x="85.2561%" y="85" width="0.0866%" height="15" fill="rgb(238,207,15)" fg:x="25599" fg:w="26"/><text x="85.5061%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a782 (6 samples, 0.02%)</title><rect x="85.3927%" y="85" width="0.0200%" height="15" fill="rgb(213,199,42)" fg:x="25640" fg:w="6"/><text x="85.6427%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a7a0 (8 samples, 0.03%)</title><rect x="85.4160%" y="85" width="0.0266%" height="15" fill="rgb(235,201,11)" fg:x="25647" fg:w="8"/><text x="85.6660%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58464 (8 samples, 0.03%)</title><rect x="85.4160%" y="69" width="0.0266%" height="15" fill="rgb(207,46,11)" fg:x="25647" fg:w="8"/><text x="85.6660%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f597de (5 samples, 0.02%)</title><rect x="85.4260%" y="53" width="0.0167%" height="15" fill="rgb(241,35,35)" fg:x="25650" fg:w="5"/><text x="85.6760%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a7df (7 samples, 0.02%)</title><rect x="85.4426%" y="85" width="0.0233%" height="15" fill="rgb(243,32,47)" fg:x="25655" fg:w="7"/><text x="85.6926%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a7f0 (4 samples, 0.01%)</title><rect x="85.4659%" y="85" width="0.0133%" height="15" fill="rgb(247,202,23)" fg:x="25662" fg:w="4"/><text x="85.7159%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a84d (6 samples, 0.02%)</title><rect x="85.4826%" y="85" width="0.0200%" height="15" fill="rgb(219,102,11)" fg:x="25667" fg:w="6"/><text x="85.7326%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (6 samples, 0.02%)</title><rect x="85.5159%" y="69" width="0.0200%" height="15" fill="rgb(243,110,44)" fg:x="25677" fg:w="6"/><text x="85.7659%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (4 samples, 0.01%)</title><rect x="85.5692%" y="69" width="0.0133%" height="15" fill="rgb(222,74,54)" fg:x="25693" fg:w="4"/><text x="85.8192%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (7 samples, 0.02%)</title><rect x="85.5958%" y="69" width="0.0233%" height="15" fill="rgb(216,99,12)" fg:x="25701" fg:w="7"/><text x="85.8458%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (15 samples, 0.05%)</title><rect x="85.6191%" y="69" width="0.0500%" height="15" fill="rgb(226,22,26)" fg:x="25708" fg:w="15"/><text x="85.8691%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e3 (4 samples, 0.01%)</title><rect x="85.6691%" y="69" width="0.0133%" height="15" fill="rgb(217,163,10)" fg:x="25723" fg:w="4"/><text x="85.9191%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (58 samples, 0.19%)</title><rect x="85.6824%" y="69" width="0.1932%" height="15" fill="rgb(213,25,53)" fg:x="25727" fg:w="58"/><text x="85.9324%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (23 samples, 0.08%)</title><rect x="85.8756%" y="69" width="0.0766%" height="15" fill="rgb(252,105,26)" fg:x="25785" fg:w="23"/><text x="86.1256%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (5 samples, 0.02%)</title><rect x="85.9555%" y="69" width="0.0167%" height="15" fill="rgb(220,39,43)" fg:x="25809" fg:w="5"/><text x="86.2055%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (11 samples, 0.04%)</title><rect x="85.9722%" y="69" width="0.0366%" height="15" fill="rgb(229,68,48)" fg:x="25814" fg:w="11"/><text x="86.2222%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (7 samples, 0.02%)</title><rect x="86.0288%" y="69" width="0.0233%" height="15" fill="rgb(252,8,32)" fg:x="25831" fg:w="7"/><text x="86.2788%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (4 samples, 0.01%)</title><rect x="86.0721%" y="69" width="0.0133%" height="15" fill="rgb(223,20,43)" fg:x="25844" fg:w="4"/><text x="86.3221%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57442 (4 samples, 0.01%)</title><rect x="86.0921%" y="69" width="0.0133%" height="15" fill="rgb(229,81,49)" fg:x="25850" fg:w="4"/><text x="86.3421%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (6 samples, 0.02%)</title><rect x="86.1054%" y="69" width="0.0200%" height="15" fill="rgb(236,28,36)" fg:x="25854" fg:w="6"/><text x="86.3554%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (4 samples, 0.01%)</title><rect x="86.1487%" y="69" width="0.0133%" height="15" fill="rgb(249,185,26)" fg:x="25867" fg:w="4"/><text x="86.3987%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57484 (7 samples, 0.02%)</title><rect x="86.1687%" y="69" width="0.0233%" height="15" fill="rgb(249,174,33)" fg:x="25873" fg:w="7"/><text x="86.4187%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (5 samples, 0.02%)</title><rect x="86.2020%" y="69" width="0.0167%" height="15" fill="rgb(233,201,37)" fg:x="25883" fg:w="5"/><text x="86.4520%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (43 samples, 0.14%)</title><rect x="86.2319%" y="69" width="0.1432%" height="15" fill="rgb(221,78,26)" fg:x="25892" fg:w="43"/><text x="86.4819%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (10 samples, 0.03%)</title><rect x="86.4018%" y="69" width="0.0333%" height="15" fill="rgb(250,127,30)" fg:x="25943" fg:w="10"/><text x="86.6518%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574f6 (6 samples, 0.02%)</title><rect x="86.4351%" y="69" width="0.0200%" height="15" fill="rgb(230,49,44)" fg:x="25953" fg:w="6"/><text x="86.6851%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (26 samples, 0.09%)</title><rect x="86.4751%" y="69" width="0.0866%" height="15" fill="rgb(229,67,23)" fg:x="25965" fg:w="26"/><text x="86.7251%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b6 (25 samples, 0.08%)</title><rect x="86.6049%" y="69" width="0.0833%" height="15" fill="rgb(249,83,47)" fg:x="26004" fg:w="25"/><text x="86.8549%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a852 (365 samples, 1.22%)</title><rect x="85.5026%" y="85" width="1.2156%" height="15" fill="rgb(215,43,3)" fg:x="25673" fg:w="365"/><text x="85.7526%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a85d (5 samples, 0.02%)</title><rect x="86.7248%" y="85" width="0.0167%" height="15" fill="rgb(238,154,13)" fg:x="26040" fg:w="5"/><text x="86.9748%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a86f (27 samples, 0.09%)</title><rect x="86.7548%" y="85" width="0.0899%" height="15" fill="rgb(219,56,2)" fg:x="26049" fg:w="27"/><text x="87.0048%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.08%)</title><rect x="86.7648%" y="69" width="0.0799%" height="15" fill="rgb(233,0,4)" fg:x="26052" fg:w="24"/><text x="87.0148%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fc (6 samples, 0.02%)</title><rect x="86.8514%" y="69" width="0.0200%" height="15" fill="rgb(235,30,7)" fg:x="26078" fg:w="6"/><text x="87.1014%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ef (5 samples, 0.02%)</title><rect x="86.9413%" y="69" width="0.0167%" height="15" fill="rgb(250,79,13)" fg:x="26105" fg:w="5"/><text x="87.1913%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (6 samples, 0.02%)</title><rect x="86.9613%" y="69" width="0.0200%" height="15" fill="rgb(211,146,34)" fg:x="26111" fg:w="6"/><text x="87.2113%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71813 (7 samples, 0.02%)</title><rect x="86.9813%" y="69" width="0.0233%" height="15" fill="rgb(228,22,38)" fg:x="26117" fg:w="7"/><text x="87.2313%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71820 (4 samples, 0.01%)</title><rect x="87.0079%" y="69" width="0.0133%" height="15" fill="rgb(235,168,5)" fg:x="26125" fg:w="4"/><text x="87.2579%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71884 (4 samples, 0.01%)</title><rect x="87.0745%" y="69" width="0.0133%" height="15" fill="rgb(221,155,16)" fg:x="26145" fg:w="4"/><text x="87.3245%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (57 samples, 0.19%)</title><rect x="87.0945%" y="69" width="0.1898%" height="15" fill="rgb(215,215,53)" fg:x="26151" fg:w="57"/><text x="87.3445%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (14 samples, 0.05%)</title><rect x="87.2844%" y="69" width="0.0466%" height="15" fill="rgb(223,4,10)" fg:x="26208" fg:w="14"/><text x="87.5344%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (27 samples, 0.09%)</title><rect x="87.3643%" y="69" width="0.0899%" height="15" fill="rgb(234,103,6)" fg:x="26232" fg:w="27"/><text x="87.6143%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (25 samples, 0.08%)</title><rect x="87.3709%" y="53" width="0.0833%" height="15" fill="rgb(227,97,0)" fg:x="26234" fg:w="25"/><text x="87.6209%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71924 (4 samples, 0.01%)</title><rect x="87.4942%" y="69" width="0.0133%" height="15" fill="rgb(234,150,53)" fg:x="26271" fg:w="4"/><text x="87.7442%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71934 (5 samples, 0.02%)</title><rect x="87.5075%" y="69" width="0.0167%" height="15" fill="rgb(228,201,54)" fg:x="26275" fg:w="5"/><text x="87.7575%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7195b (4 samples, 0.01%)</title><rect x="87.5375%" y="69" width="0.0133%" height="15" fill="rgb(222,22,37)" fg:x="26284" fg:w="4"/><text x="87.7875%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (10 samples, 0.03%)</title><rect x="87.5808%" y="69" width="0.0333%" height="15" fill="rgb(237,53,32)" fg:x="26297" fg:w="10"/><text x="87.8308%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (28 samples, 0.09%)</title><rect x="87.6274%" y="69" width="0.0933%" height="15" fill="rgb(233,25,53)" fg:x="26311" fg:w="28"/><text x="87.8774%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a0 (11 samples, 0.04%)</title><rect x="87.7206%" y="69" width="0.0366%" height="15" fill="rgb(210,40,34)" fg:x="26339" fg:w="11"/><text x="87.9706%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a8 (4 samples, 0.01%)</title><rect x="87.7639%" y="69" width="0.0133%" height="15" fill="rgb(241,220,44)" fg:x="26352" fg:w="4"/><text x="88.0139%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (62 samples, 0.21%)</title><rect x="87.7806%" y="69" width="0.2065%" height="15" fill="rgb(235,28,35)" fg:x="26357" fg:w="62"/><text x="88.0306%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719f6 (32 samples, 0.11%)</title><rect x="87.9871%" y="69" width="0.1066%" height="15" fill="rgb(210,56,17)" fg:x="26419" fg:w="32"/><text x="88.2371%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (4 samples, 0.01%)</title><rect x="88.0937%" y="69" width="0.0133%" height="15" fill="rgb(224,130,29)" fg:x="26451" fg:w="4"/><text x="88.3437%" y="79.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="88.1303%" y="69" width="0.0200%" height="15" fill="rgb(235,212,8)" fg:x="26462" fg:w="6"/><text x="88.3803%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a87c (401 samples, 1.34%)</title><rect x="86.8447%" y="85" width="1.3355%" height="15" fill="rgb(223,33,50)" fg:x="26076" fg:w="401"/><text x="87.0947%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (9 samples, 0.03%)</title><rect x="88.1503%" y="69" width="0.0300%" height="15" fill="rgb(219,149,13)" fg:x="26468" fg:w="9"/><text x="88.4003%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a88c (4 samples, 0.01%)</title><rect x="88.1869%" y="85" width="0.0133%" height="15" fill="rgb(250,156,29)" fg:x="26479" fg:w="4"/><text x="88.4369%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a894 (4 samples, 0.01%)</title><rect x="88.2069%" y="85" width="0.0133%" height="15" fill="rgb(216,193,19)" fg:x="26485" fg:w="4"/><text x="88.4569%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7a47e (4 samples, 0.01%)</title><rect x="88.2568%" y="85" width="0.0133%" height="15" fill="rgb(216,135,14)" fg:x="26500" fg:w="4"/><text x="88.5068%" y="95.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.02%)</title><rect x="88.2702%" y="85" width="0.0233%" height="15" fill="rgb(241,47,5)" fg:x="26504" fg:w="7"/><text x="88.5202%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (1,082 samples, 3.60%)</title><rect x="84.7066%" y="101" width="3.6035%" height="15" fill="rgb(233,42,35)" fg:x="25434" fg:w="1082"/><text x="84.9566%" y="111.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (5 samples, 0.02%)</title><rect x="88.2935%" y="85" width="0.0167%" height="15" fill="rgb(231,13,6)" fg:x="26511" fg:w="5"/><text x="88.5435%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a6bb (8 samples, 0.03%)</title><rect x="88.3268%" y="101" width="0.0266%" height="15" fill="rgb(207,181,40)" fg:x="26521" fg:w="8"/><text x="88.5768%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a6c2 (6 samples, 0.02%)</title><rect x="88.3534%" y="101" width="0.0200%" height="15" fill="rgb(254,173,49)" fg:x="26529" fg:w="6"/><text x="88.6034%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a736 (9 samples, 0.03%)</title><rect x="88.3767%" y="101" width="0.0300%" height="15" fill="rgb(221,1,38)" fg:x="26536" fg:w="9"/><text x="88.6267%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (1,142 samples, 3.80%)</title><rect x="84.6233%" y="117" width="3.8034%" height="15" fill="rgb(206,124,46)" fg:x="25409" fg:w="1142"/><text x="84.8733%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a750 (4 samples, 0.01%)</title><rect x="88.4134%" y="101" width="0.0133%" height="15" fill="rgb(249,21,11)" fg:x="26547" fg:w="4"/><text x="88.6634%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59238 (4 samples, 0.01%)</title><rect x="88.4267%" y="117" width="0.0133%" height="15" fill="rgb(222,201,40)" fg:x="26551" fg:w="4"/><text x="88.6767%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (1,531 samples, 5.10%)</title><rect x="83.3977%" y="133" width="5.0989%" height="15" fill="rgb(235,61,29)" fg:x="25041" fg:w="1531"/><text x="83.6477%" y="143.50">dateo_..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f59100 (9 samples, 0.03%)</title><rect x="88.4966%" y="133" width="0.0300%" height="15" fill="rgb(219,207,3)" fg:x="26572" fg:w="9"/><text x="88.7466%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59101 (4 samples, 0.01%)</title><rect x="88.5266%" y="133" width="0.0133%" height="15" fill="rgb(222,56,46)" fg:x="26581" fg:w="4"/><text x="88.7766%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,634 samples, 5.44%)</title><rect x="83.1080%" y="149" width="5.4420%" height="15" fill="rgb(239,76,54)" fg:x="24954" fg:w="1634"/><text x="83.3580%" y="159.50">dateo_f..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f57350 (7 samples, 0.02%)</title><rect x="88.5533%" y="149" width="0.0233%" height="15" fill="rgb(231,124,27)" fg:x="26589" fg:w="7"/><text x="88.8033%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (5 samples, 0.02%)</title><rect x="88.5899%" y="149" width="0.0167%" height="15" fill="rgb(249,195,6)" fg:x="26600" fg:w="5"/><text x="88.8399%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (5 samples, 0.02%)</title><rect x="88.6132%" y="149" width="0.0167%" height="15" fill="rgb(237,174,47)" fg:x="26607" fg:w="5"/><text x="88.8632%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573b2 (7 samples, 0.02%)</title><rect x="88.6498%" y="149" width="0.0233%" height="15" fill="rgb(206,201,31)" fg:x="26618" fg:w="7"/><text x="88.8998%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (4 samples, 0.01%)</title><rect x="88.6831%" y="149" width="0.0133%" height="15" fill="rgb(231,57,52)" fg:x="26628" fg:w="4"/><text x="88.9331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (13 samples, 0.04%)</title><rect x="88.6965%" y="149" width="0.0433%" height="15" fill="rgb(248,177,22)" fg:x="26632" fg:w="13"/><text x="88.9465%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (48 samples, 0.16%)</title><rect x="88.7464%" y="149" width="0.1599%" height="15" fill="rgb(215,211,37)" fg:x="26647" fg:w="48"/><text x="88.9964%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (18 samples, 0.06%)</title><rect x="88.9063%" y="149" width="0.0599%" height="15" fill="rgb(241,128,51)" fg:x="26695" fg:w="18"/><text x="89.1563%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (5 samples, 0.02%)</title><rect x="88.9696%" y="149" width="0.0167%" height="15" fill="rgb(227,165,31)" fg:x="26714" fg:w="5"/><text x="89.2196%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (21 samples, 0.07%)</title><rect x="88.9895%" y="149" width="0.0699%" height="15" fill="rgb(228,167,24)" fg:x="26720" fg:w="21"/><text x="89.2395%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (8 samples, 0.03%)</title><rect x="89.0595%" y="149" width="0.0266%" height="15" fill="rgb(228,143,12)" fg:x="26741" fg:w="8"/><text x="89.3095%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (5 samples, 0.02%)</title><rect x="89.1061%" y="149" width="0.0167%" height="15" fill="rgb(249,149,8)" fg:x="26755" fg:w="5"/><text x="89.3561%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (9 samples, 0.03%)</title><rect x="89.1561%" y="149" width="0.0300%" height="15" fill="rgb(243,35,44)" fg:x="26770" fg:w="9"/><text x="89.4061%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (4 samples, 0.01%)</title><rect x="89.1860%" y="149" width="0.0133%" height="15" fill="rgb(246,89,9)" fg:x="26779" fg:w="4"/><text x="89.4360%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (8 samples, 0.03%)</title><rect x="89.2060%" y="149" width="0.0266%" height="15" fill="rgb(233,213,13)" fg:x="26785" fg:w="8"/><text x="89.4560%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (5 samples, 0.02%)</title><rect x="89.2560%" y="149" width="0.0167%" height="15" fill="rgb(233,141,41)" fg:x="26800" fg:w="5"/><text x="89.5060%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (6 samples, 0.02%)</title><rect x="89.2726%" y="149" width="0.0200%" height="15" fill="rgb(239,167,4)" fg:x="26805" fg:w="6"/><text x="89.5226%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (11 samples, 0.04%)</title><rect x="89.2993%" y="149" width="0.0366%" height="15" fill="rgb(209,217,16)" fg:x="26813" fg:w="11"/><text x="89.5493%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (21 samples, 0.07%)</title><rect x="89.3659%" y="149" width="0.0699%" height="15" fill="rgb(219,88,35)" fg:x="26833" fg:w="21"/><text x="89.6159%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fe (4 samples, 0.01%)</title><rect x="89.4525%" y="149" width="0.0133%" height="15" fill="rgb(220,193,23)" fg:x="26859" fg:w="4"/><text x="89.7025%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57504 (4 samples, 0.01%)</title><rect x="89.4658%" y="149" width="0.0133%" height="15" fill="rgb(230,90,52)" fg:x="26863" fg:w="4"/><text x="89.7158%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (48 samples, 0.16%)</title><rect x="89.4791%" y="149" width="0.1599%" height="15" fill="rgb(252,106,19)" fg:x="26867" fg:w="48"/><text x="89.7291%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575a4 (4 samples, 0.01%)</title><rect x="89.6656%" y="149" width="0.0133%" height="15" fill="rgb(206,74,20)" fg:x="26923" fg:w="4"/><text x="89.9156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b6 (24 samples, 0.08%)</title><rect x="89.7089%" y="149" width="0.0799%" height="15" fill="rgb(230,138,44)" fg:x="26936" fg:w="24"/><text x="89.9589%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b9 (4 samples, 0.01%)</title><rect x="89.7888%" y="149" width="0.0133%" height="15" fill="rgb(235,182,43)" fg:x="26960" fg:w="4"/><text x="90.0388%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fe (10 samples, 0.03%)</title><rect x="89.8155%" y="149" width="0.0333%" height="15" fill="rgb(242,16,51)" fg:x="26968" fg:w="10"/><text x="90.0655%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71705 (6 samples, 0.02%)</title><rect x="89.8621%" y="149" width="0.0200%" height="15" fill="rgb(248,9,4)" fg:x="26982" fg:w="6"/><text x="90.1121%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170f (7 samples, 0.02%)</title><rect x="89.8854%" y="149" width="0.0233%" height="15" fill="rgb(210,31,22)" fg:x="26989" fg:w="7"/><text x="90.1354%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7172f (10 samples, 0.03%)</title><rect x="89.9187%" y="149" width="0.0333%" height="15" fill="rgb(239,54,39)" fg:x="26999" fg:w="10"/><text x="90.1687%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7174f (6 samples, 0.02%)</title><rect x="89.9654%" y="149" width="0.0200%" height="15" fill="rgb(230,99,41)" fg:x="27013" fg:w="6"/><text x="90.2154%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e0 (8 samples, 0.03%)</title><rect x="89.9920%" y="149" width="0.0266%" height="15" fill="rgb(253,106,12)" fg:x="27021" fg:w="8"/><text x="90.2420%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e3 (4 samples, 0.01%)</title><rect x="90.0187%" y="149" width="0.0133%" height="15" fill="rgb(213,46,41)" fg:x="27029" fg:w="4"/><text x="90.2687%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717f2 (9 samples, 0.03%)</title><rect x="90.0420%" y="149" width="0.0300%" height="15" fill="rgb(215,133,35)" fg:x="27036" fg:w="9"/><text x="90.2920%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717f5 (4 samples, 0.01%)</title><rect x="90.0719%" y="149" width="0.0133%" height="15" fill="rgb(213,28,5)" fg:x="27045" fg:w="4"/><text x="90.3219%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (9 samples, 0.03%)</title><rect x="90.0853%" y="149" width="0.0300%" height="15" fill="rgb(215,77,49)" fg:x="27049" fg:w="9"/><text x="90.3353%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71802 (4 samples, 0.01%)</title><rect x="90.1152%" y="149" width="0.0133%" height="15" fill="rgb(248,100,22)" fg:x="27058" fg:w="4"/><text x="90.3652%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71816 (4 samples, 0.01%)</title><rect x="90.1485%" y="149" width="0.0133%" height="15" fill="rgb(208,67,9)" fg:x="27068" fg:w="4"/><text x="90.3985%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71820 (4 samples, 0.01%)</title><rect x="90.1719%" y="149" width="0.0133%" height="15" fill="rgb(219,133,21)" fg:x="27075" fg:w="4"/><text x="90.4219%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71826 (6 samples, 0.02%)</title><rect x="90.1852%" y="149" width="0.0200%" height="15" fill="rgb(246,46,29)" fg:x="27079" fg:w="6"/><text x="90.4352%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71835 (8 samples, 0.03%)</title><rect x="90.2285%" y="149" width="0.0266%" height="15" fill="rgb(246,185,52)" fg:x="27092" fg:w="8"/><text x="90.4785%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7183d (10 samples, 0.03%)</title><rect x="90.2551%" y="149" width="0.0333%" height="15" fill="rgb(252,136,11)" fg:x="27100" fg:w="10"/><text x="90.5051%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71851 (4 samples, 0.01%)</title><rect x="90.3017%" y="149" width="0.0133%" height="15" fill="rgb(219,138,53)" fg:x="27114" fg:w="4"/><text x="90.5517%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7185e (4 samples, 0.01%)</title><rect x="90.3151%" y="149" width="0.0133%" height="15" fill="rgb(211,51,23)" fg:x="27118" fg:w="4"/><text x="90.5651%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7186d (8 samples, 0.03%)</title><rect x="90.3384%" y="149" width="0.0266%" height="15" fill="rgb(247,221,28)" fg:x="27125" fg:w="8"/><text x="90.5884%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71870 (6 samples, 0.02%)</title><rect x="90.3650%" y="149" width="0.0200%" height="15" fill="rgb(251,222,45)" fg:x="27133" fg:w="6"/><text x="90.6150%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71879 (4 samples, 0.01%)</title><rect x="90.3950%" y="149" width="0.0133%" height="15" fill="rgb(217,162,53)" fg:x="27142" fg:w="4"/><text x="90.6450%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7187d (4 samples, 0.01%)</title><rect x="90.4083%" y="149" width="0.0133%" height="15" fill="rgb(229,93,14)" fg:x="27146" fg:w="4"/><text x="90.6583%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71887 (5 samples, 0.02%)</title><rect x="90.4283%" y="149" width="0.0167%" height="15" fill="rgb(209,67,49)" fg:x="27152" fg:w="5"/><text x="90.6783%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7188c (6 samples, 0.02%)</title><rect x="90.4449%" y="149" width="0.0200%" height="15" fill="rgb(213,87,29)" fg:x="27157" fg:w="6"/><text x="90.6949%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (195 samples, 0.65%)</title><rect x="90.4649%" y="149" width="0.6494%" height="15" fill="rgb(205,151,52)" fg:x="27163" fg:w="195"/><text x="90.7149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (69 samples, 0.23%)</title><rect x="91.1144%" y="149" width="0.2298%" height="15" fill="rgb(253,215,39)" fg:x="27358" fg:w="69"/><text x="91.3644%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718d0 (5 samples, 0.02%)</title><rect x="91.3475%" y="149" width="0.0167%" height="15" fill="rgb(221,220,41)" fg:x="27428" fg:w="5"/><text x="91.5975%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718e5 (7 samples, 0.02%)</title><rect x="91.3708%" y="149" width="0.0233%" height="15" fill="rgb(218,133,21)" fg:x="27435" fg:w="7"/><text x="91.6208%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (61 samples, 0.20%)</title><rect x="91.4174%" y="149" width="0.2032%" height="15" fill="rgb(221,193,43)" fg:x="27449" fg:w="61"/><text x="91.6674%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (59 samples, 0.20%)</title><rect x="91.4241%" y="133" width="0.1965%" height="15" fill="rgb(240,128,52)" fg:x="27451" fg:w="59"/><text x="91.6741%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71908 (4 samples, 0.01%)</title><rect x="91.6239%" y="149" width="0.0133%" height="15" fill="rgb(253,114,12)" fg:x="27511" fg:w="4"/><text x="91.8739%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7191d (5 samples, 0.02%)</title><rect x="91.6506%" y="149" width="0.0167%" height="15" fill="rgb(215,223,47)" fg:x="27519" fg:w="5"/><text x="91.9006%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71932 (4 samples, 0.01%)</title><rect x="91.6972%" y="149" width="0.0133%" height="15" fill="rgb(248,225,23)" fg:x="27533" fg:w="4"/><text x="91.9472%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7193f (4 samples, 0.01%)</title><rect x="91.7238%" y="149" width="0.0133%" height="15" fill="rgb(250,108,0)" fg:x="27541" fg:w="4"/><text x="91.9738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71945 (7 samples, 0.02%)</title><rect x="91.7372%" y="149" width="0.0233%" height="15" fill="rgb(228,208,7)" fg:x="27545" fg:w="7"/><text x="91.9872%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71947 (4 samples, 0.01%)</title><rect x="91.7605%" y="149" width="0.0133%" height="15" fill="rgb(244,45,10)" fg:x="27552" fg:w="4"/><text x="92.0105%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71959 (6 samples, 0.02%)</title><rect x="91.7838%" y="149" width="0.0200%" height="15" fill="rgb(207,125,25)" fg:x="27559" fg:w="6"/><text x="92.0338%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7195b (4 samples, 0.01%)</title><rect x="91.8038%" y="149" width="0.0133%" height="15" fill="rgb(210,195,18)" fg:x="27565" fg:w="4"/><text x="92.0538%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71969 (4 samples, 0.01%)</title><rect x="91.8238%" y="149" width="0.0133%" height="15" fill="rgb(249,80,12)" fg:x="27571" fg:w="4"/><text x="92.0738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (19 samples, 0.06%)</title><rect x="91.8704%" y="149" width="0.0633%" height="15" fill="rgb(221,65,9)" fg:x="27585" fg:w="19"/><text x="92.1204%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71999 (5 samples, 0.02%)</title><rect x="91.9403%" y="149" width="0.0167%" height="15" fill="rgb(235,49,36)" fg:x="27606" fg:w="5"/><text x="92.1903%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (94 samples, 0.31%)</title><rect x="91.9636%" y="149" width="0.3131%" height="15" fill="rgb(225,32,20)" fg:x="27613" fg:w="94"/><text x="92.2136%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a0 (32 samples, 0.11%)</title><rect x="92.2767%" y="149" width="0.1066%" height="15" fill="rgb(215,141,46)" fg:x="27707" fg:w="32"/><text x="92.5267%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719aa (8 samples, 0.03%)</title><rect x="92.4033%" y="149" width="0.0266%" height="15" fill="rgb(250,160,47)" fg:x="27745" fg:w="8"/><text x="92.6533%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (118 samples, 0.39%)</title><rect x="92.4332%" y="149" width="0.3930%" height="15" fill="rgb(216,222,40)" fg:x="27754" fg:w="118"/><text x="92.6832%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719f6 (47 samples, 0.16%)</title><rect x="92.8295%" y="149" width="0.1565%" height="15" fill="rgb(234,217,39)" fg:x="27873" fg:w="47"/><text x="93.0795%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (10 samples, 0.03%)</title><rect x="92.9861%" y="149" width="0.0333%" height="15" fill="rgb(207,178,40)" fg:x="27920" fg:w="10"/><text x="93.2361%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (5 samples, 0.02%)</title><rect x="93.0260%" y="149" width="0.0167%" height="15" fill="rgb(221,136,13)" fg:x="27932" fg:w="5"/><text x="93.2760%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cdd (4 samples, 0.01%)</title><rect x="93.0427%" y="149" width="0.0133%" height="15" fill="rgb(249,199,10)" fg:x="27937" fg:w="4"/><text x="93.2927%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cf1 (7 samples, 0.02%)</title><rect x="93.0593%" y="149" width="0.0233%" height="15" fill="rgb(249,222,13)" fg:x="27942" fg:w="7"/><text x="93.3093%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d04 (8 samples, 0.03%)</title><rect x="93.0993%" y="149" width="0.0266%" height="15" fill="rgb(244,185,38)" fg:x="27954" fg:w="8"/><text x="93.3493%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d0d (4 samples, 0.01%)</title><rect x="93.1359%" y="149" width="0.0133%" height="15" fill="rgb(236,202,9)" fg:x="27965" fg:w="4"/><text x="93.3859%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d0f (5 samples, 0.02%)</title><rect x="93.1493%" y="149" width="0.0167%" height="15" fill="rgb(250,229,37)" fg:x="27969" fg:w="5"/><text x="93.3993%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d19 (9 samples, 0.03%)</title><rect x="93.1693%" y="149" width="0.0300%" height="15" fill="rgb(206,174,23)" fg:x="27975" fg:w="9"/><text x="93.4193%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d28 (5 samples, 0.02%)</title><rect x="93.2159%" y="149" width="0.0167%" height="15" fill="rgb(211,33,43)" fg:x="27989" fg:w="5"/><text x="93.4659%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7a472 (6 samples, 0.02%)</title><rect x="93.2392%" y="149" width="0.0200%" height="15" fill="rgb(245,58,50)" fg:x="27996" fg:w="6"/><text x="93.4892%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (7 samples, 0.02%)</title><rect x="93.2592%" y="149" width="0.0233%" height="15" fill="rgb(244,68,36)" fg:x="28002" fg:w="7"/><text x="93.5092%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (20 samples, 0.07%)</title><rect x="93.2825%" y="149" width="0.0666%" height="15" fill="rgb(232,229,15)" fg:x="28009" fg:w="20"/><text x="93.5325%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (6,989 samples, 23.28%)</title><rect x="70.2891%" y="165" width="23.2765%" height="15" fill="rgb(254,30,23)" fg:x="21105" fg:w="6989"/><text x="70.5391%" y="175.50">dateo_fun_remover`dateo_fun_remover::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (65 samples, 0.22%)</title><rect x="93.3491%" y="149" width="0.2165%" height="15" fill="rgb(235,160,14)" fg:x="28029" fg:w="65"/><text x="93.5991%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c6e470 (176 samples, 0.59%)</title><rect x="93.5656%" y="165" width="0.5862%" height="15" fill="rgb(212,155,44)" fg:x="28094" fg:w="176"/><text x="93.8156%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (818 samples, 2.72%)</title><rect x="94.1517%" y="165" width="2.7243%" height="15" fill="rgb(226,2,50)" fg:x="28270" fg:w="818"/><text x="94.4017%" y="175.50">li..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$log (7 samples, 0.02%)</title><rect x="96.8760%" y="165" width="0.0233%" height="15" fill="rgb(234,177,6)" fg:x="29088" fg:w="7"/><text x="97.1260%" y="175.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (13 samples, 0.04%)</title><rect x="96.8994%" y="165" width="0.0433%" height="15" fill="rgb(217,24,9)" fg:x="29095" fg:w="13"/><text x="97.1494%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57350 (5 samples, 0.02%)</title><rect x="96.9426%" y="165" width="0.0167%" height="15" fill="rgb(220,13,46)" fg:x="29108" fg:w="5"/><text x="97.1926%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e2b (6 samples, 0.02%)</title><rect x="96.9693%" y="165" width="0.0200%" height="15" fill="rgb(239,221,27)" fg:x="29116" fg:w="6"/><text x="97.2193%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e3a (4 samples, 0.01%)</title><rect x="96.9959%" y="165" width="0.0133%" height="15" fill="rgb(222,198,25)" fg:x="29124" fg:w="4"/><text x="97.2459%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e45 (7 samples, 0.02%)</title><rect x="97.0226%" y="165" width="0.0233%" height="15" fill="rgb(211,99,13)" fg:x="29132" fg:w="7"/><text x="97.2726%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e4d (8 samples, 0.03%)</title><rect x="97.0459%" y="165" width="0.0266%" height="15" fill="rgb(232,111,31)" fg:x="29139" fg:w="8"/><text x="97.2959%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e57 (8 samples, 0.03%)</title><rect x="97.0759%" y="165" width="0.0266%" height="15" fill="rgb(245,82,37)" fg:x="29148" fg:w="8"/><text x="97.3259%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e60 (5 samples, 0.02%)</title><rect x="97.1092%" y="165" width="0.0167%" height="15" fill="rgb(227,149,46)" fg:x="29158" fg:w="5"/><text x="97.3592%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e62 (5 samples, 0.02%)</title><rect x="97.1258%" y="165" width="0.0167%" height="15" fill="rgb(218,36,50)" fg:x="29163" fg:w="5"/><text x="97.3758%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e6c (5 samples, 0.02%)</title><rect x="97.1425%" y="165" width="0.0167%" height="15" fill="rgb(226,80,48)" fg:x="29168" fg:w="5"/><text x="97.3925%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e70 (16 samples, 0.05%)</title><rect x="97.1591%" y="165" width="0.0533%" height="15" fill="rgb(238,224,15)" fg:x="29173" fg:w="16"/><text x="97.4091%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (8 samples, 0.03%)</title><rect x="97.2491%" y="165" width="0.0266%" height="15" fill="rgb(241,136,10)" fg:x="29200" fg:w="8"/><text x="97.4991%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fe (8 samples, 0.03%)</title><rect x="97.2824%" y="165" width="0.0266%" height="15" fill="rgb(208,32,45)" fg:x="29210" fg:w="8"/><text x="97.5324%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71705 (5 samples, 0.02%)</title><rect x="97.3123%" y="165" width="0.0167%" height="15" fill="rgb(207,135,9)" fg:x="29219" fg:w="5"/><text x="97.5623%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170f (4 samples, 0.01%)</title><rect x="97.3356%" y="165" width="0.0133%" height="15" fill="rgb(206,86,44)" fg:x="29226" fg:w="4"/><text x="97.5856%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7172f (6 samples, 0.02%)</title><rect x="97.3556%" y="165" width="0.0200%" height="15" fill="rgb(245,177,15)" fg:x="29232" fg:w="6"/><text x="97.6056%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e0 (5 samples, 0.02%)</title><rect x="97.3956%" y="165" width="0.0167%" height="15" fill="rgb(206,64,50)" fg:x="29244" fg:w="5"/><text x="97.6456%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e3 (4 samples, 0.01%)</title><rect x="97.4122%" y="165" width="0.0133%" height="15" fill="rgb(234,36,40)" fg:x="29249" fg:w="4"/><text x="97.6622%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (4 samples, 0.01%)</title><rect x="97.4422%" y="165" width="0.0133%" height="15" fill="rgb(213,64,8)" fg:x="29258" fg:w="4"/><text x="97.6922%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71802 (4 samples, 0.01%)</title><rect x="97.4555%" y="165" width="0.0133%" height="15" fill="rgb(210,75,36)" fg:x="29262" fg:w="4"/><text x="97.7055%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7182d (4 samples, 0.01%)</title><rect x="97.4988%" y="165" width="0.0133%" height="15" fill="rgb(229,88,21)" fg:x="29275" fg:w="4"/><text x="97.7488%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7186d (4 samples, 0.01%)</title><rect x="97.5521%" y="165" width="0.0133%" height="15" fill="rgb(252,204,47)" fg:x="29291" fg:w="4"/><text x="97.8021%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (115 samples, 0.38%)</title><rect x="97.6021%" y="165" width="0.3830%" height="15" fill="rgb(208,77,27)" fg:x="29306" fg:w="115"/><text x="97.8521%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (33 samples, 0.11%)</title><rect x="97.9884%" y="165" width="0.1099%" height="15" fill="rgb(221,76,26)" fg:x="29422" fg:w="33"/><text x="98.2384%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718d0 (5 samples, 0.02%)</title><rect x="98.0983%" y="165" width="0.0167%" height="15" fill="rgb(225,139,18)" fg:x="29455" fg:w="5"/><text x="98.3483%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718f1 (5 samples, 0.02%)</title><rect x="98.1416%" y="165" width="0.0167%" height="15" fill="rgb(230,137,11)" fg:x="29468" fg:w="5"/><text x="98.3916%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (51 samples, 0.17%)</title><rect x="98.1583%" y="165" width="0.1699%" height="15" fill="rgb(212,28,1)" fg:x="29473" fg:w="51"/><text x="98.4083%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (47 samples, 0.16%)</title><rect x="98.1716%" y="149" width="0.1565%" height="15" fill="rgb(248,164,17)" fg:x="29477" fg:w="47"/><text x="98.4216%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71924 (6 samples, 0.02%)</title><rect x="98.3514%" y="165" width="0.0200%" height="15" fill="rgb(222,171,42)" fg:x="29531" fg:w="6"/><text x="98.6014%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (31 samples, 0.10%)</title><rect x="98.4380%" y="165" width="0.1032%" height="15" fill="rgb(243,84,45)" fg:x="29557" fg:w="31"/><text x="98.6880%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (22 samples, 0.07%)</title><rect x="98.5479%" y="165" width="0.0733%" height="15" fill="rgb(252,49,23)" fg:x="29590" fg:w="22"/><text x="98.7979%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a0 (17 samples, 0.06%)</title><rect x="98.6212%" y="165" width="0.0566%" height="15" fill="rgb(215,19,7)" fg:x="29612" fg:w="17"/><text x="98.8712%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (42 samples, 0.14%)</title><rect x="98.6911%" y="165" width="0.1399%" height="15" fill="rgb(238,81,41)" fg:x="29633" fg:w="42"/><text x="98.9411%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719f6 (22 samples, 0.07%)</title><rect x="98.8343%" y="165" width="0.0733%" height="15" fill="rgb(210,199,37)" fg:x="29676" fg:w="22"/><text x="99.0843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (6 samples, 0.02%)</title><rect x="98.9176%" y="165" width="0.0200%" height="15" fill="rgb(244,192,49)" fg:x="29701" fg:w="6"/><text x="99.1676%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a47 (8 samples, 0.03%)</title><rect x="98.9409%" y="165" width="0.0266%" height="15" fill="rgb(226,211,11)" fg:x="29708" fg:w="8"/><text x="99.1909%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a4d (4 samples, 0.01%)</title><rect x="98.9776%" y="165" width="0.0133%" height="15" fill="rgb(236,162,54)" fg:x="29719" fg:w="4"/><text x="99.2276%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cf1 (4 samples, 0.01%)</title><rect x="98.9975%" y="165" width="0.0133%" height="15" fill="rgb(220,229,9)" fg:x="29725" fg:w="4"/><text x="99.2475%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="99.0941%" y="165" width="0.0200%" height="15" fill="rgb(250,87,22)" fg:x="29754" fg:w="6"/><text x="99.3441%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (14 samples, 0.05%)</title><rect x="99.1141%" y="165" width="0.0466%" height="15" fill="rgb(239,43,17)" fg:x="29760" fg:w="14"/><text x="99.3641%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.04%)</title><rect x="99.1607%" y="165" width="0.0366%" height="15" fill="rgb(231,177,25)" fg:x="29774" fg:w="11"/><text x="99.4107%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (11,964 samples, 39.85%)</title><rect x="59.4318%" y="181" width="39.8455%" height="15" fill="rgb(219,179,1)" fg:x="17845" fg:w="11964"/><text x="59.6818%" y="191.50">dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (24 samples, 0.08%)</title><rect x="99.1974%" y="165" width="0.0799%" height="15" fill="rgb(238,219,53)" fg:x="29785" fg:w="24"/><text x="99.4474%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e3a (13 samples, 0.04%)</title><rect x="99.3006%" y="181" width="0.0433%" height="15" fill="rgb(232,167,36)" fg:x="29816" fg:w="13"/><text x="99.5506%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e6c (5 samples, 0.02%)</title><rect x="99.3905%" y="181" width="0.0167%" height="15" fill="rgb(244,19,51)" fg:x="29843" fg:w="5"/><text x="99.6405%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e70 (12 samples, 0.04%)</title><rect x="99.4072%" y="181" width="0.0400%" height="15" fill="rgb(224,6,22)" fg:x="29848" fg:w="12"/><text x="99.6572%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e72 (4 samples, 0.01%)</title><rect x="99.4471%" y="181" width="0.0133%" height="15" fill="rgb(224,145,5)" fg:x="29860" fg:w="4"/><text x="99.6971%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (137 samples, 0.46%)</title><rect x="99.4705%" y="181" width="0.4563%" height="15" fill="rgb(234,130,49)" fg:x="29867" fg:w="137"/><text x="99.7205%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (137 samples, 0.46%)</title><rect x="99.4705%" y="165" width="0.4563%" height="15" fill="rgb(254,6,2)" fg:x="29867" fg:w="137"/><text x="99.7205%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (137 samples, 0.46%)</title><rect x="99.4705%" y="149" width="0.4563%" height="15" fill="rgb(208,96,46)" fg:x="29867" fg:w="137"/><text x="99.7205%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (137 samples, 0.46%)</title><rect x="99.4705%" y="133" width="0.4563%" height="15" fill="rgb(239,3,39)" fg:x="29867" fg:w="137"/><text x="99.7205%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (4 samples, 0.01%)</title><rect x="99.9267%" y="181" width="0.0133%" height="15" fill="rgb(233,210,1)" fg:x="30004" fg:w="4"/><text x="100.1767%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a48 (6 samples, 0.02%)</title><rect x="99.9700%" y="181" width="0.0200%" height="15" fill="rgb(244,137,37)" fg:x="30017" fg:w="6"/><text x="100.2200%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (30,023 samples, 99.99%)</title><rect x="0.0067%" y="197" width="99.9900%" height="15" fill="rgb(240,136,2)" fg:x="2" fg:w="30023"/><text x="0.2567%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>all (30,026 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(239,18,37)" fg:x="0" fg:w="30026"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (30,026 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(218,185,22)" fg:x="0" fg:w="30026"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>dateo_fun_remover`main (30,026 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(225,218,4)" fg:x="0" fg:w="30026"/><text x="0.2500%" y="303.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (30,026 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(230,182,32)" fg:x="0" fg:w="30026"/><text x="0.2500%" y="287.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (30,025 samples, 100.00%)</title><rect x="0.0033%" y="261" width="99.9967%" height="15" fill="rgb(242,56,43)" fg:x="1" fg:w="30025"/><text x="0.2533%" y="271.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (30,025 samples, 100.00%)</title><rect x="0.0033%" y="245" width="99.9967%" height="15" fill="rgb(233,99,24)" fg:x="1" fg:w="30025"/><text x="0.2533%" y="255.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (30,025 samples, 100.00%)</title><rect x="0.0033%" y="229" width="99.9967%" height="15" fill="rgb(234,209,42)" fg:x="1" fg:w="30025"/><text x="0.2533%" y="239.50">dateo_fun_remover`dateo_fun_remover::main</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (30,025 samples, 100.00%)</title><rect x="0.0033%" y="213" width="99.9967%" height="15" fill="rgb(227,7,12)" fg:x="1" fg:w="30025"/><text x="0.2533%" y="223.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g></svg></svg>