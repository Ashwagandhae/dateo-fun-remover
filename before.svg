<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="326" onload="init(evt)" viewBox="0 0 1200 326" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="326" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="309.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="309.00"> </text><svg id="frames" x="10" width="1180" total_samples="201632"><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (251 samples, 0.12%)</title><rect x="0.0000%" y="149" width="0.1245%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="251"/><text x="0.2500%" y="159.50"></text></g><g><title>datoe_fun_remover`__rdl_dealloc (825 samples, 0.41%)</title><rect x="0.1294%" y="149" width="0.4092%" height="15" fill="rgb(217,0,24)" fg:x="261" fg:w="825"/><text x="0.3794%" y="159.50"></text></g><g><title>datoe_fun_remover`__rust_dealloc (204 samples, 0.10%)</title><rect x="0.5386%" y="149" width="0.1012%" height="15" fill="rgb(221,193,54)" fg:x="1086" fg:w="204"/><text x="0.7886%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (512 samples, 0.25%)</title><rect x="0.6413%" y="149" width="0.2539%" height="15" fill="rgb(248,212,6)" fg:x="1293" fg:w="512"/><text x="0.8913%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (442 samples, 0.22%)</title><rect x="2.9187%" y="133" width="0.2192%" height="15" fill="rgb(208,68,35)" fg:x="5885" fg:w="442"/><text x="3.1687%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (281 samples, 0.14%)</title><rect x="11.4173%" y="101" width="0.1394%" height="15" fill="rgb(232,128,0)" fg:x="23021" fg:w="281"/><text x="11.6673%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209395 (91 samples, 0.05%)</title><rect x="11.5567%" y="101" width="0.0451%" height="15" fill="rgb(207,160,47)" fg:x="23302" fg:w="91"/><text x="11.8067%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209397 (156 samples, 0.08%)</title><rect x="11.6018%" y="101" width="0.0774%" height="15" fill="rgb(228,23,34)" fg:x="23393" fg:w="156"/><text x="11.8518%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (312 samples, 0.15%)</title><rect x="11.6792%" y="101" width="0.1547%" height="15" fill="rgb(218,30,26)" fg:x="23549" fg:w="312"/><text x="11.9292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20939b (35 samples, 0.02%)</title><rect x="11.8339%" y="101" width="0.0174%" height="15" fill="rgb(220,122,19)" fg:x="23861" fg:w="35"/><text x="12.0839%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20939c (35 samples, 0.02%)</title><rect x="11.8513%" y="101" width="0.0174%" height="15" fill="rgb(250,228,42)" fg:x="23896" fg:w="35"/><text x="12.1013%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (328 samples, 0.16%)</title><rect x="11.8687%" y="101" width="0.1627%" height="15" fill="rgb(240,193,28)" fg:x="23931" fg:w="328"/><text x="12.1187%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a4 (31 samples, 0.02%)</title><rect x="12.0313%" y="101" width="0.0154%" height="15" fill="rgb(216,20,37)" fg:x="24259" fg:w="31"/><text x="12.2813%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a8 (27 samples, 0.01%)</title><rect x="12.0467%" y="101" width="0.0134%" height="15" fill="rgb(206,188,39)" fg:x="24290" fg:w="27"/><text x="12.2967%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ac (52 samples, 0.03%)</title><rect x="12.0601%" y="101" width="0.0258%" height="15" fill="rgb(217,207,13)" fg:x="24317" fg:w="52"/><text x="12.3101%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b2 (273 samples, 0.14%)</title><rect x="12.0859%" y="101" width="0.1354%" height="15" fill="rgb(231,73,38)" fg:x="24369" fg:w="273"/><text x="12.3359%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b6 (30 samples, 0.01%)</title><rect x="12.2213%" y="101" width="0.0149%" height="15" fill="rgb(225,20,46)" fg:x="24642" fg:w="30"/><text x="12.4713%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093c3 (32 samples, 0.02%)</title><rect x="12.2362%" y="101" width="0.0159%" height="15" fill="rgb(210,31,41)" fg:x="24672" fg:w="32"/><text x="12.4862%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093c6 (47 samples, 0.02%)</title><rect x="12.2520%" y="101" width="0.0233%" height="15" fill="rgb(221,200,47)" fg:x="24704" fg:w="47"/><text x="12.5020%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (263 samples, 0.13%)</title><rect x="12.2753%" y="101" width="0.1304%" height="15" fill="rgb(226,26,5)" fg:x="24751" fg:w="263"/><text x="12.5253%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093cc (27 samples, 0.01%)</title><rect x="12.4058%" y="101" width="0.0134%" height="15" fill="rgb(249,33,26)" fg:x="25014" fg:w="27"/><text x="12.6558%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d3 (103 samples, 0.05%)</title><rect x="12.4192%" y="101" width="0.0511%" height="15" fill="rgb(235,183,28)" fg:x="25041" fg:w="103"/><text x="12.6692%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (268 samples, 0.13%)</title><rect x="12.4702%" y="101" width="0.1329%" height="15" fill="rgb(221,5,38)" fg:x="25144" fg:w="268"/><text x="12.7202%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (1,377 samples, 0.68%)</title><rect x="12.6032%" y="101" width="0.6829%" height="15" fill="rgb(247,18,42)" fg:x="25412" fg:w="1377"/><text x="12.8532%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (5,716 samples, 2.83%)</title><rect x="13.2945%" y="101" width="2.8349%" height="15" fill="rgb(241,131,45)" fg:x="26806" fg:w="5716"/><text x="13.5445%" y="111.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (485 samples, 0.24%)</title><rect x="16.1294%" y="101" width="0.2405%" height="15" fill="rgb(249,31,29)" fg:x="32522" fg:w="485"/><text x="16.3794%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093f8 (406 samples, 0.20%)</title><rect x="16.3729%" y="101" width="0.2014%" height="15" fill="rgb(225,111,53)" fg:x="33013" fg:w="406"/><text x="16.6229%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (1,522 samples, 0.75%)</title><rect x="16.5762%" y="101" width="0.7548%" height="15" fill="rgb(238,160,17)" fg:x="33423" fg:w="1522"/><text x="16.8262%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (423 samples, 0.21%)</title><rect x="17.3311%" y="101" width="0.2098%" height="15" fill="rgb(214,148,48)" fg:x="34945" fg:w="423"/><text x="17.5811%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (382 samples, 0.19%)</title><rect x="17.5429%" y="101" width="0.1895%" height="15" fill="rgb(232,36,49)" fg:x="35372" fg:w="382"/><text x="17.7929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (851 samples, 0.42%)</title><rect x="17.7333%" y="101" width="0.4221%" height="15" fill="rgb(209,103,24)" fg:x="35756" fg:w="851"/><text x="17.9833%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (398 samples, 0.20%)</title><rect x="18.1598%" y="101" width="0.1974%" height="15" fill="rgb(229,88,8)" fg:x="36616" fg:w="398"/><text x="18.4098%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (397 samples, 0.20%)</title><rect x="18.3646%" y="101" width="0.1969%" height="15" fill="rgb(213,181,19)" fg:x="37029" fg:w="397"/><text x="18.6146%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20943e (47 samples, 0.02%)</title><rect x="18.5660%" y="101" width="0.0233%" height="15" fill="rgb(254,191,54)" fg:x="37435" fg:w="47"/><text x="18.8160%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (146 samples, 0.07%)</title><rect x="18.5893%" y="101" width="0.0724%" height="15" fill="rgb(241,83,37)" fg:x="37482" fg:w="146"/><text x="18.8393%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (387 samples, 0.19%)</title><rect x="18.6617%" y="101" width="0.1919%" height="15" fill="rgb(233,36,39)" fg:x="37628" fg:w="387"/><text x="18.9117%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (402 samples, 0.20%)</title><rect x="18.8551%" y="101" width="0.1994%" height="15" fill="rgb(226,3,54)" fg:x="38018" fg:w="402"/><text x="19.1051%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (399 samples, 0.20%)</title><rect x="19.0585%" y="101" width="0.1979%" height="15" fill="rgb(245,192,40)" fg:x="38428" fg:w="399"/><text x="19.3085%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (373 samples, 0.18%)</title><rect x="19.2579%" y="101" width="0.1850%" height="15" fill="rgb(238,167,29)" fg:x="38830" fg:w="373"/><text x="19.5079%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (360 samples, 0.18%)</title><rect x="19.4513%" y="101" width="0.1785%" height="15" fill="rgb(232,182,51)" fg:x="39220" fg:w="360"/><text x="19.7013%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (339 samples, 0.17%)</title><rect x="19.6387%" y="101" width="0.1681%" height="15" fill="rgb(231,60,39)" fg:x="39598" fg:w="339"/><text x="19.8887%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (24 samples, 0.01%)</title><rect x="19.8089%" y="101" width="0.0119%" height="15" fill="rgb(208,69,12)" fg:x="39941" fg:w="24"/><text x="20.0589%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (393 samples, 0.19%)</title><rect x="19.8297%" y="101" width="0.1949%" height="15" fill="rgb(235,93,37)" fg:x="39983" fg:w="393"/><text x="20.0797%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e0 (36 samples, 0.02%)</title><rect x="20.0281%" y="101" width="0.0179%" height="15" fill="rgb(213,116,39)" fg:x="40383" fg:w="36"/><text x="20.2781%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e3 (107 samples, 0.05%)</title><rect x="20.0459%" y="101" width="0.0531%" height="15" fill="rgb(222,207,29)" fg:x="40419" fg:w="107"/><text x="20.2959%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (405 samples, 0.20%)</title><rect x="20.0990%" y="101" width="0.2009%" height="15" fill="rgb(206,96,30)" fg:x="40526" fg:w="405"/><text x="20.3490%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (1,679 samples, 0.83%)</title><rect x="20.3008%" y="101" width="0.8327%" height="15" fill="rgb(218,138,4)" fg:x="40933" fg:w="1679"/><text x="20.5508%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094f6 (36 samples, 0.02%)</title><rect x="21.1336%" y="101" width="0.0179%" height="15" fill="rgb(250,191,14)" fg:x="42612" fg:w="36"/><text x="21.3836%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (382 samples, 0.19%)</title><rect x="21.1514%" y="101" width="0.1895%" height="15" fill="rgb(239,60,40)" fg:x="42648" fg:w="382"/><text x="21.4014%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (418 samples, 0.21%)</title><rect x="21.3409%" y="101" width="0.2073%" height="15" fill="rgb(206,27,48)" fg:x="43030" fg:w="418"/><text x="21.5909%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (375 samples, 0.19%)</title><rect x="21.5482%" y="101" width="0.1860%" height="15" fill="rgb(225,35,8)" fg:x="43448" fg:w="375"/><text x="21.7982%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (6,285 samples, 3.12%)</title><rect x="21.7341%" y="101" width="3.1171%" height="15" fill="rgb(250,213,24)" fg:x="43823" fg:w="6285"/><text x="21.9841%" y="111.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (374 samples, 0.19%)</title><rect x="24.8517%" y="101" width="0.1855%" height="15" fill="rgb(247,123,22)" fg:x="50109" fg:w="374"/><text x="25.1017%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (369 samples, 0.18%)</title><rect x="25.0412%" y="101" width="0.1830%" height="15" fill="rgb(231,138,38)" fg:x="50491" fg:w="369"/><text x="25.2912%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b6 (102 samples, 0.05%)</title><rect x="25.2276%" y="101" width="0.0506%" height="15" fill="rgb(231,145,46)" fg:x="50867" fg:w="102"/><text x="25.4776%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (386 samples, 0.19%)</title><rect x="25.2782%" y="101" width="0.1914%" height="15" fill="rgb(251,118,11)" fg:x="50969" fg:w="386"/><text x="25.5282%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (378 samples, 0.19%)</title><rect x="25.4731%" y="101" width="0.1875%" height="15" fill="rgb(217,147,25)" fg:x="51362" fg:w="378"/><text x="25.7231%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (410 samples, 0.20%)</title><rect x="25.6641%" y="101" width="0.2033%" height="15" fill="rgb(247,81,37)" fg:x="51747" fg:w="410"/><text x="25.9141%" y="111.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (38,295 samples, 18.99%)</title><rect x="6.8779%" y="117" width="18.9925%" height="15" fill="rgb(209,12,38)" fg:x="13868" fg:w="38295"/><text x="7.1279%" y="127.50">datoe_fun_remover`&lt;alloc::vec:..</text></g><g><title>datoe_fun_remover`__rdl_alloc (795 samples, 0.39%)</title><rect x="25.8739%" y="117" width="0.3943%" height="15" fill="rgb(227,1,9)" fg:x="52170" fg:w="795"/><text x="26.1239%" y="127.50"></text></g><g><title>datoe_fun_remover`__rust_alloc (290 samples, 0.14%)</title><rect x="26.2682%" y="117" width="0.1438%" height="15" fill="rgb(248,47,43)" fg:x="52965" fg:w="290"/><text x="26.5182%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a004 (35 samples, 0.02%)</title><rect x="26.5211%" y="85" width="0.0174%" height="15" fill="rgb(221,10,30)" fg:x="53475" fg:w="35"/><text x="26.7711%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a1cb (48 samples, 0.02%)</title><rect x="26.5732%" y="53" width="0.0238%" height="15" fill="rgb(210,229,1)" fg:x="53580" fg:w="48"/><text x="26.8232%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c852 (121 samples, 0.06%)</title><rect x="26.6039%" y="53" width="0.0600%" height="15" fill="rgb(222,148,37)" fg:x="53642" fg:w="121"/><text x="26.8539%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c86f (66 samples, 0.03%)</title><rect x="26.6664%" y="53" width="0.0327%" height="15" fill="rgb(234,67,33)" fg:x="53768" fg:w="66"/><text x="26.9164%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (66 samples, 0.03%)</title><rect x="26.6664%" y="37" width="0.0327%" height="15" fill="rgb(247,98,35)" fg:x="53768" fg:w="66"/><text x="26.9164%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (45 samples, 0.02%)</title><rect x="26.7160%" y="37" width="0.0223%" height="15" fill="rgb(247,138,52)" fg:x="53868" fg:w="45"/><text x="26.9660%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (175 samples, 0.09%)</title><rect x="26.6996%" y="53" width="0.0868%" height="15" fill="rgb(213,79,30)" fg:x="53835" fg:w="175"/><text x="26.9496%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (484 samples, 0.24%)</title><rect x="26.5533%" y="69" width="0.2400%" height="15" fill="rgb(246,177,23)" fg:x="53540" fg:w="484"/><text x="26.8033%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (544 samples, 0.27%)</title><rect x="26.5508%" y="85" width="0.2698%" height="15" fill="rgb(230,62,27)" fg:x="53535" fg:w="544"/><text x="26.8008%" y="95.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (776 samples, 0.38%)</title><rect x="26.4383%" y="101" width="0.3849%" height="15" fill="rgb(216,154,8)" fg:x="53308" fg:w="776"/><text x="26.6883%" y="111.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (842 samples, 0.42%)</title><rect x="26.4120%" y="117" width="0.4176%" height="15" fill="rgb(244,35,45)" fg:x="53255" fg:w="842"/><text x="26.6620%" y="127.50"></text></g><g><title>datoe_fun_remover`itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (22 samples, 0.01%)</title><rect x="26.8301%" y="117" width="0.0109%" height="15" fill="rgb(251,115,12)" fg:x="54098" fg:w="22"/><text x="27.0801%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (445 samples, 0.22%)</title><rect x="26.8410%" y="117" width="0.2207%" height="15" fill="rgb(240,54,50)" fg:x="54120" fg:w="445"/><text x="27.0910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20935a (23 samples, 0.01%)</title><rect x="27.0651%" y="117" width="0.0114%" height="15" fill="rgb(233,84,52)" fg:x="54572" fg:w="23"/><text x="27.3151%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20938f (96 samples, 0.05%)</title><rect x="27.0766%" y="117" width="0.0476%" height="15" fill="rgb(207,117,47)" fg:x="54595" fg:w="96"/><text x="27.3266%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (365 samples, 0.18%)</title><rect x="27.1266%" y="117" width="0.1810%" height="15" fill="rgb(249,43,39)" fg:x="54696" fg:w="365"/><text x="27.3766%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (362 samples, 0.18%)</title><rect x="27.3077%" y="117" width="0.1795%" height="15" fill="rgb(209,38,44)" fg:x="55061" fg:w="362"/><text x="27.5577%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (396 samples, 0.20%)</title><rect x="27.4922%" y="117" width="0.1964%" height="15" fill="rgb(236,212,23)" fg:x="55433" fg:w="396"/><text x="27.7422%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cfd (48 samples, 0.02%)</title><rect x="27.6990%" y="117" width="0.0238%" height="15" fill="rgb(242,79,21)" fg:x="55850" fg:w="48"/><text x="27.9490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (378 samples, 0.19%)</title><rect x="27.7228%" y="117" width="0.1875%" height="15" fill="rgb(211,96,35)" fg:x="55898" fg:w="378"/><text x="27.9728%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (381 samples, 0.19%)</title><rect x="27.9147%" y="117" width="0.1890%" height="15" fill="rgb(253,215,40)" fg:x="56285" fg:w="381"/><text x="28.1647%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (410 samples, 0.20%)</title><rect x="28.1186%" y="117" width="0.2033%" height="15" fill="rgb(211,81,21)" fg:x="56696" fg:w="410"/><text x="28.3686%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1d (133 samples, 0.07%)</title><rect x="28.3219%" y="117" width="0.0660%" height="15" fill="rgb(208,190,38)" fg:x="57106" fg:w="133"/><text x="28.5719%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1f (114 samples, 0.06%)</title><rect x="28.3879%" y="117" width="0.0565%" height="15" fill="rgb(235,213,38)" fg:x="57239" fg:w="114"/><text x="28.6379%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (260 samples, 0.13%)</title><rect x="28.4454%" y="117" width="0.1289%" height="15" fill="rgb(237,122,38)" fg:x="57355" fg:w="260"/><text x="28.6954%" y="127.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (51,357 samples, 25.47%)</title><rect x="3.1379%" y="133" width="25.4707%" height="15" fill="rgb(244,218,35)" fg:x="6327" fg:w="51357"/><text x="3.3879%" y="143.50">datoe_fun_remover`&lt;itertools::combination..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d2c (69 samples, 0.03%)</title><rect x="28.5743%" y="117" width="0.0342%" height="15" fill="rgb(240,68,47)" fg:x="57615" fg:w="69"/><text x="28.8243%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::vec::from_elem (86 samples, 0.04%)</title><rect x="28.6145%" y="133" width="0.0427%" height="15" fill="rgb(210,16,53)" fg:x="57696" fg:w="86"/><text x="28.8645%" y="143.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$pow (62 samples, 0.03%)</title><rect x="41.0426%" y="85" width="0.0307%" height="15" fill="rgb(235,124,12)" fg:x="82755" fg:w="62"/><text x="41.2926%" y="95.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (30 samples, 0.01%)</title><rect x="41.0733%" y="85" width="0.0149%" height="15" fill="rgb(224,169,11)" fg:x="82817" fg:w="30"/><text x="41.3233%" y="95.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$pow (122 samples, 0.06%)</title><rect x="46.6791%" y="69" width="0.0605%" height="15" fill="rgb(250,166,2)" fg:x="94120" fg:w="122"/><text x="46.9291%" y="79.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (62 samples, 0.03%)</title><rect x="46.7396%" y="69" width="0.0307%" height="15" fill="rgb(242,216,29)" fg:x="94242" fg:w="62"/><text x="46.9896%" y="79.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (111 samples, 0.06%)</title><rect x="51.5905%" y="53" width="0.0551%" height="15" fill="rgb(230,116,27)" fg:x="104023" fg:w="111"/><text x="51.8405%" y="63.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (4,618 samples, 2.29%)</title><rect x="51.6456%" y="53" width="2.2903%" height="15" fill="rgb(228,99,48)" fg:x="104134" fg:w="4618"/><text x="51.8956%" y="63.50">d..</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (14,982 samples, 7.43%)</title><rect x="46.7704%" y="69" width="7.4304%" height="15" fill="rgb(253,11,6)" fg:x="94304" fg:w="14982"/><text x="47.0204%" y="79.50">datoe_fun_..</text></g><g><title>libsystem_m.dylib`trunc (534 samples, 0.26%)</title><rect x="53.9359%" y="53" width="0.2648%" height="15" fill="rgb(247,143,39)" fg:x="108752" fg:w="534"/><text x="54.1859%" y="63.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (4,340 samples, 2.15%)</title><rect x="54.2007%" y="69" width="2.1524%" height="15" fill="rgb(236,97,10)" fg:x="109286" fg:w="4340"/><text x="54.4507%" y="79.50">d..</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (5,721 samples, 2.84%)</title><rect x="56.3532%" y="69" width="2.8373%" height="15" fill="rgb(233,208,19)" fg:x="113626" fg:w="5721"/><text x="56.6032%" y="79.50">da..</text></g><g><title>libsystem_m.dylib`fmod (626 samples, 0.31%)</title><rect x="58.8800%" y="53" width="0.3105%" height="15" fill="rgb(216,164,2)" fg:x="118721" fg:w="626"/><text x="59.1300%" y="63.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (13,411 samples, 6.65%)</title><rect x="59.1905%" y="69" width="6.6512%" height="15" fill="rgb(220,129,5)" fg:x="119347" fg:w="13411"/><text x="59.4405%" y="79.50">libsystem..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (250 samples, 0.12%)</title><rect x="65.8417%" y="69" width="0.1240%" height="15" fill="rgb(242,17,10)" fg:x="132758" fg:w="250"/><text x="66.0917%" y="79.50"></text></g><g><title>libsystem_m.dylib`fmod (23 samples, 0.01%)</title><rect x="65.9657%" y="69" width="0.0114%" height="15" fill="rgb(242,107,0)" fg:x="133008" fg:w="23"/><text x="66.2157%" y="79.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (50,469 samples, 25.03%)</title><rect x="41.0882%" y="85" width="25.0303%" height="15" fill="rgb(251,28,31)" fg:x="82847" fg:w="50469"/><text x="41.3382%" y="95.50">datoe_fun_remover`datoe_fun_remover::fin..</text></g><g><title>libsystem_m.dylib`trunc (285 samples, 0.14%)</title><rect x="65.9771%" y="69" width="0.1413%" height="15" fill="rgb(233,223,10)" fg:x="133031" fg:w="285"/><text x="66.2271%" y="79.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (2,826 samples, 1.40%)</title><rect x="66.1185%" y="85" width="1.4016%" height="15" fill="rgb(215,21,27)" fg:x="133316" fg:w="2826"/><text x="66.3685%" y="95.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (2,934 samples, 1.46%)</title><rect x="67.5200%" y="85" width="1.4551%" height="15" fill="rgb(232,23,21)" fg:x="136142" fg:w="2934"/><text x="67.7700%" y="95.50"></text></g><g><title>libsystem_m.dylib`fmod (287 samples, 0.14%)</title><rect x="68.8328%" y="69" width="0.1423%" height="15" fill="rgb(244,5,23)" fg:x="138789" fg:w="287"/><text x="69.0828%" y="79.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (6,790 samples, 3.37%)</title><rect x="68.9752%" y="85" width="3.3675%" height="15" fill="rgb(226,81,46)" fg:x="139076" fg:w="6790"/><text x="69.2252%" y="95.50">lib..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (145 samples, 0.07%)</title><rect x="72.3427%" y="85" width="0.0719%" height="15" fill="rgb(247,70,30)" fg:x="145866" fg:w="145"/><text x="72.5927%" y="95.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (73,069 samples, 36.24%)</title><rect x="36.2557%" y="101" width="36.2388%" height="15" fill="rgb(212,68,19)" fg:x="73103" fg:w="73069"/><text x="36.5057%" y="111.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::ev..</text></g><g><title>libsystem_m.dylib`trunc (149 samples, 0.07%)</title><rect x="72.4205%" y="85" width="0.0739%" height="15" fill="rgb(240,187,13)" fg:x="146023" fg:w="149"/><text x="72.6705%" y="95.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (1,649 samples, 0.82%)</title><rect x="72.4944%" y="101" width="0.8178%" height="15" fill="rgb(223,113,26)" fg:x="146172" fg:w="1649"/><text x="72.7444%" y="111.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (1,434 samples, 0.71%)</title><rect x="73.3123%" y="101" width="0.7112%" height="15" fill="rgb(206,192,2)" fg:x="147821" fg:w="1434"/><text x="73.5623%" y="111.50"></text></g><g><title>libsystem_m.dylib`fmod (204 samples, 0.10%)</title><rect x="73.9223%" y="85" width="0.1012%" height="15" fill="rgb(241,108,4)" fg:x="149051" fg:w="204"/><text x="74.1723%" y="95.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (2,818 samples, 1.40%)</title><rect x="74.0235%" y="101" width="1.3976%" height="15" fill="rgb(247,173,49)" fg:x="149255" fg:w="2818"/><text x="74.2735%" y="111.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (73 samples, 0.04%)</title><rect x="75.4211%" y="101" width="0.0362%" height="15" fill="rgb(224,114,35)" fg:x="152073" fg:w="73"/><text x="75.6711%" y="111.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (88,457 samples, 43.87%)</title><rect x="31.6249%" y="117" width="43.8705%" height="15" fill="rgb(245,159,27)" fg:x="63766" fg:w="88457"/><text x="31.8749%" y="127.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec</text></g><g><title>libsystem_m.dylib`trunc (70 samples, 0.03%)</title><rect x="75.4607%" y="101" width="0.0347%" height="15" fill="rgb(245,172,44)" fg:x="152153" fg:w="70"/><text x="75.7107%" y="111.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (285 samples, 0.14%)</title><rect x="75.4955%" y="117" width="0.1413%" height="15" fill="rgb(236,23,11)" fg:x="152223" fg:w="285"/><text x="75.7455%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (605 samples, 0.30%)</title><rect x="75.6368%" y="117" width="0.3001%" height="15" fill="rgb(205,117,38)" fg:x="152508" fg:w="605"/><text x="75.8868%" y="127.50"></text></g><g><title>libsystem_m.dylib`fmod (143 samples, 0.07%)</title><rect x="75.8659%" y="101" width="0.0709%" height="15" fill="rgb(237,72,25)" fg:x="152970" fg:w="143"/><text x="76.1159%" y="111.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (922 samples, 0.46%)</title><rect x="75.9369%" y="117" width="0.4573%" height="15" fill="rgb(244,70,9)" fg:x="153113" fg:w="922"/><text x="76.1869%" y="127.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (22 samples, 0.01%)</title><rect x="76.3941%" y="117" width="0.0109%" height="15" fill="rgb(217,125,39)" fg:x="154035" fg:w="22"/><text x="76.6441%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (96,285 samples, 47.75%)</title><rect x="28.6572%" y="133" width="47.7528%" height="15" fill="rgb(235,36,10)" fg:x="57782" fg:w="96285"/><text x="28.9072%" y="143.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (235 samples, 0.12%)</title><rect x="76.4100%" y="133" width="0.1165%" height="15" fill="rgb(251,123,47)" fg:x="154067" fg:w="235"/><text x="76.6600%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (206 samples, 0.10%)</title><rect x="76.4244%" y="117" width="0.1022%" height="15" fill="rgb(221,13,13)" fg:x="154096" fg:w="206"/><text x="76.6744%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (31 samples, 0.02%)</title><rect x="76.5112%" y="101" width="0.0154%" height="15" fill="rgb(238,131,9)" fg:x="154271" fg:w="31"/><text x="76.7612%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fc (134 samples, 0.07%)</title><rect x="76.5424%" y="133" width="0.0665%" height="15" fill="rgb(211,50,8)" fg:x="154334" fg:w="134"/><text x="76.7924%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (239 samples, 0.12%)</title><rect x="76.6089%" y="133" width="0.1185%" height="15" fill="rgb(245,182,24)" fg:x="154468" fg:w="239"/><text x="76.8589%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223702 (39 samples, 0.02%)</title><rect x="76.7339%" y="133" width="0.0193%" height="15" fill="rgb(242,14,37)" fg:x="154720" fg:w="39"/><text x="76.9839%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223704 (103 samples, 0.05%)</title><rect x="76.7532%" y="133" width="0.0511%" height="15" fill="rgb(246,228,12)" fg:x="154759" fg:w="103"/><text x="77.0032%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (271 samples, 0.13%)</title><rect x="76.8043%" y="133" width="0.1344%" height="15" fill="rgb(213,55,15)" fg:x="154862" fg:w="271"/><text x="77.0543%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223709 (25 samples, 0.01%)</title><rect x="76.9456%" y="133" width="0.0124%" height="15" fill="rgb(209,9,3)" fg:x="155147" fg:w="25"/><text x="77.1956%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370c (106 samples, 0.05%)</title><rect x="76.9580%" y="133" width="0.0526%" height="15" fill="rgb(230,59,30)" fg:x="155172" fg:w="106"/><text x="77.2080%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (234 samples, 0.12%)</title><rect x="77.0106%" y="133" width="0.1161%" height="15" fill="rgb(209,121,21)" fg:x="155278" fg:w="234"/><text x="77.2606%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223722 (29 samples, 0.01%)</title><rect x="77.1306%" y="133" width="0.0144%" height="15" fill="rgb(220,109,13)" fg:x="155520" fg:w="29"/><text x="77.3806%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223725 (112 samples, 0.06%)</title><rect x="77.1450%" y="133" width="0.0555%" height="15" fill="rgb(232,18,1)" fg:x="155549" fg:w="112"/><text x="77.3950%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (250 samples, 0.12%)</title><rect x="77.2005%" y="133" width="0.1240%" height="15" fill="rgb(215,41,42)" fg:x="155661" fg:w="250"/><text x="77.4505%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22373f (61 samples, 0.03%)</title><rect x="77.3295%" y="133" width="0.0303%" height="15" fill="rgb(224,123,36)" fg:x="155921" fg:w="61"/><text x="77.5795%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223746 (153 samples, 0.08%)</title><rect x="77.3597%" y="133" width="0.0759%" height="15" fill="rgb(240,125,3)" fg:x="155982" fg:w="153"/><text x="77.6097%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (261 samples, 0.13%)</title><rect x="77.4356%" y="133" width="0.1294%" height="15" fill="rgb(205,98,50)" fg:x="156135" fg:w="261"/><text x="77.6856%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22375f (26 samples, 0.01%)</title><rect x="77.5685%" y="133" width="0.0129%" height="15" fill="rgb(205,185,37)" fg:x="156403" fg:w="26"/><text x="77.8185%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237dd (120 samples, 0.06%)</title><rect x="77.5814%" y="133" width="0.0595%" height="15" fill="rgb(238,207,15)" fg:x="156429" fg:w="120"/><text x="77.8314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (227 samples, 0.11%)</title><rect x="77.6409%" y="133" width="0.1126%" height="15" fill="rgb(213,199,42)" fg:x="156549" fg:w="227"/><text x="77.8909%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e8 (30 samples, 0.01%)</title><rect x="77.7550%" y="133" width="0.0149%" height="15" fill="rgb(235,201,11)" fg:x="156779" fg:w="30"/><text x="78.0050%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ef (91 samples, 0.05%)</title><rect x="77.7699%" y="133" width="0.0451%" height="15" fill="rgb(207,46,11)" fg:x="156809" fg:w="91"/><text x="78.0199%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (229 samples, 0.11%)</title><rect x="77.8150%" y="133" width="0.1136%" height="15" fill="rgb(241,35,35)" fg:x="156900" fg:w="229"/><text x="78.0650%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237fc (29 samples, 0.01%)</title><rect x="77.9380%" y="133" width="0.0144%" height="15" fill="rgb(243,32,47)" fg:x="157148" fg:w="29"/><text x="78.1880%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (759 samples, 0.38%)</title><rect x="77.9524%" y="133" width="0.3764%" height="15" fill="rgb(247,202,23)" fg:x="157177" fg:w="759"/><text x="78.2024%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (162 samples, 0.08%)</title><rect x="78.3288%" y="133" width="0.0803%" height="15" fill="rgb(219,102,11)" fg:x="157936" fg:w="162"/><text x="78.5788%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223813 (242 samples, 0.12%)</title><rect x="78.4122%" y="133" width="0.1200%" height="15" fill="rgb(243,110,44)" fg:x="158104" fg:w="242"/><text x="78.6622%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (135 samples, 0.07%)</title><rect x="78.5322%" y="133" width="0.0670%" height="15" fill="rgb(222,74,54)" fg:x="158346" fg:w="135"/><text x="78.7822%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223820 (279 samples, 0.14%)</title><rect x="78.6006%" y="133" width="0.1384%" height="15" fill="rgb(216,99,12)" fg:x="158484" fg:w="279"/><text x="78.8506%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (153 samples, 0.08%)</title><rect x="78.7390%" y="133" width="0.0759%" height="15" fill="rgb(226,22,26)" fg:x="158763" fg:w="153"/><text x="78.9890%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382d (26 samples, 0.01%)</title><rect x="78.8149%" y="133" width="0.0129%" height="15" fill="rgb(217,163,10)" fg:x="158916" fg:w="26"/><text x="79.0649%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382f (243 samples, 0.12%)</title><rect x="78.8278%" y="133" width="0.1205%" height="15" fill="rgb(213,25,53)" fg:x="158942" fg:w="243"/><text x="79.0778%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (164 samples, 0.08%)</title><rect x="78.9483%" y="133" width="0.0813%" height="15" fill="rgb(252,105,26)" fg:x="159185" fg:w="164"/><text x="79.1983%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22383d (253 samples, 0.13%)</title><rect x="79.0296%" y="133" width="0.1255%" height="15" fill="rgb(220,39,43)" fg:x="159349" fg:w="253"/><text x="79.2796%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223849 (137 samples, 0.07%)</title><rect x="79.1630%" y="133" width="0.0679%" height="15" fill="rgb(229,68,48)" fg:x="159618" fg:w="137"/><text x="79.4130%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (157 samples, 0.08%)</title><rect x="79.2310%" y="133" width="0.0779%" height="15" fill="rgb(252,8,32)" fg:x="159755" fg:w="157"/><text x="79.4810%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22385e (136 samples, 0.07%)</title><rect x="79.3088%" y="133" width="0.0674%" height="15" fill="rgb(223,20,43)" fg:x="159912" fg:w="136"/><text x="79.5588%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223866 (182 samples, 0.09%)</title><rect x="79.3778%" y="133" width="0.0903%" height="15" fill="rgb(229,81,49)" fg:x="160051" fg:w="182"/><text x="79.6278%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (193 samples, 0.10%)</title><rect x="79.4680%" y="133" width="0.0957%" height="15" fill="rgb(236,28,36)" fg:x="160233" fg:w="193"/><text x="79.7180%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223870 (262 samples, 0.13%)</title><rect x="79.5638%" y="133" width="0.1299%" height="15" fill="rgb(249,185,26)" fg:x="160426" fg:w="262"/><text x="79.8138%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223876 (123 samples, 0.06%)</title><rect x="79.7011%" y="133" width="0.0610%" height="15" fill="rgb(249,174,33)" fg:x="160703" fg:w="123"/><text x="79.9511%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (140 samples, 0.07%)</title><rect x="79.7621%" y="133" width="0.0694%" height="15" fill="rgb(233,201,37)" fg:x="160826" fg:w="140"/><text x="80.0121%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22387d (119 samples, 0.06%)</title><rect x="79.8316%" y="133" width="0.0590%" height="15" fill="rgb(221,78,26)" fg:x="160966" fg:w="119"/><text x="80.0816%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223884 (117 samples, 0.06%)</title><rect x="79.8941%" y="133" width="0.0580%" height="15" fill="rgb(250,127,30)" fg:x="161092" fg:w="117"/><text x="80.1441%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (137 samples, 0.07%)</title><rect x="79.9521%" y="133" width="0.0679%" height="15" fill="rgb(230,49,44)" fg:x="161209" fg:w="137"/><text x="80.2021%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22388c (126 samples, 0.06%)</title><rect x="80.0200%" y="133" width="0.0625%" height="15" fill="rgb(229,67,23)" fg:x="161346" fg:w="126"/><text x="80.2700%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (11,882 samples, 5.89%)</title><rect x="80.0830%" y="133" width="5.8929%" height="15" fill="rgb(249,83,47)" fg:x="161473" fg:w="11882"/><text x="80.3330%" y="143.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238c2 (174 samples, 0.09%)</title><rect x="85.9764%" y="133" width="0.0863%" height="15" fill="rgb(215,43,3)" fg:x="173356" fg:w="174"/><text x="86.2264%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (362 samples, 0.18%)</title><rect x="86.0702%" y="133" width="0.1795%" height="15" fill="rgb(238,154,13)" fg:x="173545" fg:w="362"/><text x="86.3202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d5 (24 samples, 0.01%)</title><rect x="86.2497%" y="133" width="0.0119%" height="15" fill="rgb(219,56,2)" fg:x="173907" fg:w="24"/><text x="86.4997%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238de (21 samples, 0.01%)</title><rect x="86.2616%" y="133" width="0.0104%" height="15" fill="rgb(233,0,4)" fg:x="173931" fg:w="21"/><text x="86.5116%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (363 samples, 0.18%)</title><rect x="86.2720%" y="133" width="0.1800%" height="15" fill="rgb(235,30,7)" fg:x="173952" fg:w="363"/><text x="86.5220%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f1 (348 samples, 0.17%)</title><rect x="86.4615%" y="133" width="0.1726%" height="15" fill="rgb(250,79,13)" fg:x="174334" fg:w="348"/><text x="86.7115%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f5 (23 samples, 0.01%)</title><rect x="86.6341%" y="133" width="0.0114%" height="15" fill="rgb(211,146,34)" fg:x="174682" fg:w="23"/><text x="86.8841%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (2,753 samples, 1.37%)</title><rect x="86.6519%" y="133" width="1.3654%" height="15" fill="rgb(228,22,38)" fg:x="174718" fg:w="2753"/><text x="86.9019%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2,370 samples, 1.18%)</title><rect x="86.8419%" y="117" width="1.1754%" height="15" fill="rgb(235,168,5)" fg:x="175101" fg:w="2370"/><text x="87.0919%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223908 (73 samples, 0.04%)</title><rect x="88.0217%" y="133" width="0.0362%" height="15" fill="rgb(221,155,16)" fg:x="177480" fg:w="73"/><text x="88.2717%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223912 (379 samples, 0.19%)</title><rect x="88.0604%" y="133" width="0.1880%" height="15" fill="rgb(215,215,53)" fg:x="177558" fg:w="379"/><text x="88.3104%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22391d (173 samples, 0.09%)</title><rect x="88.2494%" y="133" width="0.0858%" height="15" fill="rgb(223,4,10)" fg:x="177939" fg:w="173"/><text x="88.4994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (347 samples, 0.17%)</title><rect x="88.3382%" y="133" width="0.1721%" height="15" fill="rgb(234,103,6)" fg:x="178118" fg:w="347"/><text x="88.5882%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223928 (33 samples, 0.02%)</title><rect x="88.5103%" y="133" width="0.0164%" height="15" fill="rgb(227,97,0)" fg:x="178465" fg:w="33"/><text x="88.7603%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223934 (376 samples, 0.19%)</title><rect x="88.5286%" y="133" width="0.1865%" height="15" fill="rgb(234,150,53)" fg:x="178502" fg:w="376"/><text x="88.7786%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223939 (52 samples, 0.03%)</title><rect x="88.7151%" y="133" width="0.0258%" height="15" fill="rgb(228,201,54)" fg:x="178878" fg:w="52"/><text x="88.9651%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223947 (366 samples, 0.18%)</title><rect x="88.7419%" y="133" width="0.1815%" height="15" fill="rgb(222,22,37)" fg:x="178932" fg:w="366"/><text x="88.9919%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22394d (48 samples, 0.02%)</title><rect x="88.9234%" y="133" width="0.0238%" height="15" fill="rgb(237,53,32)" fg:x="179298" fg:w="48"/><text x="89.1734%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395b (343 samples, 0.17%)</title><rect x="88.9502%" y="133" width="0.1701%" height="15" fill="rgb(233,25,53)" fg:x="179352" fg:w="343"/><text x="89.2002%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395d (42 samples, 0.02%)</title><rect x="89.1203%" y="133" width="0.0208%" height="15" fill="rgb(210,40,34)" fg:x="179695" fg:w="42"/><text x="89.3703%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396c (347 samples, 0.17%)</title><rect x="89.1411%" y="133" width="0.1721%" height="15" fill="rgb(241,220,44)" fg:x="179737" fg:w="347"/><text x="89.3911%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396e (42 samples, 0.02%)</title><rect x="89.3132%" y="133" width="0.0208%" height="15" fill="rgb(235,28,35)" fg:x="180084" fg:w="42"/><text x="89.5632%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (25 samples, 0.01%)</title><rect x="89.3365%" y="133" width="0.0124%" height="15" fill="rgb(210,56,17)" fg:x="180131" fg:w="25"/><text x="89.5865%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399b (323 samples, 0.16%)</title><rect x="89.3529%" y="133" width="0.1602%" height="15" fill="rgb(224,130,29)" fg:x="180164" fg:w="323"/><text x="89.6029%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (4,807 samples, 2.38%)</title><rect x="89.5131%" y="133" width="2.3840%" height="15" fill="rgb(235,212,8)" fg:x="180487" fg:w="4807"/><text x="89.7631%" y="143.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a0 (68 samples, 0.03%)</title><rect x="91.8971%" y="133" width="0.0337%" height="15" fill="rgb(223,33,50)" fg:x="185294" fg:w="68"/><text x="92.1471%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a2 (100 samples, 0.05%)</title><rect x="91.9308%" y="133" width="0.0496%" height="15" fill="rgb(219,149,13)" fg:x="185362" fg:w="100"/><text x="92.1808%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (374 samples, 0.19%)</title><rect x="91.9804%" y="133" width="0.1855%" height="15" fill="rgb(250,156,29)" fg:x="185462" fg:w="374"/><text x="92.2304%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (360 samples, 0.18%)</title><rect x="92.1659%" y="133" width="0.1785%" height="15" fill="rgb(216,193,19)" fg:x="185836" fg:w="360"/><text x="92.4159%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (7,056 samples, 3.50%)</title><rect x="92.3524%" y="133" width="3.4994%" height="15" fill="rgb(216,135,14)" fg:x="186212" fg:w="7056"/><text x="92.6024%" y="143.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239f6 (110 samples, 0.05%)</title><rect x="95.8553%" y="133" width="0.0546%" height="15" fill="rgb(241,47,5)" fg:x="193275" fg:w="110"/><text x="96.1053%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (403 samples, 0.20%)</title><rect x="95.9099%" y="133" width="0.1999%" height="15" fill="rgb(233,42,35)" fg:x="193385" fg:w="403"/><text x="96.1599%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (404 samples, 0.20%)</title><rect x="96.1147%" y="133" width="0.2004%" height="15" fill="rgb(231,13,6)" fg:x="193798" fg:w="404"/><text x="96.3647%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (397 samples, 0.20%)</title><rect x="96.3210%" y="133" width="0.1969%" height="15" fill="rgb(207,181,40)" fg:x="194214" fg:w="397"/><text x="96.5710%" y="143.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (385 samples, 0.19%)</title><rect x="96.5179%" y="133" width="0.1909%" height="15" fill="rgb(254,173,49)" fg:x="194611" fg:w="385"/><text x="96.7679%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group (193,608 samples, 96.02%)</title><rect x="0.8967%" y="149" width="96.0205%" height="15" fill="rgb(221,1,38)" fg:x="1808" fg:w="193608"/><text x="1.1467%" y="159.50">datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (420 samples, 0.21%)</title><rect x="96.7089%" y="133" width="0.2083%" height="15" fill="rgb(206,124,46)" fg:x="194996" fg:w="420"/><text x="96.9589%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (400 samples, 0.20%)</title><rect x="96.9172%" y="149" width="0.1984%" height="15" fill="rgb(249,21,11)" fg:x="195416" fg:w="400"/><text x="97.1672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (1,555 samples, 0.77%)</title><rect x="97.1210%" y="149" width="0.7712%" height="15" fill="rgb(222,201,40)" fg:x="195827" fg:w="1555"/><text x="97.3710%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3c (249 samples, 0.12%)</title><rect x="97.8922%" y="149" width="0.1235%" height="15" fill="rgb(235,61,29)" fg:x="197382" fg:w="249"/><text x="98.1422%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (142 samples, 0.07%)</title><rect x="98.0172%" y="149" width="0.0704%" height="15" fill="rgb(219,207,3)" fg:x="197634" fg:w="142"/><text x="98.2672%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e4d (231 samples, 0.11%)</title><rect x="98.0876%" y="149" width="0.1146%" height="15" fill="rgb(222,56,46)" fg:x="197776" fg:w="231"/><text x="98.3376%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (410 samples, 0.20%)</title><rect x="98.2066%" y="149" width="0.2033%" height="15" fill="rgb(239,76,54)" fg:x="198016" fg:w="410"/><text x="98.4566%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (193 samples, 0.10%)</title><rect x="98.4134%" y="149" width="0.0957%" height="15" fill="rgb(231,124,27)" fg:x="198433" fg:w="193"/><text x="98.6634%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e62 (256 samples, 0.13%)</title><rect x="98.5092%" y="149" width="0.1270%" height="15" fill="rgb(249,195,6)" fg:x="198626" fg:w="256"/><text x="98.7592%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e6c (50 samples, 0.02%)</title><rect x="98.6436%" y="149" width="0.0248%" height="15" fill="rgb(237,174,47)" fg:x="198897" fg:w="50"/><text x="98.8936%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (510 samples, 0.25%)</title><rect x="98.6684%" y="149" width="0.2529%" height="15" fill="rgb(206,201,31)" fg:x="198947" fg:w="510"/><text x="98.9184%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e72 (235 samples, 0.12%)</title><rect x="98.9213%" y="149" width="0.1165%" height="15" fill="rgb(231,57,52)" fg:x="199457" fg:w="235"/><text x="99.1713%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (270 samples, 0.13%)</title><rect x="99.0438%" y="149" width="0.1339%" height="15" fill="rgb(248,177,22)" fg:x="199704" fg:w="270"/><text x="99.2938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (422 samples, 0.21%)</title><rect x="99.1827%" y="149" width="0.2093%" height="15" fill="rgb(215,211,37)" fg:x="199984" fg:w="422"/><text x="99.4327%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (267 samples, 0.13%)</title><rect x="99.3920%" y="149" width="0.1324%" height="15" fill="rgb(241,128,51)" fg:x="200406" fg:w="267"/><text x="99.6420%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (200,814 samples, 99.59%)</title><rect x="0.0000%" y="165" width="99.5943%" height="15" fill="rgb(227,165,31)" fg:x="0" fg:w="200814"/><text x="0.2500%" y="175.50">datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a4d (141 samples, 0.07%)</title><rect x="99.5244%" y="149" width="0.0699%" height="15" fill="rgb(228,167,24)" fg:x="200673" fg:w="141"/><text x="99.7744%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (45 samples, 0.02%)</title><rect x="99.6141%" y="133" width="0.0223%" height="15" fill="rgb(228,143,12)" fg:x="200854" fg:w="45"/><text x="99.8641%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (31 samples, 0.02%)</title><rect x="99.6211%" y="117" width="0.0154%" height="15" fill="rgb(249,149,8)" fg:x="200868" fg:w="31"/><text x="99.8711%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomStore::load_atoms (93 samples, 0.05%)</title><rect x="99.5963%" y="149" width="0.0461%" height="15" fill="rgb(243,35,44)" fg:x="200818" fg:w="93"/><text x="99.8463%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (79 samples, 0.04%)</title><rect x="99.6632%" y="101" width="0.0392%" height="15" fill="rgb(246,89,9)" fg:x="200953" fg:w="79"/><text x="99.9132%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (25 samples, 0.01%)</title><rect x="99.7332%" y="101" width="0.0124%" height="15" fill="rgb(233,213,13)" fg:x="201094" fg:w="25"/><text x="99.9832%" y="111.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (184 samples, 0.09%)</title><rect x="99.6568%" y="117" width="0.0913%" height="15" fill="rgb(233,141,41)" fg:x="200940" fg:w="184"/><text x="99.9068%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20959d (21 samples, 0.01%)</title><rect x="99.7694%" y="117" width="0.0104%" height="15" fill="rgb(239,167,4)" fg:x="201167" fg:w="21"/><text x="100.0194%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (22 samples, 0.01%)</title><rect x="99.7798%" y="117" width="0.0109%" height="15" fill="rgb(209,217,16)" fg:x="201188" fg:w="22"/><text x="100.0298%" y="127.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (290 samples, 0.14%)</title><rect x="99.6513%" y="133" width="0.1438%" height="15" fill="rgb(219,88,35)" fg:x="200929" fg:w="290"/><text x="99.9013%" y="143.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (28 samples, 0.01%)</title><rect x="99.8091%" y="85" width="0.0139%" height="15" fill="rgb(220,193,23)" fg:x="201247" fg:w="28"/><text x="100.0591%" y="95.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (69 samples, 0.03%)</title><rect x="99.8026%" y="101" width="0.0342%" height="15" fill="rgb(230,90,52)" fg:x="201234" fg:w="69"/><text x="100.0526%" y="111.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (103 samples, 0.05%)</title><rect x="99.7977%" y="117" width="0.0511%" height="15" fill="rgb(252,106,19)" fg:x="201224" fg:w="103"/><text x="100.0477%" y="127.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (129 samples, 0.06%)</title><rect x="99.7952%" y="133" width="0.0640%" height="15" fill="rgb(206,74,20)" fg:x="201219" fg:w="129"/><text x="100.0452%" y="143.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (43 samples, 0.02%)</title><rect x="99.8626%" y="133" width="0.0213%" height="15" fill="rgb(230,138,44)" fg:x="201355" fg:w="43"/><text x="100.1126%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (24 samples, 0.01%)</title><rect x="99.8839%" y="133" width="0.0119%" height="15" fill="rgb(235,182,43)" fg:x="201398" fg:w="24"/><text x="100.1339%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20959d (22 samples, 0.01%)</title><rect x="99.9172%" y="117" width="0.0109%" height="15" fill="rgb(242,16,51)" fg:x="201465" fg:w="22"/><text x="100.1672%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (26 samples, 0.01%)</title><rect x="99.9301%" y="117" width="0.0129%" height="15" fill="rgb(248,9,4)" fg:x="201491" fg:w="26"/><text x="100.1801%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::new_express (98 samples, 0.05%)</title><rect x="99.8958%" y="133" width="0.0486%" height="15" fill="rgb(210,31,22)" fg:x="201422" fg:w="98"/><text x="100.1458%" y="143.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (24 samples, 0.01%)</title><rect x="99.9445%" y="117" width="0.0119%" height="15" fill="rgb(239,54,39)" fg:x="201520" fg:w="24"/><text x="100.1945%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms_rec (50 samples, 0.02%)</title><rect x="99.9445%" y="133" width="0.0248%" height="15" fill="rgb(230,99,41)" fg:x="201520" fg:w="50"/><text x="100.1945%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms_rec (714 samples, 0.35%)</title><rect x="99.6424%" y="149" width="0.3541%" height="15" fill="rgb(253,106,12)" fg:x="200911" fg:w="714"/><text x="99.8924%" y="159.50"></text></g><g><title>all (201,632 samples, 100%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(213,46,41)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="287.50"></text></g><g><title>dyld`start (201,632 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(215,133,35)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="271.50">dyld`start</text></g><g><title>datoe_fun_remover`main (201,632 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(213,28,5)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="255.50">datoe_fun_remover`main</text></g><g><title>datoe_fun_remover`std::rt::lang_start_internal (201,632 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(215,77,49)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="239.50">datoe_fun_remover`std::rt::lang_start_internal</text></g><g><title>datoe_fun_remover`std::rt::lang_start::_{{closure}} (201,632 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(248,100,22)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="223.50">datoe_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (201,632 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(208,67,9)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="207.50">datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>datoe_fun_remover`datoe_fun_remover::main (201,632 samples, 100.00%)</title><rect x="0.0000%" y="181" width="100.0000%" height="15" fill="rgb(219,133,21)" fg:x="0" fg:w="201632"/><text x="0.2500%" y="191.50">datoe_fun_remover`datoe_fun_remover::main</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atom_store (817 samples, 0.41%)</title><rect x="99.5948%" y="165" width="0.4052%" height="15" fill="rgb(246,46,29)" fg:x="200815" fg:w="817"/><text x="99.8448%" y="175.50"></text></g></svg></svg>