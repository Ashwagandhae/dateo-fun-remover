<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="57141"><g><title>libsystem_malloc.dylib`0x7ff81a20b7de (12 samples, 0.02%)</title><rect x="0.1925%" y="85" width="0.0210%" height="15" fill="rgb(227,0,7)" fg:x="110" fg:w="12"/><text x="0.4425%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c7a0 (29 samples, 0.05%)</title><rect x="0.1680%" y="117" width="0.0508%" height="15" fill="rgb(217,0,24)" fg:x="96" fg:w="29"/><text x="0.4180%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (29 samples, 0.05%)</title><rect x="0.1680%" y="101" width="0.0508%" height="15" fill="rgb(221,193,54)" fg:x="96" fg:w="29"/><text x="0.4180%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (60 samples, 0.11%)</title><rect x="0.1505%" y="133" width="0.1050%" height="15" fill="rgb(248,212,6)" fg:x="86" fg:w="60"/><text x="0.4005%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (19 samples, 0.03%)</title><rect x="0.2223%" y="117" width="0.0333%" height="15" fill="rgb(208,68,35)" fg:x="127" fg:w="19"/><text x="0.4723%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (77 samples, 0.13%)</title><rect x="0.1278%" y="181" width="0.1348%" height="15" fill="rgb(232,128,0)" fg:x="73" fg:w="77"/><text x="0.3778%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (76 samples, 0.13%)</title><rect x="0.1295%" y="165" width="0.1330%" height="15" fill="rgb(207,160,47)" fg:x="74" fg:w="76"/><text x="0.3795%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (64 samples, 0.11%)</title><rect x="0.1505%" y="149" width="0.1120%" height="15" fill="rgb(228,23,34)" fg:x="86" fg:w="64"/><text x="0.4005%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20e006 (11 samples, 0.02%)</title><rect x="0.3028%" y="181" width="0.0193%" height="15" fill="rgb(218,30,26)" fg:x="173" fg:w="11"/><text x="0.5528%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (160 samples, 0.28%)</title><rect x="0.0735%" y="197" width="0.2800%" height="15" fill="rgb(220,122,19)" fg:x="42" fg:w="160"/><text x="0.3235%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;bloom::hashing::HashIter as core::iter::traits::iterator::Iterator&gt;::next (592 samples, 1.04%)</title><rect x="0.3588%" y="197" width="1.0360%" height="15" fill="rgb(250,228,42)" fg:x="205" fg:w="592"/><text x="0.6088%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (16 samples, 0.03%)</title><rect x="1.3948%" y="197" width="0.0280%" height="15" fill="rgb(240,193,28)" fg:x="797" fg:w="16"/><text x="1.6448%" y="207.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (21 samples, 0.04%)</title><rect x="1.4228%" y="197" width="0.0368%" height="15" fill="rgb(216,20,37)" fg:x="813" fg:w="21"/><text x="1.6728%" y="207.50"></text></g><g><title>dateo_fun_remover`bloom::hashing::HashIter::from (93 samples, 0.16%)</title><rect x="1.4700%" y="197" width="0.1628%" height="15" fill="rgb(206,188,39)" fg:x="840" fg:w="93"/><text x="1.7200%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (6 samples, 0.01%)</title><rect x="1.6713%" y="149" width="0.0105%" height="15" fill="rgb(217,207,13)" fg:x="955" fg:w="6"/><text x="1.9213%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (6 samples, 0.01%)</title><rect x="1.6713%" y="133" width="0.0105%" height="15" fill="rgb(231,73,38)" fg:x="955" fg:w="6"/><text x="1.9213%" y="143.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (31 samples, 0.05%)</title><rect x="1.6451%" y="165" width="0.0543%" height="15" fill="rgb(225,20,46)" fg:x="940" fg:w="31"/><text x="1.8951%" y="175.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (63 samples, 0.11%)</title><rect x="1.6398%" y="181" width="0.1103%" height="15" fill="rgb(210,31,41)" fg:x="937" fg:w="63"/><text x="1.8898%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (12 samples, 0.02%)</title><rect x="1.7658%" y="181" width="0.0210%" height="15" fill="rgb(221,200,47)" fg:x="1009" fg:w="12"/><text x="2.0158%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (15 samples, 0.03%)</title><rect x="1.8131%" y="181" width="0.0263%" height="15" fill="rgb(226,26,5)" fg:x="1036" fg:w="15"/><text x="2.0631%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (123 samples, 0.22%)</title><rect x="1.6328%" y="197" width="0.2153%" height="15" fill="rgb(249,33,26)" fg:x="933" fg:w="123"/><text x="1.8828%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (7 samples, 0.01%)</title><rect x="1.9828%" y="117" width="0.0123%" height="15" fill="rgb(235,183,28)" fg:x="1133" fg:w="7"/><text x="2.2328%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (24 samples, 0.04%)</title><rect x="1.9636%" y="133" width="0.0420%" height="15" fill="rgb(221,5,38)" fg:x="1122" fg:w="24"/><text x="2.2136%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_if_limit (15 samples, 0.03%)</title><rect x="2.0056%" y="133" width="0.0263%" height="15" fill="rgb(247,18,42)" fg:x="1146" fg:w="15"/><text x="2.2556%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (59 samples, 0.10%)</title><rect x="1.9356%" y="149" width="0.1033%" height="15" fill="rgb(241,131,45)" fg:x="1106" fg:w="59"/><text x="2.1856%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_if_limit (20 samples, 0.04%)</title><rect x="2.0388%" y="149" width="0.0350%" height="15" fill="rgb(249,31,29)" fg:x="1165" fg:w="20"/><text x="2.2888%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (96 samples, 0.17%)</title><rect x="1.9146%" y="165" width="0.1680%" height="15" fill="rgb(225,111,53)" fg:x="1094" fg:w="96"/><text x="2.1646%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_if_limit (13 samples, 0.02%)</title><rect x="2.0826%" y="165" width="0.0228%" height="15" fill="rgb(238,160,17)" fg:x="1190" fg:w="13"/><text x="2.3326%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (130 samples, 0.23%)</title><rect x="1.8883%" y="181" width="0.2275%" height="15" fill="rgb(214,148,48)" fg:x="1079" fg:w="130"/><text x="2.1383%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::test (155 samples, 0.27%)</title><rect x="1.8481%" y="197" width="0.2713%" height="15" fill="rgb(232,36,49)" fg:x="1056" fg:w="155"/><text x="2.0981%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;bloom::hashing::HashIter as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.04%)</title><rect x="44.1539%" y="165" width="0.0350%" height="15" fill="rgb(209,103,24)" fg:x="25230" fg:w="20"/><text x="44.4039%" y="175.50"></text></g><g><title>dateo_fun_remover`core::hash::Hasher::write_u64 (90 samples, 0.16%)</title><rect x="44.4829%" y="149" width="0.1575%" height="15" fill="rgb(229,88,8)" fg:x="25418" fg:w="90"/><text x="44.7329%" y="159.50"></text></g><g><title>dateo_fun_remover`bloom::hashing::HashIter::from (287 samples, 0.50%)</title><rect x="44.1889%" y="165" width="0.5023%" height="15" fill="rgb(213,181,19)" fg:x="25250" fg:w="287"/><text x="44.4389%" y="175.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (29 samples, 0.05%)</title><rect x="44.6405%" y="149" width="0.0508%" height="15" fill="rgb(254,191,54)" fg:x="25508" fg:w="29"/><text x="44.8905%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;bloom::bloom::BloomFilter&lt;R,S&gt; as bloom::ASMS&gt;::insert (555 samples, 0.97%)</title><rect x="43.7287%" y="181" width="0.9713%" height="15" fill="rgb(241,83,37)" fg:x="24987" fg:w="555"/><text x="43.9787%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;bloom::hashing::HashIter as core::iter::traits::iterator::Iterator&gt;::next (656 samples, 1.15%)</title><rect x="44.7000%" y="181" width="1.1480%" height="15" fill="rgb(233,36,39)" fg:x="25542" fg:w="656"/><text x="44.9500%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7a6 (7 samples, 0.01%)</title><rect x="45.8532%" y="117" width="0.0123%" height="15" fill="rgb(226,3,54)" fg:x="26201" fg:w="7"/><text x="46.1032%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="45.8532%" y="101" width="0.0123%" height="15" fill="rgb(245,192,40)" fg:x="26201" fg:w="7"/><text x="46.1032%" y="111.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (12 samples, 0.02%)</title><rect x="45.8480%" y="181" width="0.0210%" height="15" fill="rgb(238,167,29)" fg:x="26198" fg:w="12"/><text x="46.0980%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (11 samples, 0.02%)</title><rect x="45.8497%" y="165" width="0.0193%" height="15" fill="rgb(232,182,51)" fg:x="26199" fg:w="11"/><text x="46.0997%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (11 samples, 0.02%)</title><rect x="45.8497%" y="149" width="0.0193%" height="15" fill="rgb(231,60,39)" fg:x="26199" fg:w="11"/><text x="46.0997%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (11 samples, 0.02%)</title><rect x="45.8497%" y="133" width="0.0193%" height="15" fill="rgb(208,69,12)" fg:x="26199" fg:w="11"/><text x="46.0997%" y="143.50"></text></g><g><title>dateo_fun_remover`core::hash::Hasher::write_u64 (2,808 samples, 4.91%)</title><rect x="55.5486%" y="165" width="4.9142%" height="15" fill="rgb(235,93,37)" fg:x="31741" fg:w="2808"/><text x="55.7986%" y="175.50">dateo_..</text></g><g><title>dateo_fun_remover`bloom::hashing::HashIter::from (9,426 samples, 16.50%)</title><rect x="45.8690%" y="181" width="16.4960%" height="15" fill="rgb(213,116,39)" fg:x="26210" fg:w="9426"/><text x="46.1190%" y="191.50">dateo_fun_remover`bloom::..</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (1,087 samples, 1.90%)</title><rect x="60.4627%" y="165" width="1.9023%" height="15" fill="rgb(222,207,29)" fg:x="34549" fg:w="1087"/><text x="60.7127%" y="175.50">d..</text></g><g><title>dateo_fun_remover`core::hash::Hasher::write_u64 (110 samples, 0.19%)</title><rect x="62.3650%" y="181" width="0.1925%" height="15" fill="rgb(206,96,30)" fg:x="35636" fg:w="110"/><text x="62.6150%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (942 samples, 1.65%)</title><rect x="62.5575%" y="181" width="1.6486%" height="15" fill="rgb(218,138,4)" fg:x="35746" fg:w="942"/><text x="62.8075%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (33 samples, 0.06%)</title><rect x="64.4546%" y="165" width="0.0578%" height="15" fill="rgb(250,191,14)" fg:x="36830" fg:w="33"/><text x="64.7046%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (6 samples, 0.01%)</title><rect x="64.5123%" y="165" width="0.0105%" height="15" fill="rgb(239,60,40)" fg:x="36863" fg:w="6"/><text x="64.7623%" y="175.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (9 samples, 0.02%)</title><rect x="64.5228%" y="165" width="0.0158%" height="15" fill="rgb(206,27,48)" fg:x="36869" fg:w="9"/><text x="64.7728%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (198 samples, 0.35%)</title><rect x="64.2061%" y="181" width="0.3465%" height="15" fill="rgb(225,35,8)" fg:x="36688" fg:w="198"/><text x="64.4561%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (7 samples, 0.01%)</title><rect x="64.5403%" y="165" width="0.0123%" height="15" fill="rgb(250,213,24)" fg:x="36879" fg:w="7"/><text x="64.7903%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="64.5403%" y="149" width="0.0123%" height="15" fill="rgb(247,123,22)" fg:x="36879" fg:w="7"/><text x="64.7903%" y="159.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (30 samples, 0.05%)</title><rect x="64.5526%" y="181" width="0.0525%" height="15" fill="rgb(231,138,38)" fg:x="36886" fg:w="30"/><text x="64.8026%" y="191.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (211 samples, 0.37%)</title><rect x="64.6051%" y="181" width="0.3693%" height="15" fill="rgb(231,145,46)" fg:x="36916" fg:w="211"/><text x="64.8551%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (7 samples, 0.01%)</title><rect x="64.9761%" y="165" width="0.0123%" height="15" fill="rgb(251,118,11)" fg:x="37128" fg:w="7"/><text x="65.2261%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects (35,925 samples, 62.87%)</title><rect x="2.1228%" y="197" width="62.8708%" height="15" fill="rgb(217,147,25)" fg:x="1213" fg:w="35925"/><text x="2.3728%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects</text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (10 samples, 0.02%)</title><rect x="64.9761%" y="181" width="0.0175%" height="15" fill="rgb(247,81,37)" fg:x="37128" fg:w="10"/><text x="65.2261%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (11 samples, 0.02%)</title><rect x="65.0129%" y="165" width="0.0193%" height="15" fill="rgb(209,12,38)" fg:x="37149" fg:w="11"/><text x="65.2629%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (30 samples, 0.05%)</title><rect x="65.0041%" y="181" width="0.0525%" height="15" fill="rgb(227,1,9)" fg:x="37144" fg:w="30"/><text x="65.2541%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (16 samples, 0.03%)</title><rect x="65.0671%" y="165" width="0.0280%" height="15" fill="rgb(248,47,43)" fg:x="37180" fg:w="16"/><text x="65.3171%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (25 samples, 0.04%)</title><rect x="65.1004%" y="165" width="0.0438%" height="15" fill="rgb(221,10,30)" fg:x="37199" fg:w="25"/><text x="65.3504%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.02%)</title><rect x="65.1284%" y="149" width="0.0158%" height="15" fill="rgb(210,229,1)" fg:x="37215" fg:w="9"/><text x="65.3784%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (52 samples, 0.09%)</title><rect x="65.0566%" y="181" width="0.0910%" height="15" fill="rgb(222,148,37)" fg:x="37174" fg:w="52"/><text x="65.3066%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.02%)</title><rect x="65.1616%" y="165" width="0.0158%" height="15" fill="rgb(234,67,33)" fg:x="37234" fg:w="9"/><text x="65.4116%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (18 samples, 0.03%)</title><rect x="65.1476%" y="181" width="0.0315%" height="15" fill="rgb(247,98,35)" fg:x="37226" fg:w="18"/><text x="65.3976%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (109 samples, 0.19%)</title><rect x="64.9936%" y="197" width="0.1908%" height="15" fill="rgb(247,138,52)" fg:x="37138" fg:w="109"/><text x="65.2436%" y="207.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (20 samples, 0.04%)</title><rect x="65.2701%" y="165" width="0.0350%" height="15" fill="rgb(213,79,30)" fg:x="37296" fg:w="20"/><text x="65.5201%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::fill_map_rec (71 samples, 0.12%)</title><rect x="65.1844%" y="197" width="0.1243%" height="15" fill="rgb(246,177,23)" fg:x="37247" fg:w="71"/><text x="65.4344%" y="207.50"></text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (36 samples, 0.06%)</title><rect x="65.2456%" y="181" width="0.0630%" height="15" fill="rgb(230,62,27)" fg:x="37282" fg:w="36"/><text x="65.4956%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (6 samples, 0.01%)</title><rect x="65.3454%" y="165" width="0.0105%" height="15" fill="rgb(216,154,8)" fg:x="37339" fg:w="6"/><text x="65.5954%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (22 samples, 0.04%)</title><rect x="65.3279%" y="181" width="0.0385%" height="15" fill="rgb(244,35,45)" fg:x="37329" fg:w="22"/><text x="65.5779%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::reverse (8 samples, 0.01%)</title><rect x="65.3716%" y="181" width="0.0140%" height="15" fill="rgb(251,115,12)" fg:x="37354" fg:w="8"/><text x="65.6216%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (26 samples, 0.05%)</title><rect x="65.4084%" y="165" width="0.0455%" height="15" fill="rgb(240,54,50)" fg:x="37375" fg:w="26"/><text x="65.6584%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (32 samples, 0.06%)</title><rect x="65.4819%" y="133" width="0.0560%" height="15" fill="rgb(233,84,52)" fg:x="37417" fg:w="32"/><text x="65.7319%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (8 samples, 0.01%)</title><rect x="65.5449%" y="133" width="0.0140%" height="15" fill="rgb(207,117,47)" fg:x="37453" fg:w="8"/><text x="65.7949%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (67 samples, 0.12%)</title><rect x="65.4749%" y="149" width="0.1173%" height="15" fill="rgb(249,43,39)" fg:x="37413" fg:w="67"/><text x="65.7249%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (78 samples, 0.14%)</title><rect x="65.4696%" y="165" width="0.1365%" height="15" fill="rgb(209,38,44)" fg:x="37410" fg:w="78"/><text x="65.7196%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (127 samples, 0.22%)</title><rect x="65.3874%" y="181" width="0.2223%" height="15" fill="rgb(236,212,23)" fg:x="37363" fg:w="127"/><text x="65.6374%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (173 samples, 0.30%)</title><rect x="65.3086%" y="197" width="0.3028%" height="15" fill="rgb(242,79,21)" fg:x="37318" fg:w="173"/><text x="65.5586%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (43 samples, 0.08%)</title><rect x="67.4752%" y="181" width="0.0753%" height="15" fill="rgb(211,96,35)" fg:x="38556" fg:w="43"/><text x="67.7252%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,057 samples, 3.60%)</title><rect x="67.5504%" y="181" width="3.5999%" height="15" fill="rgb(253,215,40)" fg:x="38599" fg:w="2057"/><text x="67.8004%" y="191.50">date..</text></g><g><title>dateo_fun_remover`DYLD-STUB$$memcpy (6 samples, 0.01%)</title><rect x="71.1503%" y="181" width="0.0105%" height="15" fill="rgb(211,81,21)" fg:x="40656" fg:w="6"/><text x="71.4003%" y="191.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (26 samples, 0.05%)</title><rect x="71.1608%" y="181" width="0.0455%" height="15" fill="rgb(208,190,38)" fg:x="40662" fg:w="26"/><text x="71.4108%" y="191.50"></text></g><g><title>dateo_fun_remover`__rust_dealloc (10 samples, 0.02%)</title><rect x="71.2063%" y="181" width="0.0175%" height="15" fill="rgb(235,213,38)" fg:x="40688" fg:w="10"/><text x="71.4563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d794 (9 samples, 0.02%)</title><rect x="71.2273%" y="117" width="0.0158%" height="15" fill="rgb(237,122,38)" fg:x="40700" fg:w="9"/><text x="71.4773%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (9 samples, 0.02%)</title><rect x="71.2273%" y="101" width="0.0158%" height="15" fill="rgb(244,218,35)" fg:x="40700" fg:w="9"/><text x="71.4773%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (9 samples, 0.02%)</title><rect x="71.2273%" y="85" width="0.0158%" height="15" fill="rgb(240,68,47)" fg:x="40700" fg:w="9"/><text x="71.4773%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (74 samples, 0.13%)</title><rect x="71.2238%" y="181" width="0.1295%" height="15" fill="rgb(210,16,53)" fg:x="40698" fg:w="74"/><text x="71.4738%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (74 samples, 0.13%)</title><rect x="71.2238%" y="165" width="0.1295%" height="15" fill="rgb(235,124,12)" fg:x="40698" fg:w="74"/><text x="71.4738%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (74 samples, 0.13%)</title><rect x="71.2238%" y="149" width="0.1295%" height="15" fill="rgb(224,169,11)" fg:x="40698" fg:w="74"/><text x="71.4738%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (74 samples, 0.13%)</title><rect x="71.2238%" y="133" width="0.1295%" height="15" fill="rgb(250,166,2)" fg:x="40698" fg:w="74"/><text x="71.4738%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7b3 (59 samples, 0.10%)</title><rect x="71.2501%" y="117" width="0.1033%" height="15" fill="rgb(242,216,29)" fg:x="40713" fg:w="59"/><text x="71.5001%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (59 samples, 0.10%)</title><rect x="71.2501%" y="101" width="0.1033%" height="15" fill="rgb(230,116,27)" fg:x="40713" fg:w="59"/><text x="71.5001%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (59 samples, 0.10%)</title><rect x="71.2501%" y="85" width="0.1033%" height="15" fill="rgb(228,99,48)" fg:x="40713" fg:w="59"/><text x="71.5001%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (59 samples, 0.10%)</title><rect x="71.2501%" y="69" width="0.1033%" height="15" fill="rgb(253,11,6)" fg:x="40713" fg:w="59"/><text x="71.5001%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (59 samples, 0.10%)</title><rect x="71.2501%" y="53" width="0.1033%" height="15" fill="rgb(247,143,39)" fg:x="40713" fg:w="59"/><text x="71.5001%" y="63.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (6 samples, 0.01%)</title><rect x="71.3568%" y="165" width="0.0105%" height="15" fill="rgb(236,97,10)" fg:x="40774" fg:w="6"/><text x="71.6068%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 0.01%)</title><rect x="71.3673%" y="165" width="0.0123%" height="15" fill="rgb(233,208,19)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (7 samples, 0.01%)</title><rect x="71.3673%" y="149" width="0.0123%" height="15" fill="rgb(216,164,2)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (7 samples, 0.01%)</title><rect x="71.3673%" y="133" width="0.0123%" height="15" fill="rgb(220,129,5)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (7 samples, 0.01%)</title><rect x="71.3673%" y="117" width="0.0123%" height="15" fill="rgb(242,17,10)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7a6 (7 samples, 0.01%)</title><rect x="71.3673%" y="101" width="0.0123%" height="15" fill="rgb(242,107,0)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="71.3673%" y="85" width="0.0123%" height="15" fill="rgb(251,28,31)" fg:x="40780" fg:w="7"/><text x="71.6173%" y="95.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="71.3848%" y="133" width="0.0105%" height="15" fill="rgb(233,223,10)" fg:x="40790" fg:w="6"/><text x="71.6348%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (16 samples, 0.03%)</title><rect x="71.3813%" y="149" width="0.0280%" height="15" fill="rgb(215,21,27)" fg:x="40788" fg:w="16"/><text x="71.6313%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (24 samples, 0.04%)</title><rect x="71.3796%" y="165" width="0.0420%" height="15" fill="rgb(232,23,21)" fg:x="40787" fg:w="24"/><text x="71.6296%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 0.01%)</title><rect x="71.4286%" y="117" width="0.0123%" height="15" fill="rgb(244,5,23)" fg:x="40815" fg:w="7"/><text x="71.6786%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (8 samples, 0.01%)</title><rect x="71.4286%" y="149" width="0.0140%" height="15" fill="rgb(226,81,46)" fg:x="40815" fg:w="8"/><text x="71.6786%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.01%)</title><rect x="71.4286%" y="133" width="0.0140%" height="15" fill="rgb(247,70,30)" fg:x="40815" fg:w="8"/><text x="71.6786%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_node (14 samples, 0.02%)</title><rect x="71.4216%" y="165" width="0.0245%" height="15" fill="rgb(212,68,19)" fg:x="40811" fg:w="14"/><text x="71.6716%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (52 samples, 0.09%)</title><rect x="71.3568%" y="181" width="0.0910%" height="15" fill="rgb(240,187,13)" fg:x="40774" fg:w="52"/><text x="71.6068%" y="191.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (31 samples, 0.05%)</title><rect x="76.4932%" y="133" width="0.0543%" height="15" fill="rgb(223,113,26)" fg:x="43709" fg:w="31"/><text x="76.7432%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (765 samples, 1.34%)</title><rect x="76.5475%" y="133" width="1.3388%" height="15" fill="rgb(206,192,2)" fg:x="43740" fg:w="765"/><text x="76.7975%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (49 samples, 0.09%)</title><rect x="77.8863%" y="133" width="0.0858%" height="15" fill="rgb(241,108,4)" fg:x="44505" fg:w="49"/><text x="78.1363%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,823 samples, 3.19%)</title><rect x="74.9322%" y="149" width="3.1904%" height="15" fill="rgb(247,173,49)" fg:x="42817" fg:w="1823"/><text x="75.1822%" y="159.50">dat..</text></g><g><title>libsystem_m.dylib`trunc (86 samples, 0.15%)</title><rect x="77.9720%" y="133" width="0.1505%" height="15" fill="rgb(224,114,35)" fg:x="44554" fg:w="86"/><text x="78.2220%" y="143.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (9 samples, 0.02%)</title><rect x="78.1225%" y="149" width="0.0158%" height="15" fill="rgb(245,159,27)" fg:x="44640" fg:w="9"/><text x="78.3725%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (479 samples, 0.84%)</title><rect x="78.1400%" y="149" width="0.8383%" height="15" fill="rgb(245,172,44)" fg:x="44650" fg:w="479"/><text x="78.3900%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (49 samples, 0.09%)</title><rect x="78.9783%" y="149" width="0.0858%" height="15" fill="rgb(236,23,11)" fg:x="45129" fg:w="49"/><text x="79.2283%" y="159.50"></text></g><g><title>libsystem_m.dylib`trunc (21 samples, 0.04%)</title><rect x="79.0641%" y="149" width="0.0368%" height="15" fill="rgb(205,117,38)" fg:x="45178" fg:w="21"/><text x="79.3141%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (20 samples, 0.04%)</title><rect x="79.1008%" y="149" width="0.0350%" height="15" fill="rgb(237,72,25)" fg:x="45199" fg:w="20"/><text x="79.3508%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (8 samples, 0.01%)</title><rect x="79.1428%" y="149" width="0.0140%" height="15" fill="rgb(244,70,9)" fg:x="45223" fg:w="8"/><text x="79.3928%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (14 samples, 0.02%)</title><rect x="79.1568%" y="149" width="0.0245%" height="15" fill="rgb(217,125,39)" fg:x="45231" fg:w="14"/><text x="79.4068%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b2 (23 samples, 0.04%)</title><rect x="79.1831%" y="149" width="0.0403%" height="15" fill="rgb(235,36,10)" fg:x="45246" fg:w="23"/><text x="79.4331%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (11 samples, 0.02%)</title><rect x="79.2251%" y="149" width="0.0193%" height="15" fill="rgb(251,123,47)" fg:x="45270" fg:w="11"/><text x="79.4751%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (19 samples, 0.03%)</title><rect x="79.2496%" y="149" width="0.0333%" height="15" fill="rgb(221,13,13)" fg:x="45284" fg:w="19"/><text x="79.4996%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (52 samples, 0.09%)</title><rect x="79.2828%" y="149" width="0.0910%" height="15" fill="rgb(238,131,9)" fg:x="45303" fg:w="52"/><text x="79.5328%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (233 samples, 0.41%)</title><rect x="79.3738%" y="149" width="0.4078%" height="15" fill="rgb(211,50,8)" fg:x="45355" fg:w="233"/><text x="79.6238%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (19 samples, 0.03%)</title><rect x="79.7816%" y="149" width="0.0333%" height="15" fill="rgb(245,182,24)" fg:x="45588" fg:w="19"/><text x="80.0316%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093f8 (14 samples, 0.02%)</title><rect x="79.8148%" y="149" width="0.0245%" height="15" fill="rgb(242,14,37)" fg:x="45607" fg:w="14"/><text x="80.0648%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (92 samples, 0.16%)</title><rect x="79.8393%" y="149" width="0.1610%" height="15" fill="rgb(246,228,12)" fg:x="45621" fg:w="92"/><text x="80.0893%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (24 samples, 0.04%)</title><rect x="80.0004%" y="149" width="0.0420%" height="15" fill="rgb(213,55,15)" fg:x="45713" fg:w="24"/><text x="80.2504%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (16 samples, 0.03%)</title><rect x="80.0424%" y="149" width="0.0280%" height="15" fill="rgb(209,9,3)" fg:x="45737" fg:w="16"/><text x="80.2924%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (45 samples, 0.08%)</title><rect x="80.0704%" y="149" width="0.0788%" height="15" fill="rgb(230,59,30)" fg:x="45753" fg:w="45"/><text x="80.3204%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (15 samples, 0.03%)</title><rect x="80.1491%" y="149" width="0.0263%" height="15" fill="rgb(209,121,21)" fg:x="45798" fg:w="15"/><text x="80.3991%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (16 samples, 0.03%)</title><rect x="80.1789%" y="149" width="0.0280%" height="15" fill="rgb(220,109,13)" fg:x="45815" fg:w="16"/><text x="80.4289%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (13 samples, 0.02%)</title><rect x="80.2104%" y="149" width="0.0228%" height="15" fill="rgb(232,18,1)" fg:x="45833" fg:w="13"/><text x="80.4604%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (20 samples, 0.04%)</title><rect x="80.2331%" y="149" width="0.0350%" height="15" fill="rgb(215,41,42)" fg:x="45846" fg:w="20"/><text x="80.4831%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (16 samples, 0.03%)</title><rect x="80.2681%" y="149" width="0.0280%" height="15" fill="rgb(224,123,36)" fg:x="45866" fg:w="16"/><text x="80.5181%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (23 samples, 0.04%)</title><rect x="80.2979%" y="149" width="0.0403%" height="15" fill="rgb(240,125,3)" fg:x="45883" fg:w="23"/><text x="80.5479%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (18 samples, 0.03%)</title><rect x="80.3381%" y="149" width="0.0315%" height="15" fill="rgb(205,98,50)" fg:x="45906" fg:w="18"/><text x="80.5881%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (13 samples, 0.02%)</title><rect x="80.3731%" y="149" width="0.0228%" height="15" fill="rgb(205,185,37)" fg:x="45926" fg:w="13"/><text x="80.6231%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (18 samples, 0.03%)</title><rect x="80.3976%" y="149" width="0.0315%" height="15" fill="rgb(238,207,15)" fg:x="45940" fg:w="18"/><text x="80.6476%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094c1 (8 samples, 0.01%)</title><rect x="80.4344%" y="149" width="0.0140%" height="15" fill="rgb(213,199,42)" fg:x="45961" fg:w="8"/><text x="80.6844%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (164 samples, 0.29%)</title><rect x="80.4501%" y="149" width="0.2870%" height="15" fill="rgb(235,201,11)" fg:x="45970" fg:w="164"/><text x="80.7001%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (10 samples, 0.02%)</title><rect x="80.7371%" y="149" width="0.0175%" height="15" fill="rgb(207,46,11)" fg:x="46134" fg:w="10"/><text x="80.9871%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (51 samples, 0.09%)</title><rect x="80.7669%" y="149" width="0.0893%" height="15" fill="rgb(241,35,35)" fg:x="46151" fg:w="51"/><text x="81.0169%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (9 samples, 0.02%)</title><rect x="80.8579%" y="149" width="0.0158%" height="15" fill="rgb(243,32,47)" fg:x="46203" fg:w="9"/><text x="81.1079%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (18 samples, 0.03%)</title><rect x="80.8736%" y="149" width="0.0315%" height="15" fill="rgb(247,202,23)" fg:x="46212" fg:w="18"/><text x="81.1236%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (9 samples, 0.02%)</title><rect x="80.9051%" y="149" width="0.0158%" height="15" fill="rgb(219,102,11)" fg:x="46230" fg:w="9"/><text x="81.1551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (160 samples, 0.28%)</title><rect x="80.9209%" y="149" width="0.2800%" height="15" fill="rgb(243,110,44)" fg:x="46239" fg:w="160"/><text x="81.1709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20955a (9 samples, 0.02%)</title><rect x="81.2061%" y="149" width="0.0158%" height="15" fill="rgb(222,74,54)" fg:x="46402" fg:w="9"/><text x="81.4561%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (19 samples, 0.03%)</title><rect x="81.2306%" y="149" width="0.0333%" height="15" fill="rgb(216,99,12)" fg:x="46416" fg:w="19"/><text x="81.4806%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (20 samples, 0.04%)</title><rect x="81.2656%" y="149" width="0.0350%" height="15" fill="rgb(226,22,26)" fg:x="46436" fg:w="20"/><text x="81.5156%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (12 samples, 0.02%)</title><rect x="81.3094%" y="149" width="0.0210%" height="15" fill="rgb(217,163,10)" fg:x="46461" fg:w="12"/><text x="81.5594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (9 samples, 0.02%)</title><rect x="81.3321%" y="149" width="0.0158%" height="15" fill="rgb(213,25,53)" fg:x="46474" fg:w="9"/><text x="81.5821%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,295 samples, 9.27%)</title><rect x="72.0831%" y="165" width="9.2666%" height="15" fill="rgb(252,105,26)" fg:x="41189" fg:w="5295"/><text x="72.3331%" y="175.50">dateo_fun_rem..</text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (17 samples, 0.03%)</title><rect x="81.3496%" y="165" width="0.0298%" height="15" fill="rgb(220,39,43)" fg:x="46484" fg:w="17"/><text x="81.5996%" y="175.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (26 samples, 0.05%)</title><rect x="81.3811%" y="165" width="0.0455%" height="15" fill="rgb(229,68,48)" fg:x="46502" fg:w="26"/><text x="81.6311%" y="175.50"></text></g><g><title>dateo_fun_remover`__rust_alloc (8 samples, 0.01%)</title><rect x="81.4266%" y="165" width="0.0140%" height="15" fill="rgb(252,8,32)" fg:x="46528" fg:w="8"/><text x="81.6766%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (15 samples, 0.03%)</title><rect x="81.4406%" y="165" width="0.0263%" height="15" fill="rgb(223,20,43)" fg:x="46536" fg:w="15"/><text x="81.6906%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (15 samples, 0.03%)</title><rect x="81.4406%" y="149" width="0.0263%" height="15" fill="rgb(229,81,49)" fg:x="46536" fg:w="15"/><text x="81.6906%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (10 samples, 0.02%)</title><rect x="81.4494%" y="133" width="0.0175%" height="15" fill="rgb(236,28,36)" fg:x="46541" fg:w="10"/><text x="81.6994%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (10 samples, 0.02%)</title><rect x="81.4494%" y="117" width="0.0175%" height="15" fill="rgb(249,185,26)" fg:x="46541" fg:w="10"/><text x="81.6994%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (62 samples, 0.11%)</title><rect x="81.4669%" y="165" width="0.1085%" height="15" fill="rgb(249,174,33)" fg:x="46551" fg:w="62"/><text x="81.7169%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (10 samples, 0.02%)</title><rect x="81.5754%" y="165" width="0.0175%" height="15" fill="rgb(233,201,37)" fg:x="46613" fg:w="10"/><text x="81.8254%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (20 samples, 0.04%)</title><rect x="81.5929%" y="165" width="0.0350%" height="15" fill="rgb(221,78,26)" fg:x="46623" fg:w="20"/><text x="81.8429%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (12 samples, 0.02%)</title><rect x="81.6384%" y="165" width="0.0210%" height="15" fill="rgb(250,127,30)" fg:x="46649" fg:w="12"/><text x="81.8884%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (8 samples, 0.01%)</title><rect x="81.6612%" y="165" width="0.0140%" height="15" fill="rgb(230,49,44)" fg:x="46662" fg:w="8"/><text x="81.9112%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (12 samples, 0.02%)</title><rect x="81.6752%" y="165" width="0.0210%" height="15" fill="rgb(229,67,23)" fg:x="46670" fg:w="12"/><text x="81.9252%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (15 samples, 0.03%)</title><rect x="81.6962%" y="165" width="0.0263%" height="15" fill="rgb(249,83,47)" fg:x="46682" fg:w="15"/><text x="81.9462%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (10 samples, 0.02%)</title><rect x="81.7242%" y="165" width="0.0175%" height="15" fill="rgb(215,43,3)" fg:x="46698" fg:w="10"/><text x="81.9742%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (16 samples, 0.03%)</title><rect x="81.7469%" y="165" width="0.0280%" height="15" fill="rgb(238,154,13)" fg:x="46711" fg:w="16"/><text x="81.9969%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (16 samples, 0.03%)</title><rect x="81.7749%" y="165" width="0.0280%" height="15" fill="rgb(219,56,2)" fg:x="46727" fg:w="16"/><text x="82.0249%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (8 samples, 0.01%)</title><rect x="81.8029%" y="165" width="0.0140%" height="15" fill="rgb(233,0,4)" fg:x="46743" fg:w="8"/><text x="82.0529%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (11 samples, 0.02%)</title><rect x="81.8187%" y="165" width="0.0193%" height="15" fill="rgb(235,30,7)" fg:x="46752" fg:w="11"/><text x="82.0687%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (12 samples, 0.02%)</title><rect x="81.8519%" y="165" width="0.0210%" height="15" fill="rgb(250,79,13)" fg:x="46771" fg:w="12"/><text x="82.1019%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (12 samples, 0.02%)</title><rect x="81.8747%" y="165" width="0.0210%" height="15" fill="rgb(211,146,34)" fg:x="46784" fg:w="12"/><text x="82.1247%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (8 samples, 0.01%)</title><rect x="81.9044%" y="165" width="0.0140%" height="15" fill="rgb(228,22,38)" fg:x="46801" fg:w="8"/><text x="82.1544%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (10 samples, 0.02%)</title><rect x="81.9202%" y="165" width="0.0175%" height="15" fill="rgb(235,168,5)" fg:x="46810" fg:w="10"/><text x="82.1702%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (9 samples, 0.02%)</title><rect x="81.9464%" y="165" width="0.0158%" height="15" fill="rgb(221,155,16)" fg:x="46825" fg:w="9"/><text x="82.1964%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (12 samples, 0.02%)</title><rect x="81.9639%" y="165" width="0.0210%" height="15" fill="rgb(215,215,53)" fg:x="46835" fg:w="12"/><text x="82.2139%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (301 samples, 0.53%)</title><rect x="81.9849%" y="165" width="0.5268%" height="15" fill="rgb(223,4,10)" fg:x="46847" fg:w="301"/><text x="82.2349%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (11 samples, 0.02%)</title><rect x="82.5169%" y="165" width="0.0193%" height="15" fill="rgb(234,103,6)" fg:x="47151" fg:w="11"/><text x="82.7669%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (11 samples, 0.02%)</title><rect x="82.5362%" y="165" width="0.0193%" height="15" fill="rgb(227,97,0)" fg:x="47162" fg:w="11"/><text x="82.7862%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f1 (17 samples, 0.03%)</title><rect x="82.5554%" y="165" width="0.0298%" height="15" fill="rgb(234,150,53)" fg:x="47173" fg:w="17"/><text x="82.8054%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (60 samples, 0.11%)</title><rect x="82.5869%" y="165" width="0.1050%" height="15" fill="rgb(228,201,54)" fg:x="47191" fg:w="60"/><text x="82.8369%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (60 samples, 0.11%)</title><rect x="82.5869%" y="149" width="0.1050%" height="15" fill="rgb(222,22,37)" fg:x="47191" fg:w="60"/><text x="82.8369%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (7 samples, 0.01%)</title><rect x="82.7007%" y="165" width="0.0123%" height="15" fill="rgb(237,53,32)" fg:x="47256" fg:w="7"/><text x="82.9507%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223920 (6 samples, 0.01%)</title><rect x="82.7199%" y="165" width="0.0105%" height="15" fill="rgb(233,25,53)" fg:x="47267" fg:w="6"/><text x="82.9699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223945 (9 samples, 0.02%)</title><rect x="82.7444%" y="165" width="0.0158%" height="15" fill="rgb(210,40,34)" fg:x="47281" fg:w="9"/><text x="82.9944%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (181 samples, 0.32%)</title><rect x="82.7969%" y="165" width="0.3168%" height="15" fill="rgb(241,220,44)" fg:x="47311" fg:w="181"/><text x="83.0469%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (11 samples, 0.02%)</title><rect x="83.1207%" y="165" width="0.0193%" height="15" fill="rgb(235,28,35)" fg:x="47496" fg:w="11"/><text x="83.3707%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (9 samples, 0.02%)</title><rect x="83.1400%" y="165" width="0.0158%" height="15" fill="rgb(210,56,17)" fg:x="47507" fg:w="9"/><text x="83.3900%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (211 samples, 0.37%)</title><rect x="83.1575%" y="165" width="0.3693%" height="15" fill="rgb(224,130,29)" fg:x="47517" fg:w="211"/><text x="83.4075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (8 samples, 0.01%)</title><rect x="83.5302%" y="165" width="0.0140%" height="15" fill="rgb(235,212,8)" fg:x="47730" fg:w="8"/><text x="83.7802%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (11 samples, 0.02%)</title><rect x="83.5442%" y="165" width="0.0193%" height="15" fill="rgb(223,33,50)" fg:x="47738" fg:w="11"/><text x="83.7942%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (22 samples, 0.04%)</title><rect x="83.5635%" y="165" width="0.0385%" height="15" fill="rgb(219,149,13)" fg:x="47749" fg:w="22"/><text x="83.8135%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (14 samples, 0.02%)</title><rect x="83.6055%" y="165" width="0.0245%" height="15" fill="rgb(250,156,29)" fg:x="47773" fg:w="14"/><text x="83.8555%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (22 samples, 0.04%)</title><rect x="83.6352%" y="165" width="0.0385%" height="15" fill="rgb(216,193,19)" fg:x="47790" fg:w="22"/><text x="83.8852%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (23 samples, 0.04%)</title><rect x="83.6755%" y="165" width="0.0403%" height="15" fill="rgb(216,135,14)" fg:x="47813" fg:w="23"/><text x="83.9255%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (14 samples, 0.02%)</title><rect x="83.7175%" y="165" width="0.0245%" height="15" fill="rgb(241,47,5)" fg:x="47837" fg:w="14"/><text x="83.9675%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1d (7 samples, 0.01%)</title><rect x="83.7420%" y="165" width="0.0123%" height="15" fill="rgb(233,42,35)" fg:x="47851" fg:w="7"/><text x="83.9920%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (21 samples, 0.04%)</title><rect x="83.7577%" y="165" width="0.0368%" height="15" fill="rgb(231,13,6)" fg:x="47860" fg:w="21"/><text x="84.0077%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (13 samples, 0.02%)</title><rect x="83.7962%" y="165" width="0.0228%" height="15" fill="rgb(207,181,40)" fg:x="47882" fg:w="13"/><text x="84.0462%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (8 samples, 0.01%)</title><rect x="83.8190%" y="165" width="0.0140%" height="15" fill="rgb(254,173,49)" fg:x="47895" fg:w="8"/><text x="84.0690%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (17 samples, 0.03%)</title><rect x="83.8330%" y="165" width="0.0298%" height="15" fill="rgb(221,1,38)" fg:x="47903" fg:w="17"/><text x="84.0830%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (7,185 samples, 12.57%)</title><rect x="71.4478%" y="181" width="12.5742%" height="15" fill="rgb(206,124,46)" fg:x="40826" fg:w="7185"/><text x="71.6978%" y="191.50">dateo_fun_remover`d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (91 samples, 0.16%)</title><rect x="83.8627%" y="165" width="0.1593%" height="15" fill="rgb(249,21,11)" fg:x="47920" fg:w="91"/><text x="84.1127%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,068 samples, 1.87%)</title><rect x="84.0657%" y="165" width="1.8691%" height="15" fill="rgb(222,201,40)" fg:x="48036" fg:w="1068"/><text x="84.3157%" y="175.50">d..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d671 (8 samples, 0.01%)</title><rect x="85.9348%" y="101" width="0.0140%" height="15" fill="rgb(235,61,29)" fg:x="49104" fg:w="8"/><text x="86.1848%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ddf (8 samples, 0.01%)</title><rect x="85.9348%" y="85" width="0.0140%" height="15" fill="rgb(219,207,3)" fg:x="49104" fg:w="8"/><text x="86.1848%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (8 samples, 0.01%)</title><rect x="85.9348%" y="69" width="0.0140%" height="15" fill="rgb(222,56,46)" fg:x="49104" fg:w="8"/><text x="86.1848%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (8 samples, 0.01%)</title><rect x="85.9348%" y="53" width="0.0140%" height="15" fill="rgb(239,76,54)" fg:x="49104" fg:w="8"/><text x="86.1848%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7a6 (9 samples, 0.02%)</title><rect x="85.9540%" y="101" width="0.0158%" height="15" fill="rgb(231,124,27)" fg:x="49115" fg:w="9"/><text x="86.2040%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (9 samples, 0.02%)</title><rect x="85.9540%" y="85" width="0.0158%" height="15" fill="rgb(249,195,6)" fg:x="49115" fg:w="9"/><text x="86.2040%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.06%)</title><rect x="85.9348%" y="165" width="0.0560%" height="15" fill="rgb(237,174,47)" fg:x="49104" fg:w="32"/><text x="86.1848%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (32 samples, 0.06%)</title><rect x="85.9348%" y="149" width="0.0560%" height="15" fill="rgb(206,201,31)" fg:x="49104" fg:w="32"/><text x="86.1848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (32 samples, 0.06%)</title><rect x="85.9348%" y="133" width="0.0560%" height="15" fill="rgb(231,57,52)" fg:x="49104" fg:w="32"/><text x="86.1848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (32 samples, 0.06%)</title><rect x="85.9348%" y="117" width="0.0560%" height="15" fill="rgb(248,177,22)" fg:x="49104" fg:w="32"/><text x="86.1848%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7b3 (12 samples, 0.02%)</title><rect x="85.9698%" y="101" width="0.0210%" height="15" fill="rgb(215,211,37)" fg:x="49124" fg:w="12"/><text x="86.2198%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (12 samples, 0.02%)</title><rect x="85.9698%" y="85" width="0.0210%" height="15" fill="rgb(241,128,51)" fg:x="49124" fg:w="12"/><text x="86.2198%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (11 samples, 0.02%)</title><rect x="85.9715%" y="69" width="0.0193%" height="15" fill="rgb(227,165,31)" fg:x="49125" fg:w="11"/><text x="86.2215%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (11 samples, 0.02%)</title><rect x="85.9715%" y="53" width="0.0193%" height="15" fill="rgb(228,167,24)" fg:x="49125" fg:w="11"/><text x="86.2215%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (11 samples, 0.02%)</title><rect x="85.9715%" y="37" width="0.0193%" height="15" fill="rgb(228,143,12)" fg:x="49125" fg:w="11"/><text x="86.2215%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (6 samples, 0.01%)</title><rect x="86.1255%" y="101" width="0.0105%" height="15" fill="rgb(249,149,8)" fg:x="49213" fg:w="6"/><text x="86.3755%" y="111.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (83 samples, 0.15%)</title><rect x="86.0328%" y="117" width="0.1453%" height="15" fill="rgb(243,35,44)" fg:x="49160" fg:w="83"/><text x="86.2828%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (10 samples, 0.02%)</title><rect x="86.1606%" y="101" width="0.0175%" height="15" fill="rgb(246,89,9)" fg:x="49233" fg:w="10"/><text x="86.4106%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (14 samples, 0.02%)</title><rect x="86.1851%" y="117" width="0.0245%" height="15" fill="rgb(233,213,13)" fg:x="49247" fg:w="14"/><text x="86.4351%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (18 samples, 0.03%)</title><rect x="86.2096%" y="117" width="0.0315%" height="15" fill="rgb(233,141,41)" fg:x="49261" fg:w="18"/><text x="86.4596%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (14 samples, 0.02%)</title><rect x="86.2533%" y="117" width="0.0245%" height="15" fill="rgb(239,167,4)" fg:x="49286" fg:w="14"/><text x="86.5033%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (6 samples, 0.01%)</title><rect x="86.2831%" y="117" width="0.0105%" height="15" fill="rgb(209,217,16)" fg:x="49303" fg:w="6"/><text x="86.5331%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (9 samples, 0.02%)</title><rect x="86.3058%" y="117" width="0.0158%" height="15" fill="rgb(219,88,35)" fg:x="49316" fg:w="9"/><text x="86.5558%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (182 samples, 0.32%)</title><rect x="86.0153%" y="133" width="0.3185%" height="15" fill="rgb(220,193,23)" fg:x="49150" fg:w="182"/><text x="86.2653%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (14 samples, 0.02%)</title><rect x="86.3443%" y="85" width="0.0245%" height="15" fill="rgb(230,90,52)" fg:x="49338" fg:w="14"/><text x="86.5943%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (21 samples, 0.04%)</title><rect x="86.3356%" y="133" width="0.0368%" height="15" fill="rgb(252,106,19)" fg:x="49333" fg:w="21"/><text x="86.5856%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (21 samples, 0.04%)</title><rect x="86.3356%" y="117" width="0.0368%" height="15" fill="rgb(206,74,20)" fg:x="49333" fg:w="21"/><text x="86.5856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (16 samples, 0.03%)</title><rect x="86.3443%" y="101" width="0.0280%" height="15" fill="rgb(230,138,44)" fg:x="49338" fg:w="16"/><text x="86.5943%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (228 samples, 0.40%)</title><rect x="85.9908%" y="165" width="0.3990%" height="15" fill="rgb(235,182,43)" fg:x="49136" fg:w="228"/><text x="86.2408%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (227 samples, 0.40%)</title><rect x="85.9925%" y="149" width="0.3973%" height="15" fill="rgb(242,16,51)" fg:x="49137" fg:w="227"/><text x="86.2425%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (15 samples, 0.03%)</title><rect x="86.6471%" y="133" width="0.0263%" height="15" fill="rgb(248,9,4)" fg:x="49511" fg:w="15"/><text x="86.8971%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (9 samples, 0.02%)</title><rect x="89.0009%" y="101" width="0.0158%" height="15" fill="rgb(210,31,22)" fg:x="50856" fg:w="9"/><text x="89.2509%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (8 samples, 0.01%)</title><rect x="89.0236%" y="101" width="0.0140%" height="15" fill="rgb(239,54,39)" fg:x="50869" fg:w="8"/><text x="89.2736%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (12 samples, 0.02%)</title><rect x="89.0429%" y="101" width="0.0210%" height="15" fill="rgb(230,99,41)" fg:x="50880" fg:w="12"/><text x="89.2929%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (6 samples, 0.01%)</title><rect x="89.0796%" y="101" width="0.0105%" height="15" fill="rgb(253,106,12)" fg:x="50901" fg:w="6"/><text x="89.3296%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (6 samples, 0.01%)</title><rect x="89.0919%" y="101" width="0.0105%" height="15" fill="rgb(213,46,41)" fg:x="50908" fg:w="6"/><text x="89.3419%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (32 samples, 0.06%)</title><rect x="89.1024%" y="101" width="0.0560%" height="15" fill="rgb(215,133,35)" fg:x="50914" fg:w="32"/><text x="89.3524%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (135 samples, 0.24%)</title><rect x="89.1584%" y="101" width="0.2363%" height="15" fill="rgb(213,28,5)" fg:x="50946" fg:w="135"/><text x="89.4084%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (9 samples, 0.02%)</title><rect x="89.3947%" y="101" width="0.0158%" height="15" fill="rgb(215,77,49)" fg:x="51081" fg:w="9"/><text x="89.6447%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (71 samples, 0.12%)</title><rect x="89.4122%" y="101" width="0.1243%" height="15" fill="rgb(248,100,22)" fg:x="51091" fg:w="71"/><text x="89.6622%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (12 samples, 0.02%)</title><rect x="89.5364%" y="101" width="0.0210%" height="15" fill="rgb(208,67,9)" fg:x="51162" fg:w="12"/><text x="89.7864%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (9 samples, 0.02%)</title><rect x="89.5574%" y="101" width="0.0158%" height="15" fill="rgb(219,133,21)" fg:x="51174" fg:w="9"/><text x="89.8074%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (25 samples, 0.04%)</title><rect x="89.5749%" y="101" width="0.0438%" height="15" fill="rgb(246,46,29)" fg:x="51184" fg:w="25"/><text x="89.8249%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (8 samples, 0.01%)</title><rect x="89.6187%" y="101" width="0.0140%" height="15" fill="rgb(246,185,52)" fg:x="51209" fg:w="8"/><text x="89.8687%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (8 samples, 0.01%)</title><rect x="89.6327%" y="101" width="0.0140%" height="15" fill="rgb(252,136,11)" fg:x="51217" fg:w="8"/><text x="89.8827%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (6 samples, 0.01%)</title><rect x="89.6467%" y="101" width="0.0105%" height="15" fill="rgb(219,138,53)" fg:x="51225" fg:w="6"/><text x="89.8967%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (10 samples, 0.02%)</title><rect x="89.6659%" y="101" width="0.0175%" height="15" fill="rgb(211,51,23)" fg:x="51236" fg:w="10"/><text x="89.9159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (12 samples, 0.02%)</title><rect x="89.6834%" y="101" width="0.0210%" height="15" fill="rgb(247,221,28)" fg:x="51246" fg:w="12"/><text x="89.9334%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (10 samples, 0.02%)</title><rect x="89.7044%" y="101" width="0.0175%" height="15" fill="rgb(251,222,45)" fg:x="51258" fg:w="10"/><text x="89.9544%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (10 samples, 0.02%)</title><rect x="89.7219%" y="101" width="0.0175%" height="15" fill="rgb(217,162,53)" fg:x="51268" fg:w="10"/><text x="89.9719%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (9 samples, 0.02%)</title><rect x="89.7394%" y="101" width="0.0158%" height="15" fill="rgb(229,93,14)" fg:x="51278" fg:w="9"/><text x="89.9894%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (43 samples, 0.08%)</title><rect x="89.7604%" y="101" width="0.0753%" height="15" fill="rgb(209,67,49)" fg:x="51290" fg:w="43"/><text x="90.0104%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (6 samples, 0.01%)</title><rect x="89.8357%" y="101" width="0.0105%" height="15" fill="rgb(213,87,29)" fg:x="51333" fg:w="6"/><text x="90.0857%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e3 (6 samples, 0.01%)</title><rect x="89.8462%" y="101" width="0.0105%" height="15" fill="rgb(205,151,52)" fg:x="51339" fg:w="6"/><text x="90.0962%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (12 samples, 0.02%)</title><rect x="89.8567%" y="101" width="0.0210%" height="15" fill="rgb(253,215,39)" fg:x="51345" fg:w="12"/><text x="90.1067%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (57 samples, 0.10%)</title><rect x="89.8794%" y="101" width="0.0998%" height="15" fill="rgb(221,220,41)" fg:x="51358" fg:w="57"/><text x="90.1294%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (6 samples, 0.01%)</title><rect x="89.9792%" y="101" width="0.0105%" height="15" fill="rgb(218,133,21)" fg:x="51415" fg:w="6"/><text x="90.2292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (6 samples, 0.01%)</title><rect x="89.9897%" y="101" width="0.0105%" height="15" fill="rgb(221,193,43)" fg:x="51421" fg:w="6"/><text x="90.2397%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (9 samples, 0.02%)</title><rect x="90.0002%" y="101" width="0.0158%" height="15" fill="rgb(240,128,52)" fg:x="51427" fg:w="9"/><text x="90.2502%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (123 samples, 0.22%)</title><rect x="90.0159%" y="101" width="0.2153%" height="15" fill="rgb(253,114,12)" fg:x="51436" fg:w="123"/><text x="90.2659%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (11 samples, 0.02%)</title><rect x="90.2469%" y="101" width="0.0193%" height="15" fill="rgb(215,223,47)" fg:x="51568" fg:w="11"/><text x="90.4969%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (11 samples, 0.02%)</title><rect x="90.2714%" y="101" width="0.0193%" height="15" fill="rgb(248,225,23)" fg:x="51582" fg:w="11"/><text x="90.5214%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (6 samples, 0.01%)</title><rect x="90.2959%" y="101" width="0.0105%" height="15" fill="rgb(250,108,0)" fg:x="51596" fg:w="6"/><text x="90.5459%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (9 samples, 0.02%)</title><rect x="90.3064%" y="101" width="0.0158%" height="15" fill="rgb(228,208,7)" fg:x="51602" fg:w="9"/><text x="90.5564%" y="111.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,561 samples, 2.73%)</title><rect x="87.5991%" y="117" width="2.7318%" height="15" fill="rgb(244,45,10)" fg:x="50055" fg:w="1561"/><text x="87.8491%" y="127.50">da..</text></g><g><title>dateo_fun_remover`__rdl_alloc (15 samples, 0.03%)</title><rect x="90.3309%" y="117" width="0.0263%" height="15" fill="rgb(207,125,25)" fg:x="51616" fg:w="15"/><text x="90.5809%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (12 samples, 0.02%)</title><rect x="90.3572%" y="117" width="0.0210%" height="15" fill="rgb(210,195,18)" fg:x="51631" fg:w="12"/><text x="90.6072%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (6 samples, 0.01%)</title><rect x="90.3869%" y="117" width="0.0105%" height="15" fill="rgb(249,80,12)" fg:x="51648" fg:w="6"/><text x="90.6369%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (7 samples, 0.01%)</title><rect x="90.3974%" y="117" width="0.0123%" height="15" fill="rgb(221,65,9)" fg:x="51654" fg:w="7"/><text x="90.6474%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (14 samples, 0.02%)</title><rect x="90.4097%" y="117" width="0.0245%" height="15" fill="rgb(235,49,36)" fg:x="51661" fg:w="14"/><text x="90.6597%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (6 samples, 0.01%)</title><rect x="90.4359%" y="117" width="0.0105%" height="15" fill="rgb(225,32,20)" fg:x="51676" fg:w="6"/><text x="90.6859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (11 samples, 0.02%)</title><rect x="90.4587%" y="117" width="0.0193%" height="15" fill="rgb(215,141,46)" fg:x="51689" fg:w="11"/><text x="90.7087%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (10 samples, 0.02%)</title><rect x="90.4814%" y="117" width="0.0175%" height="15" fill="rgb(250,160,47)" fg:x="51702" fg:w="10"/><text x="90.7314%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (9 samples, 0.02%)</title><rect x="90.4989%" y="117" width="0.0158%" height="15" fill="rgb(216,222,40)" fg:x="51712" fg:w="9"/><text x="90.7489%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (7 samples, 0.01%)</title><rect x="90.5182%" y="117" width="0.0123%" height="15" fill="rgb(234,217,39)" fg:x="51723" fg:w="7"/><text x="90.7682%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (6 samples, 0.01%)</title><rect x="90.5322%" y="117" width="0.0105%" height="15" fill="rgb(207,178,40)" fg:x="51731" fg:w="6"/><text x="90.7822%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (13 samples, 0.02%)</title><rect x="90.5444%" y="117" width="0.0228%" height="15" fill="rgb(221,136,13)" fg:x="51738" fg:w="13"/><text x="90.7944%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (12 samples, 0.02%)</title><rect x="90.5724%" y="117" width="0.0210%" height="15" fill="rgb(249,199,10)" fg:x="51754" fg:w="12"/><text x="90.8224%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (12 samples, 0.02%)</title><rect x="90.5969%" y="117" width="0.0210%" height="15" fill="rgb(249,222,13)" fg:x="51768" fg:w="12"/><text x="90.8469%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (9 samples, 0.02%)</title><rect x="90.6232%" y="117" width="0.0158%" height="15" fill="rgb(244,185,38)" fg:x="51783" fg:w="9"/><text x="90.8732%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (9 samples, 0.02%)</title><rect x="90.6389%" y="117" width="0.0158%" height="15" fill="rgb(236,202,9)" fg:x="51792" fg:w="9"/><text x="90.8889%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (10 samples, 0.02%)</title><rect x="90.6564%" y="117" width="0.0175%" height="15" fill="rgb(250,229,37)" fg:x="51802" fg:w="10"/><text x="90.9064%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (184 samples, 0.32%)</title><rect x="90.6739%" y="117" width="0.3220%" height="15" fill="rgb(206,174,23)" fg:x="51812" fg:w="184"/><text x="90.9239%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238c2 (6 samples, 0.01%)</title><rect x="90.9960%" y="117" width="0.0105%" height="15" fill="rgb(211,33,43)" fg:x="51996" fg:w="6"/><text x="91.2460%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (7 samples, 0.01%)</title><rect x="91.0135%" y="117" width="0.0123%" height="15" fill="rgb(245,58,50)" fg:x="52006" fg:w="7"/><text x="91.2635%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (8 samples, 0.01%)</title><rect x="91.0327%" y="117" width="0.0140%" height="15" fill="rgb(244,68,36)" fg:x="52017" fg:w="8"/><text x="91.2827%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (103 samples, 0.18%)</title><rect x="91.0590%" y="117" width="0.1803%" height="15" fill="rgb(232,229,15)" fg:x="52032" fg:w="103"/><text x="91.3090%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (91 samples, 0.16%)</title><rect x="91.0800%" y="101" width="0.1593%" height="15" fill="rgb(254,30,23)" fg:x="52044" fg:w="91"/><text x="91.3300%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (7 samples, 0.01%)</title><rect x="91.2410%" y="117" width="0.0123%" height="15" fill="rgb(235,160,14)" fg:x="52136" fg:w="7"/><text x="91.4910%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (8 samples, 0.01%)</title><rect x="91.2637%" y="117" width="0.0140%" height="15" fill="rgb(212,155,44)" fg:x="52149" fg:w="8"/><text x="91.5137%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223934 (12 samples, 0.02%)</title><rect x="91.2777%" y="117" width="0.0210%" height="15" fill="rgb(226,2,50)" fg:x="52157" fg:w="12"/><text x="91.5277%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223947 (11 samples, 0.02%)</title><rect x="91.2987%" y="117" width="0.0193%" height="15" fill="rgb(234,177,6)" fg:x="52169" fg:w="11"/><text x="91.5487%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395b (9 samples, 0.02%)</title><rect x="91.3180%" y="117" width="0.0158%" height="15" fill="rgb(217,24,9)" fg:x="52180" fg:w="9"/><text x="91.5680%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396c (7 samples, 0.01%)</title><rect x="91.3337%" y="117" width="0.0123%" height="15" fill="rgb(220,13,46)" fg:x="52189" fg:w="7"/><text x="91.5837%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (30 samples, 0.05%)</title><rect x="91.3530%" y="117" width="0.0525%" height="15" fill="rgb(239,221,27)" fg:x="52200" fg:w="30"/><text x="91.6030%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399b (9 samples, 0.02%)</title><rect x="91.4055%" y="117" width="0.0158%" height="15" fill="rgb(222,198,25)" fg:x="52230" fg:w="9"/><text x="91.6555%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (84 samples, 0.15%)</title><rect x="91.4212%" y="117" width="0.1470%" height="15" fill="rgb(211,99,13)" fg:x="52239" fg:w="84"/><text x="91.6712%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (9 samples, 0.02%)</title><rect x="91.5735%" y="117" width="0.0158%" height="15" fill="rgb(232,111,31)" fg:x="52326" fg:w="9"/><text x="91.8235%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (156 samples, 0.27%)</title><rect x="91.5945%" y="117" width="0.2730%" height="15" fill="rgb(245,82,37)" fg:x="52338" fg:w="156"/><text x="91.8445%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (10 samples, 0.02%)</title><rect x="91.8797%" y="117" width="0.0175%" height="15" fill="rgb(227,149,46)" fg:x="52501" fg:w="10"/><text x="92.1297%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (34 samples, 0.06%)</title><rect x="91.8990%" y="117" width="0.0595%" height="15" fill="rgb(218,36,50)" fg:x="52512" fg:w="34"/><text x="92.1490%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (9 samples, 0.02%)</title><rect x="91.9585%" y="117" width="0.0158%" height="15" fill="rgb(226,80,48)" fg:x="52546" fg:w="9"/><text x="92.2085%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (9 samples, 0.02%)</title><rect x="91.9742%" y="117" width="0.0158%" height="15" fill="rgb(238,224,15)" fg:x="52555" fg:w="9"/><text x="92.2242%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (11 samples, 0.02%)</title><rect x="91.9917%" y="117" width="0.0193%" height="15" fill="rgb(241,136,10)" fg:x="52565" fg:w="11"/><text x="92.2417%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (11 samples, 0.02%)</title><rect x="92.0110%" y="117" width="0.0193%" height="15" fill="rgb(208,32,45)" fg:x="52576" fg:w="11"/><text x="92.2610%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (6 samples, 0.01%)</title><rect x="92.0302%" y="117" width="0.0105%" height="15" fill="rgb(207,135,9)" fg:x="52587" fg:w="6"/><text x="92.2802%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (13 samples, 0.02%)</title><rect x="92.0442%" y="117" width="0.0228%" height="15" fill="rgb(206,86,44)" fg:x="52595" fg:w="13"/><text x="92.2942%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (7 samples, 0.01%)</title><rect x="92.0705%" y="117" width="0.0123%" height="15" fill="rgb(245,177,15)" fg:x="52610" fg:w="7"/><text x="92.3205%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.01%)</title><rect x="92.0827%" y="117" width="0.0105%" height="15" fill="rgb(206,64,50)" fg:x="52617" fg:w="6"/><text x="92.3327%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (3,107 samples, 5.44%)</title><rect x="86.6733%" y="133" width="5.4374%" height="15" fill="rgb(234,36,40)" fg:x="49526" fg:w="3107"/><text x="86.9233%" y="143.50">dateo_f..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="92.0932%" y="117" width="0.0175%" height="15" fill="rgb(213,64,8)" fg:x="52623" fg:w="10"/><text x="92.3432%" y="127.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (15 samples, 0.03%)</title><rect x="92.1160%" y="133" width="0.0263%" height="15" fill="rgb(210,75,36)" fg:x="52636" fg:w="15"/><text x="92.3660%" y="143.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (6 samples, 0.01%)</title><rect x="92.2385%" y="101" width="0.0105%" height="15" fill="rgb(229,88,21)" fg:x="52706" fg:w="6"/><text x="92.4885%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a004 (36 samples, 0.06%)</title><rect x="92.2875%" y="101" width="0.0630%" height="15" fill="rgb(252,204,47)" fg:x="52734" fg:w="36"/><text x="92.5375%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a1cb (55 samples, 0.10%)</title><rect x="92.4450%" y="69" width="0.0963%" height="15" fill="rgb(208,77,27)" fg:x="52824" fg:w="55"/><text x="92.6950%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (7 samples, 0.01%)</title><rect x="92.6043%" y="53" width="0.0123%" height="15" fill="rgb(221,76,26)" fg:x="52915" fg:w="7"/><text x="92.8543%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (21 samples, 0.04%)</title><rect x="92.6165%" y="53" width="0.0368%" height="15" fill="rgb(225,139,18)" fg:x="52922" fg:w="21"/><text x="92.8665%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (12 samples, 0.02%)</title><rect x="92.6603%" y="53" width="0.0210%" height="15" fill="rgb(230,137,11)" fg:x="52947" fg:w="12"/><text x="92.9103%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (6 samples, 0.01%)</title><rect x="92.6883%" y="53" width="0.0105%" height="15" fill="rgb(212,28,1)" fg:x="52963" fg:w="6"/><text x="92.9383%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (27 samples, 0.05%)</title><rect x="92.7495%" y="53" width="0.0473%" height="15" fill="rgb(248,164,17)" fg:x="52998" fg:w="27"/><text x="92.9995%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (7 samples, 0.01%)</title><rect x="92.8073%" y="53" width="0.0123%" height="15" fill="rgb(222,171,42)" fg:x="53031" fg:w="7"/><text x="93.0573%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (10 samples, 0.02%)</title><rect x="92.8265%" y="53" width="0.0175%" height="15" fill="rgb(243,84,45)" fg:x="53042" fg:w="10"/><text x="93.0765%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c852 (162 samples, 0.28%)</title><rect x="92.5815%" y="69" width="0.2835%" height="15" fill="rgb(252,49,23)" fg:x="52902" fg:w="162"/><text x="92.8315%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c86f (13 samples, 0.02%)</title><rect x="92.8703%" y="69" width="0.0228%" height="15" fill="rgb(215,19,7)" fg:x="53067" fg:w="13"/><text x="93.1203%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="92.8703%" y="53" width="0.0228%" height="15" fill="rgb(238,81,41)" fg:x="53067" fg:w="13"/><text x="93.1203%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (37 samples, 0.06%)</title><rect x="92.9403%" y="53" width="0.0648%" height="15" fill="rgb(210,199,37)" fg:x="53107" fg:w="37"/><text x="93.1903%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (17 samples, 0.03%)</title><rect x="93.0190%" y="53" width="0.0298%" height="15" fill="rgb(244,192,49)" fg:x="53152" fg:w="17"/><text x="93.2690%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (16 samples, 0.03%)</title><rect x="93.0208%" y="37" width="0.0280%" height="15" fill="rgb(226,211,11)" fg:x="53153" fg:w="16"/><text x="93.2708%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (7 samples, 0.01%)</title><rect x="93.0733%" y="53" width="0.0123%" height="15" fill="rgb(236,162,54)" fg:x="53183" fg:w="7"/><text x="93.3233%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (32 samples, 0.06%)</title><rect x="93.1065%" y="53" width="0.0560%" height="15" fill="rgb(220,229,9)" fg:x="53202" fg:w="32"/><text x="93.3565%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (164 samples, 0.29%)</title><rect x="92.8948%" y="69" width="0.2870%" height="15" fill="rgb(250,87,22)" fg:x="53081" fg:w="164"/><text x="93.1448%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (473 samples, 0.83%)</title><rect x="92.3943%" y="85" width="0.8278%" height="15" fill="rgb(239,43,17)" fg:x="52795" fg:w="473"/><text x="92.6443%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (497 samples, 0.87%)</title><rect x="92.3820%" y="101" width="0.8698%" height="15" fill="rgb(231,177,25)" fg:x="52788" fg:w="497"/><text x="92.6320%" y="111.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (610 samples, 1.07%)</title><rect x="92.2052%" y="117" width="1.0675%" height="15" fill="rgb(219,179,1)" fg:x="52687" fg:w="610"/><text x="92.4552%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (644 samples, 1.13%)</title><rect x="92.1492%" y="133" width="1.1270%" height="15" fill="rgb(238,219,53)" fg:x="52655" fg:w="644"/><text x="92.3992%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f20470 (151 samples, 0.26%)</title><rect x="93.2815%" y="133" width="0.2643%" height="15" fill="rgb(232,167,36)" fg:x="53302" fg:w="151"/><text x="93.5315%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (257 samples, 0.45%)</title><rect x="93.5458%" y="133" width="0.4498%" height="15" fill="rgb(244,19,51)" fg:x="53453" fg:w="257"/><text x="93.7958%" y="143.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$log (8 samples, 0.01%)</title><rect x="93.9956%" y="133" width="0.0140%" height="15" fill="rgb(224,6,22)" fg:x="53710" fg:w="8"/><text x="94.2456%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (15 samples, 0.03%)</title><rect x="94.0271%" y="133" width="0.0263%" height="15" fill="rgb(224,145,5)" fg:x="53728" fg:w="15"/><text x="94.2771%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (8 samples, 0.01%)</title><rect x="94.0866%" y="133" width="0.0140%" height="15" fill="rgb(234,130,49)" fg:x="53762" fg:w="8"/><text x="94.3366%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (10 samples, 0.02%)</title><rect x="94.1198%" y="133" width="0.0175%" height="15" fill="rgb(254,6,2)" fg:x="53781" fg:w="10"/><text x="94.3698%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (6 samples, 0.01%)</title><rect x="94.1443%" y="133" width="0.0105%" height="15" fill="rgb(208,96,46)" fg:x="53795" fg:w="6"/><text x="94.3943%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (14 samples, 0.02%)</title><rect x="94.1548%" y="133" width="0.0245%" height="15" fill="rgb(239,3,39)" fg:x="53801" fg:w="14"/><text x="94.4048%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (13 samples, 0.02%)</title><rect x="94.1811%" y="133" width="0.0228%" height="15" fill="rgb(233,210,1)" fg:x="53816" fg:w="13"/><text x="94.4311%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (6 samples, 0.01%)</title><rect x="94.2038%" y="133" width="0.0105%" height="15" fill="rgb(244,137,37)" fg:x="53829" fg:w="6"/><text x="94.4538%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (9 samples, 0.02%)</title><rect x="94.2143%" y="133" width="0.0158%" height="15" fill="rgb(240,136,2)" fg:x="53835" fg:w="9"/><text x="94.4643%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (13 samples, 0.02%)</title><rect x="94.2318%" y="133" width="0.0228%" height="15" fill="rgb(239,18,37)" fg:x="53845" fg:w="13"/><text x="94.4818%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (8 samples, 0.01%)</title><rect x="94.2546%" y="133" width="0.0140%" height="15" fill="rgb(218,185,22)" fg:x="53858" fg:w="8"/><text x="94.5046%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (9 samples, 0.02%)</title><rect x="94.2686%" y="133" width="0.0158%" height="15" fill="rgb(225,218,4)" fg:x="53866" fg:w="9"/><text x="94.5186%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,521 samples, 7.91%)</title><rect x="86.3968%" y="149" width="7.9120%" height="15" fill="rgb(230,182,32)" fg:x="49368" fg:w="4521"/><text x="86.6468%" y="159.50">dateo_fun_r..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (14 samples, 0.02%)</title><rect x="94.2843%" y="133" width="0.0245%" height="15" fill="rgb(242,56,43)" fg:x="53875" fg:w="14"/><text x="94.5343%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.02%)</title><rect x="94.3088%" y="149" width="0.0228%" height="15" fill="rgb(233,99,24)" fg:x="53889" fg:w="13"/><text x="94.5588%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all_rev (4,551 samples, 7.96%)</title><rect x="86.3898%" y="165" width="7.9645%" height="15" fill="rgb(234,209,42)" fg:x="49364" fg:w="4551"/><text x="86.6398%" y="175.50">dateo_fun_r..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (21 samples, 0.04%)</title><rect x="94.3928%" y="165" width="0.0368%" height="15" fill="rgb(227,7,12)" fg:x="53937" fg:w="21"/><text x="94.6428%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (11 samples, 0.02%)</title><rect x="94.4401%" y="165" width="0.0193%" height="15" fill="rgb(245,203,43)" fg:x="53964" fg:w="11"/><text x="94.6901%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="94.4401%" y="149" width="0.0193%" height="15" fill="rgb(238,205,33)" fg:x="53964" fg:w="11"/><text x="94.6901%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (19 samples, 0.03%)</title><rect x="94.4716%" y="165" width="0.0333%" height="15" fill="rgb(231,56,7)" fg:x="53982" fg:w="19"/><text x="94.7216%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (6 samples, 0.01%)</title><rect x="94.5153%" y="165" width="0.0105%" height="15" fill="rgb(244,186,29)" fg:x="54007" fg:w="6"/><text x="94.7653%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_node (6,012 samples, 10.52%)</title><rect x="84.0220%" y="181" width="10.5213%" height="15" fill="rgb(234,111,31)" fg:x="48011" fg:w="6012"/><text x="84.2720%" y="191.50">dateo_fun_remov..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (13 samples, 0.02%)</title><rect x="94.5451%" y="181" width="0.0228%" height="15" fill="rgb(241,149,10)" fg:x="54024" fg:w="13"/><text x="94.7951%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (17 samples, 0.03%)</title><rect x="94.5678%" y="181" width="0.0298%" height="15" fill="rgb(249,206,44)" fg:x="54037" fg:w="17"/><text x="94.8178%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (12 samples, 0.02%)</title><rect x="94.5993%" y="181" width="0.0210%" height="15" fill="rgb(251,153,30)" fg:x="54055" fg:w="12"/><text x="94.8493%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (9 samples, 0.02%)</title><rect x="94.6203%" y="181" width="0.0158%" height="15" fill="rgb(239,152,38)" fg:x="54067" fg:w="9"/><text x="94.8703%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (14 samples, 0.02%)</title><rect x="94.6466%" y="181" width="0.0245%" height="15" fill="rgb(249,139,47)" fg:x="54082" fg:w="14"/><text x="94.8966%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (151 samples, 0.26%)</title><rect x="94.6816%" y="181" width="0.2643%" height="15" fill="rgb(244,64,35)" fg:x="54102" fg:w="151"/><text x="94.9316%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (147 samples, 0.26%)</title><rect x="94.6886%" y="165" width="0.2573%" height="15" fill="rgb(216,46,15)" fg:x="54106" fg:w="147"/><text x="94.9386%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (147 samples, 0.26%)</title><rect x="94.6886%" y="149" width="0.2573%" height="15" fill="rgb(250,74,19)" fg:x="54106" fg:w="147"/><text x="94.9386%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (147 samples, 0.26%)</title><rect x="94.6886%" y="133" width="0.2573%" height="15" fill="rgb(249,42,33)" fg:x="54106" fg:w="147"/><text x="94.9386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (6 samples, 0.01%)</title><rect x="94.9528%" y="181" width="0.0105%" height="15" fill="rgb(242,149,17)" fg:x="54257" fg:w="6"/><text x="95.2028%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (7 samples, 0.01%)</title><rect x="94.9948%" y="181" width="0.0123%" height="15" fill="rgb(244,29,21)" fg:x="54281" fg:w="7"/><text x="95.2448%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (11 samples, 0.02%)</title><rect x="95.0088%" y="181" width="0.0193%" height="15" fill="rgb(220,130,37)" fg:x="54289" fg:w="11"/><text x="95.2588%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223820 (8 samples, 0.01%)</title><rect x="95.0368%" y="181" width="0.0140%" height="15" fill="rgb(211,67,2)" fg:x="54305" fg:w="8"/><text x="95.2868%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382d (13 samples, 0.02%)</title><rect x="95.0508%" y="181" width="0.0228%" height="15" fill="rgb(235,68,52)" fg:x="54313" fg:w="13"/><text x="95.3008%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (6 samples, 0.01%)</title><rect x="95.0771%" y="181" width="0.0105%" height="15" fill="rgb(246,142,3)" fg:x="54328" fg:w="6"/><text x="95.3271%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22383d (8 samples, 0.01%)</title><rect x="95.0876%" y="181" width="0.0140%" height="15" fill="rgb(241,25,7)" fg:x="54334" fg:w="8"/><text x="95.3376%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (164 samples, 0.29%)</title><rect x="95.1453%" y="181" width="0.2870%" height="15" fill="rgb(242,119,39)" fg:x="54367" fg:w="164"/><text x="95.3953%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (6 samples, 0.01%)</title><rect x="95.4341%" y="181" width="0.0105%" height="15" fill="rgb(241,98,45)" fg:x="54532" fg:w="6"/><text x="95.6841%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (6 samples, 0.01%)</title><rect x="95.4446%" y="181" width="0.0105%" height="15" fill="rgb(254,28,30)" fg:x="54538" fg:w="6"/><text x="95.6946%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (46 samples, 0.08%)</title><rect x="95.4691%" y="181" width="0.0805%" height="15" fill="rgb(241,142,54)" fg:x="54552" fg:w="46"/><text x="95.7191%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (46 samples, 0.08%)</title><rect x="95.4691%" y="165" width="0.0805%" height="15" fill="rgb(222,85,15)" fg:x="54552" fg:w="46"/><text x="95.7191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (10 samples, 0.02%)</title><rect x="95.5566%" y="181" width="0.0175%" height="15" fill="rgb(210,85,47)" fg:x="54602" fg:w="10"/><text x="95.8066%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223920 (6 samples, 0.01%)</title><rect x="95.5794%" y="181" width="0.0105%" height="15" fill="rgb(224,206,25)" fg:x="54615" fg:w="6"/><text x="95.8294%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (6 samples, 0.01%)</title><rect x="95.5899%" y="181" width="0.0105%" height="15" fill="rgb(243,201,19)" fg:x="54621" fg:w="6"/><text x="95.8399%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (90 samples, 0.16%)</title><rect x="95.6616%" y="181" width="0.1575%" height="15" fill="rgb(236,59,4)" fg:x="54662" fg:w="90"/><text x="95.9116%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (35 samples, 0.06%)</title><rect x="95.8191%" y="181" width="0.0613%" height="15" fill="rgb(254,179,45)" fg:x="54752" fg:w="35"/><text x="96.0691%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (28 samples, 0.05%)</title><rect x="95.8926%" y="181" width="0.0490%" height="15" fill="rgb(226,14,10)" fg:x="54794" fg:w="28"/><text x="96.1426%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (32 samples, 0.06%)</title><rect x="95.9609%" y="181" width="0.0560%" height="15" fill="rgb(244,27,41)" fg:x="54833" fg:w="32"/><text x="96.2109%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (18 samples, 0.03%)</title><rect x="96.0169%" y="181" width="0.0315%" height="15" fill="rgb(235,35,32)" fg:x="54865" fg:w="18"/><text x="96.2669%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (12 samples, 0.02%)</title><rect x="96.0484%" y="181" width="0.0210%" height="15" fill="rgb(218,68,31)" fg:x="54883" fg:w="12"/><text x="96.2984%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (8 samples, 0.01%)</title><rect x="96.0711%" y="181" width="0.0140%" height="15" fill="rgb(207,120,37)" fg:x="54896" fg:w="8"/><text x="96.3211%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.01%)</title><rect x="96.0851%" y="181" width="0.0105%" height="15" fill="rgb(227,98,0)" fg:x="54904" fg:w="6"/><text x="96.3351%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (16 samples, 0.03%)</title><rect x="96.0956%" y="181" width="0.0280%" height="15" fill="rgb(207,7,3)" fg:x="54910" fg:w="16"/><text x="96.3456%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="96.1236%" y="181" width="0.0175%" height="15" fill="rgb(206,98,19)" fg:x="54926" fg:w="10"/><text x="96.3736%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (19,357 samples, 33.88%)</title><rect x="65.6131%" y="197" width="33.8759%" height="15" fill="rgb(217,5,26)" fg:x="37492" fg:w="19357"/><text x="65.8631%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::tree::Aren..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,913 samples, 3.35%)</title><rect x="96.1411%" y="181" width="3.3479%" height="15" fill="rgb(235,190,38)" fg:x="54936" fg:w="1913"/><text x="96.3911%" y="191.50">lib..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (24 samples, 0.04%)</title><rect x="99.4890%" y="197" width="0.0420%" height="15" fill="rgb(247,86,24)" fg:x="56849" fg:w="24"/><text x="99.7390%" y="207.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (22 samples, 0.04%)</title><rect x="99.5345%" y="197" width="0.0385%" height="15" fill="rgb(205,101,16)" fg:x="56875" fg:w="22"/><text x="99.7845%" y="207.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (11 samples, 0.02%)</title><rect x="99.5730%" y="197" width="0.0193%" height="15" fill="rgb(246,168,33)" fg:x="56897" fg:w="11"/><text x="99.8230%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (13 samples, 0.02%)</title><rect x="99.6027%" y="197" width="0.0228%" height="15" fill="rgb(231,114,1)" fg:x="56914" fg:w="13"/><text x="99.8527%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (6 samples, 0.01%)</title><rect x="99.6255%" y="197" width="0.0105%" height="15" fill="rgb(207,184,53)" fg:x="56927" fg:w="6"/><text x="99.8755%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (6 samples, 0.01%)</title><rect x="99.6377%" y="197" width="0.0105%" height="15" fill="rgb(224,95,51)" fg:x="56934" fg:w="6"/><text x="99.8877%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (9 samples, 0.02%)</title><rect x="99.6587%" y="197" width="0.0158%" height="15" fill="rgb(212,188,45)" fg:x="56946" fg:w="9"/><text x="99.9087%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (24 samples, 0.04%)</title><rect x="99.6797%" y="197" width="0.0420%" height="15" fill="rgb(223,154,38)" fg:x="56958" fg:w="24"/><text x="99.9297%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b7de (13 samples, 0.02%)</title><rect x="99.7620%" y="181" width="0.0228%" height="15" fill="rgb(251,22,52)" fg:x="57005" fg:w="13"/><text x="100.0120%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (30 samples, 0.05%)</title><rect x="99.7375%" y="197" width="0.0525%" height="15" fill="rgb(229,209,22)" fg:x="56991" fg:w="30"/><text x="99.9875%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20e006 (22 samples, 0.04%)</title><rect x="99.7935%" y="197" width="0.0385%" height="15" fill="rgb(234,138,34)" fg:x="57023" fg:w="22"/><text x="100.0435%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20e01a (6 samples, 0.01%)</title><rect x="99.8320%" y="197" width="0.0105%" height="15" fill="rgb(212,95,11)" fg:x="57045" fg:w="6"/><text x="100.0820%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (12 samples, 0.02%)</title><rect x="99.8740%" y="197" width="0.0210%" height="15" fill="rgb(240,179,47)" fg:x="57069" fg:w="12"/><text x="100.1240%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (6 samples, 0.01%)</title><rect x="99.9352%" y="197" width="0.0105%" height="15" fill="rgb(240,163,11)" fg:x="57104" fg:w="6"/><text x="100.1852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (7 samples, 0.01%)</title><rect x="99.9457%" y="197" width="0.0123%" height="15" fill="rgb(236,37,12)" fg:x="57110" fg:w="7"/><text x="100.1957%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (6 samples, 0.01%)</title><rect x="99.9580%" y="197" width="0.0105%" height="15" fill="rgb(232,164,16)" fg:x="57117" fg:w="6"/><text x="100.2080%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (57,121 samples, 99.96%)</title><rect x="0.0140%" y="213" width="99.9650%" height="15" fill="rgb(244,205,15)" fg:x="8" fg:w="57121"/><text x="0.2640%" y="223.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>all (57,141 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(223,117,47)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (57,141 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(244,107,35)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>dateo_fun_remover`main (57,141 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(205,140,8)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="319.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (57,141 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(228,84,46)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="303.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (57,141 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(254,188,9)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="287.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (57,141 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(206,112,54)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="271.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (57,141 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(216,84,49)" fg:x="0" fg:w="57141"/><text x="0.2500%" y="255.50">dateo_fun_remover`dateo_fun_remover::main</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (57,140 samples, 100.00%)</title><rect x="0.0018%" y="229" width="99.9982%" height="15" fill="rgb(214,194,35)" fg:x="1" fg:w="57140"/><text x="0.2518%" y="239.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g></svg></svg>