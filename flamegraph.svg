<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="374" onload="init(evt)" viewBox="0 0 1200 374" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="374" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="357.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="357.00"> </text><svg id="frames" x="10" width="1180" total_samples="29482"><g><title>dateo_fun_remover`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (3 samples, 0.01%)</title><rect x="0.0000%" y="197" width="0.0102%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="3"/><text x="0.2500%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4 samples, 0.01%)</title><rect x="0.0339%" y="181" width="0.0136%" height="15" fill="rgb(217,0,24)" fg:x="10" fg:w="4"/><text x="0.2839%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (14 samples, 0.05%)</title><rect x="0.0475%" y="181" width="0.0475%" height="15" fill="rgb(221,193,54)" fg:x="14" fg:w="14"/><text x="0.2975%" y="191.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (16 samples, 0.05%)</title><rect x="0.0950%" y="181" width="0.0543%" height="15" fill="rgb(248,212,6)" fg:x="28" fg:w="16"/><text x="0.3450%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (418 samples, 1.42%)</title><rect x="0.1560%" y="181" width="1.4178%" height="15" fill="rgb(208,68,35)" fg:x="46" fg:w="418"/><text x="0.4060%" y="191.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (18 samples, 0.06%)</title><rect x="1.5128%" y="165" width="0.0611%" height="15" fill="rgb(232,128,0)" fg:x="446" fg:w="18"/><text x="1.7628%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (5 samples, 0.02%)</title><rect x="1.6044%" y="149" width="0.0170%" height="15" fill="rgb(207,160,47)" fg:x="473" fg:w="5"/><text x="1.8544%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13 samples, 0.04%)</title><rect x="1.5840%" y="165" width="0.0441%" height="15" fill="rgb(228,23,34)" fg:x="467" fg:w="13"/><text x="1.8340%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (3 samples, 0.01%)</title><rect x="1.6315%" y="133" width="0.0102%" height="15" fill="rgb(218,30,26)" fg:x="481" fg:w="3"/><text x="1.8815%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (3 samples, 0.01%)</title><rect x="1.6315%" y="117" width="0.0102%" height="15" fill="rgb(220,122,19)" fg:x="481" fg:w="3"/><text x="1.8815%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (3 samples, 0.01%)</title><rect x="1.6315%" y="101" width="0.0102%" height="15" fill="rgb(250,228,42)" fg:x="481" fg:w="3"/><text x="1.8815%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (3 samples, 0.01%)</title><rect x="1.6315%" y="85" width="0.0102%" height="15" fill="rgb(240,193,28)" fg:x="481" fg:w="3"/><text x="1.8815%" y="95.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (8 samples, 0.03%)</title><rect x="1.6281%" y="149" width="0.0271%" height="15" fill="rgb(216,20,37)" fg:x="480" fg:w="8"/><text x="1.8781%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::possible_vals_with_removed_funcs (3 samples, 0.01%)</title><rect x="1.6552%" y="149" width="0.0102%" height="15" fill="rgb(206,188,39)" fg:x="488" fg:w="3"/><text x="1.9052%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::possible_vals_with_removed_funcs (26 samples, 0.09%)</title><rect x="1.5806%" y="181" width="0.0882%" height="15" fill="rgb(217,207,13)" fg:x="466" fg:w="26"/><text x="1.8306%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::possible_vals_with_removed_funcs (12 samples, 0.04%)</title><rect x="1.6281%" y="165" width="0.0407%" height="15" fill="rgb(231,73,38)" fg:x="480" fg:w="12"/><text x="1.8781%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,474 samples, 5.00%)</title><rect x="45.5363%" y="133" width="4.9997%" height="15" fill="rgb(225,20,46)" fg:x="13425" fg:w="1474"/><text x="45.7863%" y="143.50">dateo_..</text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (11,498 samples, 39.00%)</title><rect x="12.0514%" y="149" width="39.0001%" height="15" fill="rgb(210,31,41)" fg:x="3553" fg:w="11498"/><text x="12.3014%" y="159.50">dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (152 samples, 0.52%)</title><rect x="50.5359%" y="133" width="0.5156%" height="15" fill="rgb(221,200,47)" fg:x="14899" fg:w="152"/><text x="50.7859%" y="143.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::insert (16 samples, 0.05%)</title><rect x="51.0515%" y="149" width="0.0543%" height="15" fill="rgb(226,26,5)" fg:x="15051" fg:w="16"/><text x="51.3015%" y="159.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (51 samples, 0.17%)</title><rect x="51.1058%" y="149" width="0.1730%" height="15" fill="rgb(249,33,26)" fg:x="15067" fg:w="51"/><text x="51.3558%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (51 samples, 0.17%)</title><rect x="51.1058%" y="133" width="0.1730%" height="15" fill="rgb(235,183,28)" fg:x="15067" fg:w="51"/><text x="51.3558%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (14,655 samples, 49.71%)</title><rect x="1.6688%" y="165" width="49.7083%" height="15" fill="rgb(221,5,38)" fg:x="492" fg:w="14655"/><text x="1.9188%" y="175.50">dateo_fun_remover`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::..</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (29 samples, 0.10%)</title><rect x="51.2787%" y="149" width="0.0984%" height="15" fill="rgb(247,18,42)" fg:x="15118" fg:w="29"/><text x="51.5287%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects (14,694 samples, 49.84%)</title><rect x="1.6688%" y="181" width="49.8406%" height="15" fill="rgb(241,131,45)" fg:x="492" fg:w="14694"/><text x="1.9188%" y="191.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects</text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (39 samples, 0.13%)</title><rect x="51.3771%" y="165" width="0.1323%" height="15" fill="rgb(249,31,29)" fg:x="15147" fg:w="39"/><text x="51.6271%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (5 samples, 0.02%)</title><rect x="51.5094%" y="181" width="0.0170%" height="15" fill="rgb(225,111,53)" fg:x="15186" fg:w="5"/><text x="51.7594%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (5 samples, 0.02%)</title><rect x="51.5094%" y="165" width="0.0170%" height="15" fill="rgb(238,160,17)" fg:x="15186" fg:w="5"/><text x="51.7594%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b671 (15 samples, 0.05%)</title><rect x="57.5097%" y="85" width="0.0509%" height="15" fill="rgb(214,148,48)" fg:x="16955" fg:w="15"/><text x="57.7597%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ddf (15 samples, 0.05%)</title><rect x="57.5097%" y="69" width="0.0509%" height="15" fill="rgb(232,36,49)" fg:x="16955" fg:w="15"/><text x="57.7597%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (15 samples, 0.05%)</title><rect x="57.5097%" y="53" width="0.0509%" height="15" fill="rgb(209,103,24)" fg:x="16955" fg:w="15"/><text x="57.7597%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (15 samples, 0.05%)</title><rect x="57.5097%" y="37" width="0.0509%" height="15" fill="rgb(229,88,8)" fg:x="16955" fg:w="15"/><text x="57.7597%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b794 (3 samples, 0.01%)</title><rect x="57.5605%" y="85" width="0.0102%" height="15" fill="rgb(213,181,19)" fg:x="16970" fg:w="3"/><text x="57.8105%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (3 samples, 0.01%)</title><rect x="57.5605%" y="69" width="0.0102%" height="15" fill="rgb(254,191,54)" fg:x="16970" fg:w="3"/><text x="57.8105%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (3 samples, 0.01%)</title><rect x="57.5605%" y="53" width="0.0102%" height="15" fill="rgb(241,83,37)" fg:x="16970" fg:w="3"/><text x="57.8105%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7a6 (15 samples, 0.05%)</title><rect x="57.5707%" y="85" width="0.0509%" height="15" fill="rgb(233,36,39)" fg:x="16973" fg:w="15"/><text x="57.8207%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (15 samples, 0.05%)</title><rect x="57.5707%" y="69" width="0.0509%" height="15" fill="rgb(226,3,54)" fg:x="16973" fg:w="15"/><text x="57.8207%" y="79.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (34 samples, 0.12%)</title><rect x="57.5097%" y="149" width="0.1153%" height="15" fill="rgb(245,192,40)" fg:x="16955" fg:w="34"/><text x="57.7597%" y="159.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (34 samples, 0.12%)</title><rect x="57.5097%" y="133" width="0.1153%" height="15" fill="rgb(238,167,29)" fg:x="16955" fg:w="34"/><text x="57.7597%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (34 samples, 0.12%)</title><rect x="57.5097%" y="117" width="0.1153%" height="15" fill="rgb(232,182,51)" fg:x="16955" fg:w="34"/><text x="57.7597%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (34 samples, 0.12%)</title><rect x="57.5097%" y="101" width="0.1153%" height="15" fill="rgb(231,60,39)" fg:x="16955" fg:w="34"/><text x="57.7597%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (3 samples, 0.01%)</title><rect x="57.6250%" y="149" width="0.0102%" height="15" fill="rgb(208,69,12)" fg:x="16989" fg:w="3"/><text x="57.8750%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (18 samples, 0.06%)</title><rect x="57.6352%" y="149" width="0.0611%" height="15" fill="rgb(235,93,37)" fg:x="16992" fg:w="18"/><text x="57.8852%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1,078 samples, 3.66%)</title><rect x="54.1279%" y="165" width="3.6565%" height="15" fill="rgb(213,116,39)" fg:x="15958" fg:w="1078"/><text x="54.3779%" y="175.50">date..</text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (26 samples, 0.09%)</title><rect x="57.6962%" y="149" width="0.0882%" height="15" fill="rgb(222,207,29)" fg:x="17010" fg:w="26"/><text x="57.9462%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (12 samples, 0.04%)</title><rect x="57.7844%" y="165" width="0.0407%" height="15" fill="rgb(206,96,30)" fg:x="17036" fg:w="12"/><text x="58.0344%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,161 samples, 7.33%)</title><rect x="57.8251%" y="165" width="7.3299%" height="15" fill="rgb(218,138,4)" fg:x="17048" fg:w="2161"/><text x="58.0751%" y="175.50">dateo_fun_..</text></g><g><title>dateo_fun_remover`DYLD-STUB$$log (13 samples, 0.04%)</title><rect x="65.1550%" y="165" width="0.0441%" height="15" fill="rgb(250,191,14)" fg:x="19209" fg:w="13"/><text x="65.4050%" y="175.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$memcpy (8 samples, 0.03%)</title><rect x="65.1991%" y="165" width="0.0271%" height="15" fill="rgb(239,60,40)" fg:x="19222" fg:w="8"/><text x="65.4491%" y="175.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$pow (7 samples, 0.02%)</title><rect x="65.2262%" y="165" width="0.0237%" height="15" fill="rgb(206,27,48)" fg:x="19230" fg:w="7"/><text x="65.4762%" y="175.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (17 samples, 0.06%)</title><rect x="65.2500%" y="165" width="0.0577%" height="15" fill="rgb(225,35,8)" fg:x="19237" fg:w="17"/><text x="65.5000%" y="175.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (27 samples, 0.09%)</title><rect x="65.3076%" y="165" width="0.0916%" height="15" fill="rgb(250,213,24)" fg:x="19254" fg:w="27"/><text x="65.5576%" y="175.50"></text></g><g><title>dateo_fun_remover`__rust_alloc (8 samples, 0.03%)</title><rect x="65.3992%" y="165" width="0.0271%" height="15" fill="rgb(247,123,22)" fg:x="19281" fg:w="8"/><text x="65.6492%" y="175.50"></text></g><g><title>dateo_fun_remover`__rust_dealloc (3 samples, 0.01%)</title><rect x="65.4264%" y="165" width="0.0102%" height="15" fill="rgb(231,138,38)" fg:x="19289" fg:w="3"/><text x="65.6764%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b671 (3 samples, 0.01%)</title><rect x="65.5213%" y="101" width="0.0102%" height="15" fill="rgb(231,145,46)" fg:x="19317" fg:w="3"/><text x="65.7713%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ddf (3 samples, 0.01%)</title><rect x="65.5213%" y="85" width="0.0102%" height="15" fill="rgb(251,118,11)" fg:x="19317" fg:w="3"/><text x="65.7713%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (3 samples, 0.01%)</title><rect x="65.5213%" y="69" width="0.0102%" height="15" fill="rgb(217,147,25)" fg:x="19317" fg:w="3"/><text x="65.7713%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (3 samples, 0.01%)</title><rect x="65.5213%" y="53" width="0.0102%" height="15" fill="rgb(247,81,37)" fg:x="19317" fg:w="3"/><text x="65.7713%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b794 (13 samples, 0.04%)</title><rect x="65.5315%" y="101" width="0.0441%" height="15" fill="rgb(209,12,38)" fg:x="19320" fg:w="13"/><text x="65.7815%" y="111.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (13 samples, 0.04%)</title><rect x="65.5315%" y="85" width="0.0441%" height="15" fill="rgb(227,1,9)" fg:x="19320" fg:w="13"/><text x="65.7815%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (13 samples, 0.04%)</title><rect x="65.5315%" y="69" width="0.0441%" height="15" fill="rgb(248,47,43)" fg:x="19320" fg:w="13"/><text x="65.7815%" y="79.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (94 samples, 0.32%)</title><rect x="65.4365%" y="165" width="0.3188%" height="15" fill="rgb(221,10,30)" fg:x="19292" fg:w="94"/><text x="65.6865%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (69 samples, 0.23%)</title><rect x="65.5213%" y="149" width="0.2340%" height="15" fill="rgb(210,229,1)" fg:x="19317" fg:w="69"/><text x="65.7713%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (69 samples, 0.23%)</title><rect x="65.5213%" y="133" width="0.2340%" height="15" fill="rgb(222,148,37)" fg:x="19317" fg:w="69"/><text x="65.7713%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (69 samples, 0.23%)</title><rect x="65.5213%" y="117" width="0.2340%" height="15" fill="rgb(234,67,33)" fg:x="19317" fg:w="69"/><text x="65.7713%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7b3 (51 samples, 0.17%)</title><rect x="65.5824%" y="101" width="0.1730%" height="15" fill="rgb(247,98,35)" fg:x="19335" fg:w="51"/><text x="65.8324%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (51 samples, 0.17%)</title><rect x="65.5824%" y="85" width="0.1730%" height="15" fill="rgb(247,138,52)" fg:x="19335" fg:w="51"/><text x="65.8324%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (51 samples, 0.17%)</title><rect x="65.5824%" y="69" width="0.1730%" height="15" fill="rgb(213,79,30)" fg:x="19335" fg:w="51"/><text x="65.8324%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (51 samples, 0.17%)</title><rect x="65.5824%" y="53" width="0.1730%" height="15" fill="rgb(246,177,23)" fg:x="19335" fg:w="51"/><text x="65.8324%" y="63.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (51 samples, 0.17%)</title><rect x="65.5824%" y="37" width="0.1730%" height="15" fill="rgb(230,62,27)" fg:x="19335" fg:w="51"/><text x="65.8324%" y="47.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (3 samples, 0.01%)</title><rect x="65.7622%" y="149" width="0.0102%" height="15" fill="rgb(216,154,8)" fg:x="19388" fg:w="3"/><text x="66.0122%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5 samples, 0.02%)</title><rect x="65.7723%" y="149" width="0.0170%" height="15" fill="rgb(244,35,45)" fg:x="19391" fg:w="5"/><text x="66.0223%" y="159.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (4 samples, 0.01%)</title><rect x="65.7893%" y="149" width="0.0136%" height="15" fill="rgb(251,115,12)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="159.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="65.7893%" y="133" width="0.0136%" height="15" fill="rgb(240,54,50)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (4 samples, 0.01%)</title><rect x="65.7893%" y="117" width="0.0136%" height="15" fill="rgb(233,84,52)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (4 samples, 0.01%)</title><rect x="65.7893%" y="101" width="0.0136%" height="15" fill="rgb(207,117,47)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7a6 (4 samples, 0.01%)</title><rect x="65.7893%" y="85" width="0.0136%" height="15" fill="rgb(249,43,39)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (4 samples, 0.01%)</title><rect x="65.7893%" y="69" width="0.0136%" height="15" fill="rgb(209,38,44)" fg:x="19396" fg:w="4"/><text x="66.0393%" y="79.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (13 samples, 0.04%)</title><rect x="65.8266%" y="117" width="0.0441%" height="15" fill="rgb(236,212,23)" fg:x="19407" fg:w="13"/><text x="66.0766%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (4 samples, 0.01%)</title><rect x="65.8571%" y="101" width="0.0136%" height="15" fill="rgb(242,79,21)" fg:x="19416" fg:w="4"/><text x="66.1071%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (3 samples, 0.01%)</title><rect x="65.8775%" y="117" width="0.0102%" height="15" fill="rgb(211,96,35)" fg:x="19422" fg:w="3"/><text x="66.1275%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (25 samples, 0.08%)</title><rect x="65.8063%" y="133" width="0.0848%" height="15" fill="rgb(253,215,40)" fg:x="19401" fg:w="25"/><text x="66.0563%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (6 samples, 0.02%)</title><rect x="65.8911%" y="133" width="0.0204%" height="15" fill="rgb(211,81,21)" fg:x="19426" fg:w="6"/><text x="66.1411%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (6 samples, 0.02%)</title><rect x="65.8911%" y="117" width="0.0204%" height="15" fill="rgb(208,190,38)" fg:x="19426" fg:w="6"/><text x="66.1411%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (4 samples, 0.01%)</title><rect x="65.8978%" y="101" width="0.0136%" height="15" fill="rgb(235,213,38)" fg:x="19428" fg:w="4"/><text x="66.1478%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (4 samples, 0.01%)</title><rect x="65.8978%" y="85" width="0.0136%" height="15" fill="rgb(237,122,38)" fg:x="19428" fg:w="4"/><text x="66.1478%" y="95.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (37 samples, 0.13%)</title><rect x="65.8029%" y="149" width="0.1255%" height="15" fill="rgb(244,218,35)" fg:x="19400" fg:w="37"/><text x="66.0529%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (54 samples, 0.18%)</title><rect x="65.7588%" y="165" width="0.1832%" height="15" fill="rgb(240,68,47)" fg:x="19387" fg:w="54"/><text x="66.0088%" y="175.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (26 samples, 0.09%)</title><rect x="73.8586%" y="117" width="0.0882%" height="15" fill="rgb(210,16,53)" fg:x="21775" fg:w="26"/><text x="74.1086%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (844 samples, 2.86%)</title><rect x="73.9468%" y="117" width="2.8628%" height="15" fill="rgb(235,124,12)" fg:x="21801" fg:w="844"/><text x="74.1968%" y="127.50">da..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (65 samples, 0.22%)</title><rect x="76.8096%" y="117" width="0.2205%" height="15" fill="rgb(224,169,11)" fg:x="22645" fg:w="65"/><text x="77.0596%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,940 samples, 6.58%)</title><rect x="70.7720%" y="133" width="6.5803%" height="15" fill="rgb(250,166,2)" fg:x="20865" fg:w="1940"/><text x="71.0220%" y="143.50">dateo_fun..</text></g><g><title>libsystem_m.dylib`trunc (95 samples, 0.32%)</title><rect x="77.0301%" y="117" width="0.3222%" height="15" fill="rgb(242,216,29)" fg:x="22710" fg:w="95"/><text x="77.2801%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="77.3523%" y="117" width="0.0136%" height="15" fill="rgb(230,116,27)" fg:x="22805" fg:w="4"/><text x="77.6023%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (3 samples, 0.01%)</title><rect x="77.3557%" y="101" width="0.0102%" height="15" fill="rgb(228,99,48)" fg:x="22806" fg:w="3"/><text x="77.6057%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (3 samples, 0.01%)</title><rect x="77.3557%" y="85" width="0.0102%" height="15" fill="rgb(253,11,6)" fg:x="22806" fg:w="3"/><text x="77.6057%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (5 samples, 0.02%)</title><rect x="77.3523%" y="133" width="0.0170%" height="15" fill="rgb(247,143,39)" fg:x="22805" fg:w="5"/><text x="77.6023%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (104 samples, 0.35%)</title><rect x="77.3692%" y="133" width="0.3528%" height="15" fill="rgb(236,97,10)" fg:x="22810" fg:w="104"/><text x="77.6192%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (15 samples, 0.05%)</title><rect x="77.7220%" y="133" width="0.0509%" height="15" fill="rgb(233,208,19)" fg:x="22914" fg:w="15"/><text x="77.9720%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (9 samples, 0.03%)</title><rect x="77.7729%" y="133" width="0.0305%" height="15" fill="rgb(216,164,2)" fg:x="22929" fg:w="9"/><text x="78.0229%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (7 samples, 0.02%)</title><rect x="77.8136%" y="133" width="0.0237%" height="15" fill="rgb(220,129,5)" fg:x="22941" fg:w="7"/><text x="78.0636%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573a0 (10 samples, 0.03%)</title><rect x="77.8373%" y="133" width="0.0339%" height="15" fill="rgb(242,17,10)" fg:x="22948" fg:w="10"/><text x="78.0873%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573b2 (10 samples, 0.03%)</title><rect x="77.8814%" y="133" width="0.0339%" height="15" fill="rgb(242,107,0)" fg:x="22961" fg:w="10"/><text x="78.1314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (6 samples, 0.02%)</title><rect x="77.9153%" y="133" width="0.0204%" height="15" fill="rgb(251,28,31)" fg:x="22971" fg:w="6"/><text x="78.1653%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d3 (4 samples, 0.01%)</title><rect x="77.9357%" y="133" width="0.0136%" height="15" fill="rgb(233,223,10)" fg:x="22977" fg:w="4"/><text x="78.1857%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (15 samples, 0.05%)</title><rect x="77.9493%" y="133" width="0.0509%" height="15" fill="rgb(215,21,27)" fg:x="22981" fg:w="15"/><text x="78.1993%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (49 samples, 0.17%)</title><rect x="78.0001%" y="133" width="0.1662%" height="15" fill="rgb(232,23,21)" fg:x="22996" fg:w="49"/><text x="78.2501%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (156 samples, 0.53%)</title><rect x="78.1663%" y="133" width="0.5291%" height="15" fill="rgb(244,5,23)" fg:x="23045" fg:w="156"/><text x="78.4163%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (15 samples, 0.05%)</title><rect x="78.6955%" y="133" width="0.0509%" height="15" fill="rgb(226,81,46)" fg:x="23201" fg:w="15"/><text x="78.9455%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (9 samples, 0.03%)</title><rect x="78.7464%" y="133" width="0.0305%" height="15" fill="rgb(247,70,30)" fg:x="23216" fg:w="9"/><text x="78.9964%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (49 samples, 0.17%)</title><rect x="78.7803%" y="133" width="0.1662%" height="15" fill="rgb(212,68,19)" fg:x="23226" fg:w="49"/><text x="79.0303%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (18 samples, 0.06%)</title><rect x="78.9465%" y="133" width="0.0611%" height="15" fill="rgb(240,187,13)" fg:x="23275" fg:w="18"/><text x="79.1965%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57414 (7 samples, 0.02%)</title><rect x="79.0075%" y="133" width="0.0237%" height="15" fill="rgb(223,113,26)" fg:x="23293" fg:w="7"/><text x="79.2575%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (23 samples, 0.08%)</title><rect x="79.0347%" y="133" width="0.0780%" height="15" fill="rgb(206,192,2)" fg:x="23301" fg:w="23"/><text x="79.2847%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5742b (8 samples, 0.03%)</title><rect x="79.1127%" y="133" width="0.0271%" height="15" fill="rgb(241,108,4)" fg:x="23324" fg:w="8"/><text x="79.3627%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (6 samples, 0.02%)</title><rect x="79.1398%" y="133" width="0.0204%" height="15" fill="rgb(247,173,49)" fg:x="23332" fg:w="6"/><text x="79.3898%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57442 (5 samples, 0.02%)</title><rect x="79.1602%" y="133" width="0.0170%" height="15" fill="rgb(224,114,35)" fg:x="23338" fg:w="5"/><text x="79.4102%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (12 samples, 0.04%)</title><rect x="79.1771%" y="133" width="0.0407%" height="15" fill="rgb(245,159,27)" fg:x="23343" fg:w="12"/><text x="79.4271%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (9 samples, 0.03%)</title><rect x="79.2212%" y="133" width="0.0305%" height="15" fill="rgb(245,172,44)" fg:x="23356" fg:w="9"/><text x="79.4712%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (8 samples, 0.03%)</title><rect x="79.2517%" y="133" width="0.0271%" height="15" fill="rgb(236,23,11)" fg:x="23365" fg:w="8"/><text x="79.5017%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57484 (18 samples, 0.06%)</title><rect x="79.2789%" y="133" width="0.0611%" height="15" fill="rgb(205,117,38)" fg:x="23373" fg:w="18"/><text x="79.5289%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (14 samples, 0.05%)</title><rect x="79.3399%" y="133" width="0.0475%" height="15" fill="rgb(237,72,25)" fg:x="23391" fg:w="14"/><text x="79.5899%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (14 samples, 0.05%)</title><rect x="79.3874%" y="133" width="0.0475%" height="15" fill="rgb(244,70,9)" fg:x="23405" fg:w="14"/><text x="79.6374%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (55 samples, 0.19%)</title><rect x="79.4485%" y="133" width="0.1866%" height="15" fill="rgb(217,125,39)" fg:x="23423" fg:w="55"/><text x="79.6985%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574d9 (15 samples, 0.05%)</title><rect x="79.6350%" y="133" width="0.0509%" height="15" fill="rgb(235,36,10)" fg:x="23478" fg:w="15"/><text x="79.8850%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574e7 (8 samples, 0.03%)</title><rect x="79.6927%" y="133" width="0.0271%" height="15" fill="rgb(251,123,47)" fg:x="23495" fg:w="8"/><text x="79.9427%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (56 samples, 0.19%)</title><rect x="79.7198%" y="133" width="0.1899%" height="15" fill="rgb(221,13,13)" fg:x="23503" fg:w="56"/><text x="79.9698%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fc (16 samples, 0.05%)</title><rect x="79.9098%" y="133" width="0.0543%" height="15" fill="rgb(238,131,9)" fg:x="23559" fg:w="16"/><text x="80.1598%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fe (7 samples, 0.02%)</title><rect x="79.9640%" y="133" width="0.0237%" height="15" fill="rgb(211,50,8)" fg:x="23575" fg:w="7"/><text x="80.2140%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57504 (8 samples, 0.03%)</title><rect x="79.9878%" y="133" width="0.0271%" height="15" fill="rgb(245,182,24)" fg:x="23582" fg:w="8"/><text x="80.2378%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (150 samples, 0.51%)</title><rect x="80.0149%" y="133" width="0.5088%" height="15" fill="rgb(242,14,37)" fg:x="23590" fg:w="150"/><text x="80.2649%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5754a (4 samples, 0.01%)</title><rect x="80.5237%" y="133" width="0.0136%" height="15" fill="rgb(246,228,12)" fg:x="23740" fg:w="4"/><text x="80.7737%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57568 (3 samples, 0.01%)</title><rect x="80.5373%" y="133" width="0.0102%" height="15" fill="rgb(213,55,15)" fg:x="23744" fg:w="3"/><text x="80.7873%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575a4 (9 samples, 0.03%)</title><rect x="80.5475%" y="133" width="0.0305%" height="15" fill="rgb(209,9,3)" fg:x="23747" fg:w="9"/><text x="80.7975%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575ae (14 samples, 0.05%)</title><rect x="80.5814%" y="133" width="0.0475%" height="15" fill="rgb(230,59,30)" fg:x="23757" fg:w="14"/><text x="80.8314%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b9 (6 samples, 0.02%)</title><rect x="80.6289%" y="133" width="0.0204%" height="15" fill="rgb(209,121,21)" fg:x="23771" fg:w="6"/><text x="80.8789%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575c6 (10 samples, 0.03%)</title><rect x="80.6492%" y="133" width="0.0339%" height="15" fill="rgb(220,109,13)" fg:x="23777" fg:w="10"/><text x="80.8992%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575d8 (7 samples, 0.02%)</title><rect x="80.6865%" y="133" width="0.0237%" height="15" fill="rgb(232,18,1)" fg:x="23788" fg:w="7"/><text x="80.9365%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (3,980 samples, 13.50%)</title><rect x="67.2207%" y="149" width="13.4998%" height="15" fill="rgb(215,41,42)" fg:x="19818" fg:w="3980"/><text x="67.4707%" y="159.50">dateo_fun_remover`&lt;a..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f575e4 (3 samples, 0.01%)</title><rect x="80.7103%" y="133" width="0.0102%" height="15" fill="rgb(224,123,36)" fg:x="23795" fg:w="3"/><text x="80.9603%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (14 samples, 0.05%)</title><rect x="80.7204%" y="149" width="0.0475%" height="15" fill="rgb(240,125,3)" fg:x="23798" fg:w="14"/><text x="80.9704%" y="159.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (22 samples, 0.07%)</title><rect x="80.7713%" y="149" width="0.0746%" height="15" fill="rgb(205,98,50)" fg:x="23813" fg:w="22"/><text x="81.0213%" y="159.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (5 samples, 0.02%)</title><rect x="81.0698%" y="133" width="0.0170%" height="15" fill="rgb(205,185,37)" fg:x="23901" fg:w="5"/><text x="81.3198%" y="143.50"></text></g><g><title>dateo_fun_remover`__rust_realloc (3 samples, 0.01%)</title><rect x="81.0868%" y="133" width="0.0102%" height="15" fill="rgb(238,207,15)" fg:x="23906" fg:w="3"/><text x="81.3368%" y="143.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (37 samples, 0.13%)</title><rect x="81.2530%" y="117" width="0.1255%" height="15" fill="rgb(213,199,42)" fg:x="23955" fg:w="37"/><text x="81.5030%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e96 (13 samples, 0.04%)</title><rect x="81.3785%" y="117" width="0.0441%" height="15" fill="rgb(235,201,11)" fg:x="23992" fg:w="13"/><text x="81.6285%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57ea1 (3 samples, 0.01%)</title><rect x="81.4226%" y="117" width="0.0102%" height="15" fill="rgb(207,46,11)" fg:x="24005" fg:w="3"/><text x="81.6726%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57ec5 (3 samples, 0.01%)</title><rect x="81.4429%" y="117" width="0.0102%" height="15" fill="rgb(241,35,35)" fg:x="24011" fg:w="3"/><text x="81.6929%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f6e (3 samples, 0.01%)</title><rect x="81.4802%" y="117" width="0.0102%" height="15" fill="rgb(243,32,47)" fg:x="24022" fg:w="3"/><text x="81.7302%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f71 (4 samples, 0.01%)</title><rect x="81.4904%" y="117" width="0.0136%" height="15" fill="rgb(247,202,23)" fg:x="24025" fg:w="4"/><text x="81.7404%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f7b (27 samples, 0.09%)</title><rect x="81.5040%" y="117" width="0.0916%" height="15" fill="rgb(219,102,11)" fg:x="24029" fg:w="27"/><text x="81.7540%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f8d (6 samples, 0.02%)</title><rect x="81.5989%" y="117" width="0.0204%" height="15" fill="rgb(243,110,44)" fg:x="24057" fg:w="6"/><text x="81.8489%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57f9a (4 samples, 0.01%)</title><rect x="81.6193%" y="117" width="0.0136%" height="15" fill="rgb(222,74,54)" fg:x="24063" fg:w="4"/><text x="81.8693%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fa8 (6 samples, 0.02%)</title><rect x="81.6329%" y="117" width="0.0204%" height="15" fill="rgb(216,99,12)" fg:x="24067" fg:w="6"/><text x="81.8829%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fc0 (3 samples, 0.01%)</title><rect x="81.6600%" y="117" width="0.0102%" height="15" fill="rgb(226,22,26)" fg:x="24075" fg:w="3"/><text x="81.9100%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fc2 (5 samples, 0.02%)</title><rect x="81.6702%" y="117" width="0.0170%" height="15" fill="rgb(217,163,10)" fg:x="24078" fg:w="5"/><text x="81.9202%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fdf (8 samples, 0.03%)</title><rect x="81.6905%" y="117" width="0.0271%" height="15" fill="rgb(213,25,53)" fg:x="24084" fg:w="8"/><text x="81.9405%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57fe9 (3 samples, 0.01%)</title><rect x="81.7211%" y="117" width="0.0102%" height="15" fill="rgb(252,105,26)" fg:x="24093" fg:w="3"/><text x="81.9711%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58001 (3 samples, 0.01%)</title><rect x="81.7516%" y="117" width="0.0102%" height="15" fill="rgb(220,39,43)" fg:x="24102" fg:w="3"/><text x="82.0016%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58004 (172 samples, 0.58%)</title><rect x="81.7618%" y="117" width="0.5834%" height="15" fill="rgb(229,68,48)" fg:x="24105" fg:w="172"/><text x="82.0118%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58026 (5 samples, 0.02%)</title><rect x="82.3486%" y="117" width="0.0170%" height="15" fill="rgb(252,8,32)" fg:x="24278" fg:w="5"/><text x="82.5986%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59104 (6 samples, 0.02%)</title><rect x="82.3655%" y="117" width="0.0204%" height="15" fill="rgb(223,20,43)" fg:x="24283" fg:w="6"/><text x="82.6155%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59106 (3 samples, 0.01%)</title><rect x="82.3859%" y="117" width="0.0102%" height="15" fill="rgb(229,81,49)" fg:x="24289" fg:w="3"/><text x="82.6359%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5910c (8 samples, 0.03%)</title><rect x="82.4096%" y="117" width="0.0271%" height="15" fill="rgb(236,28,36)" fg:x="24296" fg:w="8"/><text x="82.6596%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5910d (3 samples, 0.01%)</title><rect x="82.4367%" y="117" width="0.0102%" height="15" fill="rgb(249,185,26)" fg:x="24304" fg:w="3"/><text x="82.6867%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59125 (3 samples, 0.01%)</title><rect x="82.4707%" y="117" width="0.0102%" height="15" fill="rgb(249,174,33)" fg:x="24314" fg:w="3"/><text x="82.7207%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59142 (6 samples, 0.02%)</title><rect x="82.4876%" y="117" width="0.0204%" height="15" fill="rgb(233,201,37)" fg:x="24319" fg:w="6"/><text x="82.7376%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5916b (4 samples, 0.01%)</title><rect x="82.5114%" y="117" width="0.0136%" height="15" fill="rgb(221,78,26)" fg:x="24326" fg:w="4"/><text x="82.7614%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59184 (6 samples, 0.02%)</title><rect x="82.5351%" y="117" width="0.0204%" height="15" fill="rgb(250,127,30)" fg:x="24333" fg:w="6"/><text x="82.7851%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5920d (7 samples, 0.02%)</title><rect x="82.5555%" y="117" width="0.0237%" height="15" fill="rgb(230,49,44)" fg:x="24339" fg:w="7"/><text x="82.8055%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59227 (5 samples, 0.02%)</title><rect x="82.5792%" y="117" width="0.0170%" height="15" fill="rgb(229,67,23)" fg:x="24346" fg:w="5"/><text x="82.8292%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a657 (11 samples, 0.04%)</title><rect x="82.5962%" y="101" width="0.0373%" height="15" fill="rgb(249,83,47)" fg:x="24351" fg:w="11"/><text x="82.8462%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a667 (3 samples, 0.01%)</title><rect x="82.6504%" y="101" width="0.0102%" height="15" fill="rgb(215,43,3)" fg:x="24367" fg:w="3"/><text x="82.9004%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a67b (4 samples, 0.01%)</title><rect x="82.6606%" y="101" width="0.0136%" height="15" fill="rgb(238,154,13)" fg:x="24370" fg:w="4"/><text x="82.9106%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a68b (5 samples, 0.02%)</title><rect x="82.6776%" y="101" width="0.0170%" height="15" fill="rgb(219,56,2)" fg:x="24375" fg:w="5"/><text x="82.9276%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b5 (6 samples, 0.02%)</title><rect x="82.7013%" y="85" width="0.0204%" height="15" fill="rgb(233,0,4)" fg:x="24382" fg:w="6"/><text x="82.9513%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5804e (7 samples, 0.02%)</title><rect x="82.7386%" y="85" width="0.0237%" height="15" fill="rgb(235,30,7)" fg:x="24393" fg:w="7"/><text x="82.9886%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58068 (3 samples, 0.01%)</title><rect x="82.7759%" y="85" width="0.0102%" height="15" fill="rgb(250,79,13)" fg:x="24404" fg:w="3"/><text x="83.0259%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5807b (4 samples, 0.01%)</title><rect x="82.7861%" y="85" width="0.0136%" height="15" fill="rgb(211,146,34)" fg:x="24407" fg:w="4"/><text x="83.0361%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5810f (3 samples, 0.01%)</title><rect x="82.7997%" y="85" width="0.0102%" height="15" fill="rgb(228,22,38)" fg:x="24411" fg:w="3"/><text x="83.0497%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5811a (3 samples, 0.01%)</title><rect x="82.8132%" y="85" width="0.0102%" height="15" fill="rgb(235,168,5)" fg:x="24415" fg:w="3"/><text x="83.0632%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58120 (10 samples, 0.03%)</title><rect x="82.8234%" y="85" width="0.0339%" height="15" fill="rgb(221,155,16)" fg:x="24418" fg:w="10"/><text x="83.0734%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58134 (5 samples, 0.02%)</title><rect x="82.8607%" y="85" width="0.0170%" height="15" fill="rgb(215,215,53)" fg:x="24429" fg:w="5"/><text x="83.1107%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58143 (4 samples, 0.01%)</title><rect x="82.8845%" y="85" width="0.0136%" height="15" fill="rgb(223,4,10)" fg:x="24436" fg:w="4"/><text x="83.1345%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58153 (5 samples, 0.02%)</title><rect x="82.9014%" y="85" width="0.0170%" height="15" fill="rgb(234,103,6)" fg:x="24441" fg:w="5"/><text x="83.1514%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581a0 (6 samples, 0.02%)</title><rect x="82.9320%" y="85" width="0.0204%" height="15" fill="rgb(227,97,0)" fg:x="24450" fg:w="6"/><text x="83.1820%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581b2 (5 samples, 0.02%)</title><rect x="82.9557%" y="85" width="0.0170%" height="15" fill="rgb(234,150,53)" fg:x="24457" fg:w="5"/><text x="83.2057%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581bf (4 samples, 0.01%)</title><rect x="82.9727%" y="85" width="0.0136%" height="15" fill="rgb(228,201,54)" fg:x="24462" fg:w="4"/><text x="83.2227%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581cb (141 samples, 0.48%)</title><rect x="82.9964%" y="85" width="0.4783%" height="15" fill="rgb(222,22,37)" fg:x="24469" fg:w="141"/><text x="83.2464%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581e0 (4 samples, 0.01%)</title><rect x="83.4848%" y="85" width="0.0136%" height="15" fill="rgb(237,53,32)" fg:x="24613" fg:w="4"/><text x="83.7348%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a760 (7 samples, 0.02%)</title><rect x="83.5018%" y="85" width="0.0237%" height="15" fill="rgb(233,25,53)" fg:x="24618" fg:w="7"/><text x="83.7518%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a768 (7 samples, 0.02%)</title><rect x="83.5289%" y="85" width="0.0237%" height="15" fill="rgb(210,40,34)" fg:x="24626" fg:w="7"/><text x="83.7789%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a770 (7 samples, 0.02%)</title><rect x="83.5527%" y="85" width="0.0237%" height="15" fill="rgb(241,220,44)" fg:x="24633" fg:w="7"/><text x="83.8027%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a77d (4 samples, 0.01%)</title><rect x="83.5764%" y="85" width="0.0136%" height="15" fill="rgb(235,28,35)" fg:x="24640" fg:w="4"/><text x="83.8264%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a782 (6 samples, 0.02%)</title><rect x="83.5900%" y="85" width="0.0204%" height="15" fill="rgb(210,56,17)" fg:x="24644" fg:w="6"/><text x="83.8400%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a7a0 (5 samples, 0.02%)</title><rect x="83.6103%" y="85" width="0.0170%" height="15" fill="rgb(224,130,29)" fg:x="24650" fg:w="5"/><text x="83.8603%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f58464 (4 samples, 0.01%)</title><rect x="83.6137%" y="69" width="0.0136%" height="15" fill="rgb(235,212,8)" fg:x="24651" fg:w="4"/><text x="83.8637%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f597de (3 samples, 0.01%)</title><rect x="83.6171%" y="53" width="0.0102%" height="15" fill="rgb(223,33,50)" fg:x="24652" fg:w="3"/><text x="83.8671%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a7f0 (5 samples, 0.02%)</title><rect x="83.6307%" y="85" width="0.0170%" height="15" fill="rgb(219,149,13)" fg:x="24656" fg:w="5"/><text x="83.8807%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a84d (10 samples, 0.03%)</title><rect x="83.6476%" y="85" width="0.0339%" height="15" fill="rgb(250,156,29)" fg:x="24661" fg:w="10"/><text x="83.8976%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (5 samples, 0.02%)</title><rect x="83.6816%" y="69" width="0.0170%" height="15" fill="rgb(216,193,19)" fg:x="24671" fg:w="5"/><text x="83.9316%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (8 samples, 0.03%)</title><rect x="83.6985%" y="69" width="0.0271%" height="15" fill="rgb(216,135,14)" fg:x="24676" fg:w="8"/><text x="83.9485%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573a0 (3 samples, 0.01%)</title><rect x="83.7291%" y="69" width="0.0102%" height="15" fill="rgb(241,47,5)" fg:x="24685" fg:w="3"/><text x="83.9791%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (8 samples, 0.03%)</title><rect x="83.7460%" y="69" width="0.0271%" height="15" fill="rgb(233,42,35)" fg:x="24690" fg:w="8"/><text x="83.9960%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (8 samples, 0.03%)</title><rect x="83.7731%" y="69" width="0.0271%" height="15" fill="rgb(231,13,6)" fg:x="24698" fg:w="8"/><text x="84.0231%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (15 samples, 0.05%)</title><rect x="83.8003%" y="69" width="0.0509%" height="15" fill="rgb(207,181,40)" fg:x="24706" fg:w="15"/><text x="84.0503%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (69 samples, 0.23%)</title><rect x="83.8512%" y="69" width="0.2340%" height="15" fill="rgb(254,173,49)" fg:x="24721" fg:w="69"/><text x="84.1012%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (7 samples, 0.02%)</title><rect x="84.0852%" y="69" width="0.0237%" height="15" fill="rgb(221,1,38)" fg:x="24790" fg:w="7"/><text x="84.3352%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (3 samples, 0.01%)</title><rect x="84.1089%" y="69" width="0.0102%" height="15" fill="rgb(206,124,46)" fg:x="24797" fg:w="3"/><text x="84.3589%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (16 samples, 0.05%)</title><rect x="84.1191%" y="69" width="0.0543%" height="15" fill="rgb(249,21,11)" fg:x="24800" fg:w="16"/><text x="84.3691%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (6 samples, 0.02%)</title><rect x="84.1734%" y="69" width="0.0204%" height="15" fill="rgb(222,201,40)" fg:x="24816" fg:w="6"/><text x="84.4234%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57414 (10 samples, 0.03%)</title><rect x="84.1937%" y="69" width="0.0339%" height="15" fill="rgb(235,61,29)" fg:x="24822" fg:w="10"/><text x="84.4437%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (16 samples, 0.05%)</title><rect x="84.2277%" y="69" width="0.0543%" height="15" fill="rgb(219,207,3)" fg:x="24832" fg:w="16"/><text x="84.4777%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5742b (6 samples, 0.02%)</title><rect x="84.2819%" y="69" width="0.0204%" height="15" fill="rgb(222,56,46)" fg:x="24848" fg:w="6"/><text x="84.5319%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (6 samples, 0.02%)</title><rect x="84.3057%" y="69" width="0.0204%" height="15" fill="rgb(239,76,54)" fg:x="24855" fg:w="6"/><text x="84.5557%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (4 samples, 0.01%)</title><rect x="84.3362%" y="69" width="0.0136%" height="15" fill="rgb(231,124,27)" fg:x="24864" fg:w="4"/><text x="84.5862%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (5 samples, 0.02%)</title><rect x="84.3498%" y="69" width="0.0170%" height="15" fill="rgb(249,195,6)" fg:x="24868" fg:w="5"/><text x="84.5998%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (5 samples, 0.02%)</title><rect x="84.3667%" y="69" width="0.0170%" height="15" fill="rgb(237,174,47)" fg:x="24873" fg:w="5"/><text x="84.6167%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57484 (5 samples, 0.02%)</title><rect x="84.3837%" y="69" width="0.0170%" height="15" fill="rgb(206,201,31)" fg:x="24878" fg:w="5"/><text x="84.6337%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (7 samples, 0.02%)</title><rect x="84.4007%" y="69" width="0.0237%" height="15" fill="rgb(231,57,52)" fg:x="24883" fg:w="7"/><text x="84.6507%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (5 samples, 0.02%)</title><rect x="84.4244%" y="69" width="0.0170%" height="15" fill="rgb(248,177,22)" fg:x="24890" fg:w="5"/><text x="84.6744%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (59 samples, 0.20%)</title><rect x="84.4549%" y="69" width="0.2001%" height="15" fill="rgb(215,211,37)" fg:x="24899" fg:w="59"/><text x="84.7049%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (9 samples, 0.03%)</title><rect x="84.6754%" y="69" width="0.0305%" height="15" fill="rgb(241,128,51)" fg:x="24964" fg:w="9"/><text x="84.9254%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fc (3 samples, 0.01%)</title><rect x="84.7059%" y="69" width="0.0102%" height="15" fill="rgb(227,165,31)" fg:x="24973" fg:w="3"/><text x="84.9559%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fe (3 samples, 0.01%)</title><rect x="84.7161%" y="69" width="0.0102%" height="15" fill="rgb(228,167,24)" fg:x="24976" fg:w="3"/><text x="84.9661%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (36 samples, 0.12%)</title><rect x="84.7331%" y="69" width="0.1221%" height="15" fill="rgb(228,143,12)" fg:x="24981" fg:w="36"/><text x="84.9831%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5754a (3 samples, 0.01%)</title><rect x="84.8552%" y="69" width="0.0102%" height="15" fill="rgb(249,149,8)" fg:x="25017" fg:w="3"/><text x="85.1052%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5755a (3 samples, 0.01%)</title><rect x="84.8653%" y="69" width="0.0102%" height="15" fill="rgb(243,35,44)" fg:x="25020" fg:w="3"/><text x="85.1153%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b9 (7 samples, 0.02%)</title><rect x="84.8891%" y="69" width="0.0237%" height="15" fill="rgb(246,89,9)" fg:x="25027" fg:w="7"/><text x="85.1391%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575c6 (3 samples, 0.01%)</title><rect x="84.9128%" y="69" width="0.0102%" height="15" fill="rgb(233,213,13)" fg:x="25034" fg:w="3"/><text x="85.1628%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a852 (370 samples, 1.26%)</title><rect x="83.6816%" y="85" width="1.2550%" height="15" fill="rgb(233,141,41)" fg:x="24671" fg:w="370"/><text x="83.9316%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575d8 (4 samples, 0.01%)</title><rect x="84.9230%" y="69" width="0.0136%" height="15" fill="rgb(239,167,4)" fg:x="25037" fg:w="4"/><text x="85.1730%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a85d (5 samples, 0.02%)</title><rect x="84.9400%" y="85" width="0.0170%" height="15" fill="rgb(209,217,16)" fg:x="25042" fg:w="5"/><text x="85.1900%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a86a (4 samples, 0.01%)</title><rect x="84.9569%" y="85" width="0.0136%" height="15" fill="rgb(219,88,35)" fg:x="25047" fg:w="4"/><text x="85.2069%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a86f (23 samples, 0.08%)</title><rect x="84.9705%" y="85" width="0.0780%" height="15" fill="rgb(220,193,23)" fg:x="25051" fg:w="23"/><text x="85.2205%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (20 samples, 0.07%)</title><rect x="84.9807%" y="69" width="0.0678%" height="15" fill="rgb(230,90,52)" fg:x="25054" fg:w="20"/><text x="85.2307%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fc (8 samples, 0.03%)</title><rect x="85.0587%" y="69" width="0.0271%" height="15" fill="rgb(252,106,19)" fg:x="25077" fg:w="8"/><text x="85.3087%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170c (4 samples, 0.01%)</title><rect x="85.1028%" y="69" width="0.0136%" height="15" fill="rgb(206,74,20)" fg:x="25090" fg:w="4"/><text x="85.3528%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71725 (4 samples, 0.01%)</title><rect x="85.1197%" y="69" width="0.0136%" height="15" fill="rgb(230,138,44)" fg:x="25095" fg:w="4"/><text x="85.3697%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7175f (3 samples, 0.01%)</title><rect x="85.1469%" y="69" width="0.0102%" height="15" fill="rgb(235,182,43)" fg:x="25103" fg:w="3"/><text x="85.3969%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717dd (3 samples, 0.01%)</title><rect x="85.1570%" y="69" width="0.0102%" height="15" fill="rgb(242,16,51)" fg:x="25106" fg:w="3"/><text x="85.4070%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ef (5 samples, 0.02%)</title><rect x="85.1740%" y="69" width="0.0170%" height="15" fill="rgb(248,9,4)" fg:x="25111" fg:w="5"/><text x="85.4240%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71810 (4 samples, 0.01%)</title><rect x="85.2079%" y="69" width="0.0136%" height="15" fill="rgb(210,31,22)" fg:x="25121" fg:w="4"/><text x="85.4579%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7181c (3 samples, 0.01%)</title><rect x="85.2215%" y="69" width="0.0102%" height="15" fill="rgb(239,54,39)" fg:x="25125" fg:w="3"/><text x="85.4715%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71872 (3 samples, 0.01%)</title><rect x="85.2724%" y="69" width="0.0102%" height="15" fill="rgb(230,99,41)" fg:x="25140" fg:w="3"/><text x="85.5224%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71881 (3 samples, 0.01%)</title><rect x="85.2893%" y="69" width="0.0102%" height="15" fill="rgb(253,106,12)" fg:x="25145" fg:w="3"/><text x="85.5393%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71884 (3 samples, 0.01%)</title><rect x="85.2995%" y="69" width="0.0102%" height="15" fill="rgb(213,46,41)" fg:x="25148" fg:w="3"/><text x="85.5495%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (66 samples, 0.22%)</title><rect x="85.3199%" y="69" width="0.2239%" height="15" fill="rgb(215,133,35)" fg:x="25154" fg:w="66"/><text x="85.5699%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (5 samples, 0.02%)</title><rect x="85.5437%" y="69" width="0.0170%" height="15" fill="rgb(213,28,5)" fg:x="25220" fg:w="5"/><text x="85.7937%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718e5 (5 samples, 0.02%)</title><rect x="85.5709%" y="69" width="0.0170%" height="15" fill="rgb(215,77,49)" fg:x="25228" fg:w="5"/><text x="85.8209%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718fc (4 samples, 0.01%)</title><rect x="85.6048%" y="69" width="0.0136%" height="15" fill="rgb(248,100,22)" fg:x="25238" fg:w="4"/><text x="85.8548%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (22 samples, 0.07%)</title><rect x="85.6183%" y="69" width="0.0746%" height="15" fill="rgb(208,67,9)" fg:x="25242" fg:w="22"/><text x="85.8683%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (20 samples, 0.07%)</title><rect x="85.6251%" y="53" width="0.0678%" height="15" fill="rgb(219,133,21)" fg:x="25244" fg:w="20"/><text x="85.8751%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7190f (3 samples, 0.01%)</title><rect x="85.6964%" y="69" width="0.0102%" height="15" fill="rgb(246,46,29)" fg:x="25265" fg:w="3"/><text x="85.9464%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71912 (3 samples, 0.01%)</title><rect x="85.7065%" y="69" width="0.0102%" height="15" fill="rgb(246,185,52)" fg:x="25268" fg:w="3"/><text x="85.9565%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71959 (3 samples, 0.01%)</title><rect x="85.7506%" y="69" width="0.0102%" height="15" fill="rgb(252,136,11)" fg:x="25281" fg:w="3"/><text x="86.0006%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (17 samples, 0.06%)</title><rect x="85.7812%" y="69" width="0.0577%" height="15" fill="rgb(219,138,53)" fg:x="25290" fg:w="17"/><text x="86.0312%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71999 (3 samples, 0.01%)</title><rect x="85.8388%" y="69" width="0.0102%" height="15" fill="rgb(211,51,23)" fg:x="25307" fg:w="3"/><text x="86.0888%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199b (3 samples, 0.01%)</title><rect x="85.8490%" y="69" width="0.0102%" height="15" fill="rgb(247,221,28)" fg:x="25310" fg:w="3"/><text x="86.0990%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (42 samples, 0.14%)</title><rect x="85.8592%" y="69" width="0.1425%" height="15" fill="rgb(251,222,45)" fg:x="25313" fg:w="42"/><text x="86.1092%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719aa (8 samples, 0.03%)</title><rect x="86.0084%" y="69" width="0.0271%" height="15" fill="rgb(217,162,53)" fg:x="25357" fg:w="8"/><text x="86.2584%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (83 samples, 0.28%)</title><rect x="86.0389%" y="69" width="0.2815%" height="15" fill="rgb(229,93,14)" fg:x="25366" fg:w="83"/><text x="86.2889%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (4 samples, 0.01%)</title><rect x="86.3273%" y="69" width="0.0136%" height="15" fill="rgb(209,67,49)" fg:x="25451" fg:w="4"/><text x="86.5773%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (3 samples, 0.01%)</title><rect x="86.3408%" y="69" width="0.0102%" height="15" fill="rgb(213,87,29)" fg:x="25455" fg:w="3"/><text x="86.5908%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a87c (392 samples, 1.33%)</title><rect x="85.0553%" y="85" width="1.3296%" height="15" fill="rgb(205,151,52)" fg:x="25076" fg:w="392"/><text x="85.3053%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (7 samples, 0.02%)</title><rect x="86.3612%" y="69" width="0.0237%" height="15" fill="rgb(253,215,39)" fg:x="25461" fg:w="7"/><text x="86.6112%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a884 (3 samples, 0.01%)</title><rect x="86.3849%" y="85" width="0.0102%" height="15" fill="rgb(221,220,41)" fg:x="25468" fg:w="3"/><text x="86.6349%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a88c (6 samples, 0.02%)</title><rect x="86.3951%" y="85" width="0.0204%" height="15" fill="rgb(218,133,21)" fg:x="25471" fg:w="6"/><text x="86.6451%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a894 (3 samples, 0.01%)</title><rect x="86.4188%" y="85" width="0.0102%" height="15" fill="rgb(221,193,43)" fg:x="25478" fg:w="3"/><text x="86.6688%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (5 samples, 0.02%)</title><rect x="86.4392%" y="85" width="0.0170%" height="15" fill="rgb(240,128,52)" fg:x="25484" fg:w="5"/><text x="86.6892%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a47 (7 samples, 0.02%)</title><rect x="86.4561%" y="85" width="0.0237%" height="15" fill="rgb(253,114,12)" fg:x="25489" fg:w="7"/><text x="86.7061%" y="95.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (7 samples, 0.02%)</title><rect x="86.4799%" y="85" width="0.0237%" height="15" fill="rgb(215,223,47)" fg:x="25496" fg:w="7"/><text x="86.7299%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (1,135 samples, 3.85%)</title><rect x="82.6945%" y="101" width="3.8498%" height="15" fill="rgb(248,225,23)" fg:x="24380" fg:w="1135"/><text x="82.9445%" y="111.50">libs..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (12 samples, 0.04%)</title><rect x="86.5036%" y="85" width="0.0407%" height="15" fill="rgb(250,108,0)" fg:x="25503" fg:w="12"/><text x="86.7536%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a6a2 (8 samples, 0.03%)</title><rect x="86.5443%" y="101" width="0.0271%" height="15" fill="rgb(228,208,7)" fg:x="25515" fg:w="8"/><text x="86.7943%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a6bb (3 samples, 0.01%)</title><rect x="86.5816%" y="101" width="0.0102%" height="15" fill="rgb(244,45,10)" fg:x="25526" fg:w="3"/><text x="86.8316%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a6c2 (6 samples, 0.02%)</title><rect x="86.5918%" y="101" width="0.0204%" height="15" fill="rgb(207,125,25)" fg:x="25529" fg:w="6"/><text x="86.8418%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a736 (7 samples, 0.02%)</title><rect x="86.6122%" y="101" width="0.0237%" height="15" fill="rgb(210,195,18)" fg:x="25535" fg:w="7"/><text x="86.8622%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a740 (3 samples, 0.01%)</title><rect x="86.6359%" y="101" width="0.0102%" height="15" fill="rgb(249,80,12)" fg:x="25542" fg:w="3"/><text x="86.8859%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (1,200 samples, 4.07%)</title><rect x="82.5962%" y="117" width="4.0703%" height="15" fill="rgb(221,65,9)" fg:x="24351" fg:w="1200"/><text x="82.8462%" y="127.50">libs..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a750 (4 samples, 0.01%)</title><rect x="86.6529%" y="101" width="0.0136%" height="15" fill="rgb(235,49,36)" fg:x="25547" fg:w="4"/><text x="86.9029%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59238 (3 samples, 0.01%)</title><rect x="86.6664%" y="117" width="0.0102%" height="15" fill="rgb(225,32,20)" fg:x="25551" fg:w="3"/><text x="86.9164%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59260 (3 samples, 0.01%)</title><rect x="86.6766%" y="117" width="0.0102%" height="15" fill="rgb(215,141,46)" fg:x="25554" fg:w="3"/><text x="86.9266%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59264 (3 samples, 0.01%)</title><rect x="86.6868%" y="117" width="0.0102%" height="15" fill="rgb(250,160,47)" fg:x="25557" fg:w="3"/><text x="86.9368%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59269 (3 samples, 0.01%)</title><rect x="86.7038%" y="117" width="0.0102%" height="15" fill="rgb(216,222,40)" fg:x="25562" fg:w="3"/><text x="86.9538%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (1,659 samples, 5.63%)</title><rect x="81.0969%" y="133" width="5.6272%" height="15" fill="rgb(234,217,39)" fg:x="23909" fg:w="1659"/><text x="81.3469%" y="143.50">dateo_f..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a653 (3 samples, 0.01%)</title><rect x="86.7139%" y="117" width="0.0102%" height="15" fill="rgb(207,178,40)" fg:x="25565" fg:w="3"/><text x="86.9639%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59100 (11 samples, 0.04%)</title><rect x="86.7241%" y="133" width="0.0373%" height="15" fill="rgb(221,136,13)" fg:x="25568" fg:w="11"/><text x="86.9741%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1,744 samples, 5.92%)</title><rect x="80.8527%" y="149" width="5.9155%" height="15" fill="rgb(249,199,10)" fg:x="23837" fg:w="1744"/><text x="81.1027%" y="159.50">dateo_fu..</text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (4 samples, 0.01%)</title><rect x="86.7682%" y="149" width="0.0136%" height="15" fill="rgb(249,222,13)" fg:x="25581" fg:w="4"/><text x="87.0182%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57350 (18 samples, 0.06%)</title><rect x="86.7818%" y="149" width="0.0611%" height="15" fill="rgb(244,185,38)" fg:x="25585" fg:w="18"/><text x="87.0318%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (9 samples, 0.03%)</title><rect x="86.8462%" y="149" width="0.0305%" height="15" fill="rgb(236,202,9)" fg:x="25604" fg:w="9"/><text x="87.0962%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573a0 (5 samples, 0.02%)</title><rect x="86.8937%" y="149" width="0.0170%" height="15" fill="rgb(250,229,37)" fg:x="25618" fg:w="5"/><text x="87.1437%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573b2 (3 samples, 0.01%)</title><rect x="86.9107%" y="149" width="0.0102%" height="15" fill="rgb(206,174,23)" fg:x="25623" fg:w="3"/><text x="87.1607%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (6 samples, 0.02%)</title><rect x="86.9242%" y="149" width="0.0204%" height="15" fill="rgb(211,33,43)" fg:x="25627" fg:w="6"/><text x="87.1742%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (5 samples, 0.02%)</title><rect x="86.9480%" y="149" width="0.0170%" height="15" fill="rgb(245,58,50)" fg:x="25634" fg:w="5"/><text x="87.1980%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (12 samples, 0.04%)</title><rect x="86.9649%" y="149" width="0.0407%" height="15" fill="rgb(244,68,36)" fg:x="25639" fg:w="12"/><text x="87.2149%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (92 samples, 0.31%)</title><rect x="87.0056%" y="149" width="0.3121%" height="15" fill="rgb(232,229,15)" fg:x="25651" fg:w="92"/><text x="87.2556%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (8 samples, 0.03%)</title><rect x="87.3177%" y="149" width="0.0271%" height="15" fill="rgb(254,30,23)" fg:x="25743" fg:w="8"/><text x="87.5677%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (5 samples, 0.02%)</title><rect x="87.3448%" y="149" width="0.0170%" height="15" fill="rgb(235,160,14)" fg:x="25751" fg:w="5"/><text x="87.5948%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (20 samples, 0.07%)</title><rect x="87.3618%" y="149" width="0.0678%" height="15" fill="rgb(212,155,44)" fg:x="25756" fg:w="20"/><text x="87.6118%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (4 samples, 0.01%)</title><rect x="87.4296%" y="149" width="0.0136%" height="15" fill="rgb(226,2,50)" fg:x="25776" fg:w="4"/><text x="87.6796%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57414 (6 samples, 0.02%)</title><rect x="87.4432%" y="149" width="0.0204%" height="15" fill="rgb(234,177,6)" fg:x="25780" fg:w="6"/><text x="87.6932%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (9 samples, 0.03%)</title><rect x="87.4635%" y="149" width="0.0305%" height="15" fill="rgb(217,24,9)" fg:x="25786" fg:w="9"/><text x="87.7135%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5742b (6 samples, 0.02%)</title><rect x="87.4941%" y="149" width="0.0204%" height="15" fill="rgb(220,13,46)" fg:x="25795" fg:w="6"/><text x="87.7441%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (4 samples, 0.01%)</title><rect x="87.5144%" y="149" width="0.0136%" height="15" fill="rgb(239,221,27)" fg:x="25801" fg:w="4"/><text x="87.7644%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57442 (4 samples, 0.01%)</title><rect x="87.5348%" y="149" width="0.0136%" height="15" fill="rgb(222,198,25)" fg:x="25807" fg:w="4"/><text x="87.7848%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (7 samples, 0.02%)</title><rect x="87.5483%" y="149" width="0.0237%" height="15" fill="rgb(211,99,13)" fg:x="25811" fg:w="7"/><text x="87.7983%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (6 samples, 0.02%)</title><rect x="87.5721%" y="149" width="0.0204%" height="15" fill="rgb(232,111,31)" fg:x="25818" fg:w="6"/><text x="87.8221%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (4 samples, 0.01%)</title><rect x="87.5924%" y="149" width="0.0136%" height="15" fill="rgb(245,82,37)" fg:x="25824" fg:w="4"/><text x="87.8424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5748f (3 samples, 0.01%)</title><rect x="87.6094%" y="149" width="0.0102%" height="15" fill="rgb(227,149,46)" fg:x="25829" fg:w="3"/><text x="87.8594%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (7 samples, 0.02%)</title><rect x="87.6196%" y="149" width="0.0237%" height="15" fill="rgb(218,36,50)" fg:x="25832" fg:w="7"/><text x="87.8696%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (9 samples, 0.03%)</title><rect x="87.6433%" y="149" width="0.0305%" height="15" fill="rgb(226,80,48)" fg:x="25839" fg:w="9"/><text x="87.8933%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (39 samples, 0.13%)</title><rect x="87.6806%" y="149" width="0.1323%" height="15" fill="rgb(238,224,15)" fg:x="25850" fg:w="39"/><text x="87.9306%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574e7 (4 samples, 0.01%)</title><rect x="87.8197%" y="149" width="0.0136%" height="15" fill="rgb(241,136,10)" fg:x="25891" fg:w="4"/><text x="88.0697%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (30 samples, 0.10%)</title><rect x="87.8333%" y="149" width="0.1018%" height="15" fill="rgb(208,32,45)" fg:x="25895" fg:w="30"/><text x="88.0833%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fc (8 samples, 0.03%)</title><rect x="87.9350%" y="149" width="0.0271%" height="15" fill="rgb(207,135,9)" fg:x="25925" fg:w="8"/><text x="88.1850%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57504 (6 samples, 0.02%)</title><rect x="87.9655%" y="149" width="0.0204%" height="15" fill="rgb(206,86,44)" fg:x="25934" fg:w="6"/><text x="88.2155%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (66 samples, 0.22%)</title><rect x="87.9859%" y="149" width="0.2239%" height="15" fill="rgb(245,177,15)" fg:x="25940" fg:w="66"/><text x="88.2359%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5755a (3 samples, 0.01%)</title><rect x="88.2131%" y="149" width="0.0102%" height="15" fill="rgb(206,64,50)" fg:x="26007" fg:w="3"/><text x="88.4631%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575a4 (3 samples, 0.01%)</title><rect x="88.2267%" y="149" width="0.0102%" height="15" fill="rgb(234,36,40)" fg:x="26011" fg:w="3"/><text x="88.4767%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575ae (3 samples, 0.01%)</title><rect x="88.2437%" y="149" width="0.0102%" height="15" fill="rgb(213,64,8)" fg:x="26016" fg:w="3"/><text x="88.4937%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b5 (16 samples, 0.05%)</title><rect x="88.2606%" y="149" width="0.0543%" height="15" fill="rgb(210,75,36)" fg:x="26021" fg:w="16"/><text x="88.5106%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575c6 (4 samples, 0.01%)</title><rect x="88.3285%" y="149" width="0.0136%" height="15" fill="rgb(229,88,21)" fg:x="26041" fg:w="4"/><text x="88.5785%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575d8 (3 samples, 0.01%)</title><rect x="88.3488%" y="149" width="0.0102%" height="15" fill="rgb(252,204,47)" fg:x="26047" fg:w="3"/><text x="88.5988%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fe (12 samples, 0.04%)</title><rect x="88.3726%" y="149" width="0.0407%" height="15" fill="rgb(208,77,27)" fg:x="26054" fg:w="12"/><text x="88.6226%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71705 (7 samples, 0.02%)</title><rect x="88.4167%" y="149" width="0.0237%" height="15" fill="rgb(221,76,26)" fg:x="26067" fg:w="7"/><text x="88.6667%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170f (6 samples, 0.02%)</title><rect x="88.4438%" y="149" width="0.0204%" height="15" fill="rgb(225,139,18)" fg:x="26075" fg:w="6"/><text x="88.6938%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7172f (13 samples, 0.04%)</title><rect x="88.4675%" y="149" width="0.0441%" height="15" fill="rgb(230,137,11)" fg:x="26082" fg:w="13"/><text x="88.7175%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7174f (12 samples, 0.04%)</title><rect x="88.5150%" y="149" width="0.0407%" height="15" fill="rgb(212,28,1)" fg:x="26096" fg:w="12"/><text x="88.7650%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e0 (11 samples, 0.04%)</title><rect x="88.5557%" y="149" width="0.0373%" height="15" fill="rgb(248,164,17)" fg:x="26108" fg:w="11"/><text x="88.8057%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717f2 (10 samples, 0.03%)</title><rect x="88.5964%" y="149" width="0.0339%" height="15" fill="rgb(222,171,42)" fg:x="26120" fg:w="10"/><text x="88.8464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (3 samples, 0.01%)</title><rect x="88.6304%" y="149" width="0.0102%" height="15" fill="rgb(243,84,45)" fg:x="26130" fg:w="3"/><text x="88.8804%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71802 (11 samples, 0.04%)</title><rect x="88.6405%" y="149" width="0.0373%" height="15" fill="rgb(252,49,23)" fg:x="26133" fg:w="11"/><text x="88.8905%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71816 (10 samples, 0.03%)</title><rect x="88.6778%" y="149" width="0.0339%" height="15" fill="rgb(215,19,7)" fg:x="26144" fg:w="10"/><text x="88.9278%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71826 (10 samples, 0.03%)</title><rect x="88.7151%" y="149" width="0.0339%" height="15" fill="rgb(238,81,41)" fg:x="26155" fg:w="10"/><text x="88.9651%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71835 (8 samples, 0.03%)</title><rect x="88.7525%" y="149" width="0.0271%" height="15" fill="rgb(210,199,37)" fg:x="26166" fg:w="8"/><text x="89.0025%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71851 (7 samples, 0.02%)</title><rect x="88.7830%" y="149" width="0.0237%" height="15" fill="rgb(244,192,49)" fg:x="26175" fg:w="7"/><text x="89.0330%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7186d (9 samples, 0.03%)</title><rect x="88.8067%" y="149" width="0.0305%" height="15" fill="rgb(226,211,11)" fg:x="26182" fg:w="9"/><text x="89.0567%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71870 (3 samples, 0.01%)</title><rect x="88.8373%" y="149" width="0.0102%" height="15" fill="rgb(236,162,54)" fg:x="26191" fg:w="3"/><text x="89.0873%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71879 (4 samples, 0.01%)</title><rect x="88.8542%" y="149" width="0.0136%" height="15" fill="rgb(220,229,9)" fg:x="26196" fg:w="4"/><text x="89.1042%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71887 (8 samples, 0.03%)</title><rect x="88.8746%" y="149" width="0.0271%" height="15" fill="rgb(250,87,22)" fg:x="26202" fg:w="8"/><text x="89.1246%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (300 samples, 1.02%)</title><rect x="88.9051%" y="149" width="1.0176%" height="15" fill="rgb(239,43,17)" fg:x="26211" fg:w="300"/><text x="89.1551%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (3 samples, 0.01%)</title><rect x="89.9227%" y="149" width="0.0102%" height="15" fill="rgb(231,177,25)" fg:x="26511" fg:w="3"/><text x="90.1727%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718d0 (8 samples, 0.03%)</title><rect x="89.9396%" y="149" width="0.0271%" height="15" fill="rgb(219,179,1)" fg:x="26516" fg:w="8"/><text x="90.1896%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718e5 (5 samples, 0.02%)</title><rect x="89.9702%" y="149" width="0.0170%" height="15" fill="rgb(238,219,53)" fg:x="26525" fg:w="5"/><text x="90.2202%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718f1 (10 samples, 0.03%)</title><rect x="89.9871%" y="149" width="0.0339%" height="15" fill="rgb(232,167,36)" fg:x="26530" fg:w="10"/><text x="90.2371%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (84 samples, 0.28%)</title><rect x="90.0346%" y="149" width="0.2849%" height="15" fill="rgb(244,19,51)" fg:x="26544" fg:w="84"/><text x="90.2846%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (84 samples, 0.28%)</title><rect x="90.0346%" y="133" width="0.2849%" height="15" fill="rgb(224,6,22)" fg:x="26544" fg:w="84"/><text x="90.2846%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71904 (5 samples, 0.02%)</title><rect x="90.3195%" y="149" width="0.0170%" height="15" fill="rgb(224,145,5)" fg:x="26628" fg:w="5"/><text x="90.5695%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71908 (3 samples, 0.01%)</title><rect x="90.3365%" y="149" width="0.0102%" height="15" fill="rgb(234,130,49)" fg:x="26633" fg:w="3"/><text x="90.5865%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7190f (14 samples, 0.05%)</title><rect x="90.3467%" y="149" width="0.0475%" height="15" fill="rgb(254,6,2)" fg:x="26636" fg:w="14"/><text x="90.5967%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7191d (3 samples, 0.01%)</title><rect x="90.4009%" y="149" width="0.0102%" height="15" fill="rgb(208,96,46)" fg:x="26652" fg:w="3"/><text x="90.6509%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71920 (8 samples, 0.03%)</title><rect x="90.4111%" y="149" width="0.0271%" height="15" fill="rgb(239,3,39)" fg:x="26655" fg:w="8"/><text x="90.6611%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71924 (5 samples, 0.02%)</title><rect x="90.4382%" y="149" width="0.0170%" height="15" fill="rgb(233,210,1)" fg:x="26663" fg:w="5"/><text x="90.6882%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71932 (5 samples, 0.02%)</title><rect x="90.4586%" y="149" width="0.0170%" height="15" fill="rgb(244,137,37)" fg:x="26669" fg:w="5"/><text x="90.7086%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71945 (4 samples, 0.01%)</title><rect x="90.4925%" y="149" width="0.0136%" height="15" fill="rgb(240,136,2)" fg:x="26679" fg:w="4"/><text x="90.7425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71959 (7 samples, 0.02%)</title><rect x="90.5129%" y="149" width="0.0237%" height="15" fill="rgb(239,18,37)" fg:x="26685" fg:w="7"/><text x="90.7629%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71962 (3 samples, 0.01%)</title><rect x="90.5434%" y="149" width="0.0102%" height="15" fill="rgb(218,185,22)" fg:x="26694" fg:w="3"/><text x="90.7934%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71969 (5 samples, 0.02%)</title><rect x="90.5536%" y="149" width="0.0170%" height="15" fill="rgb(225,218,4)" fg:x="26697" fg:w="5"/><text x="90.8036%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7196c (5 samples, 0.02%)</title><rect x="90.5705%" y="149" width="0.0170%" height="15" fill="rgb(230,182,32)" fg:x="26702" fg:w="5"/><text x="90.8205%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71989 (3 samples, 0.01%)</title><rect x="90.5943%" y="149" width="0.0102%" height="15" fill="rgb(242,56,43)" fg:x="26709" fg:w="3"/><text x="90.8443%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (19 samples, 0.06%)</title><rect x="90.6044%" y="149" width="0.0644%" height="15" fill="rgb(233,99,24)" fg:x="26712" fg:w="19"/><text x="90.8544%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71999 (4 samples, 0.01%)</title><rect x="90.6723%" y="149" width="0.0136%" height="15" fill="rgb(234,209,42)" fg:x="26732" fg:w="4"/><text x="90.9223%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (117 samples, 0.40%)</title><rect x="90.6858%" y="149" width="0.3969%" height="15" fill="rgb(227,7,12)" fg:x="26736" fg:w="117"/><text x="90.9358%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a2 (4 samples, 0.01%)</title><rect x="91.0827%" y="149" width="0.0136%" height="15" fill="rgb(245,203,43)" fg:x="26853" fg:w="4"/><text x="91.3327%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719a8 (8 samples, 0.03%)</title><rect x="91.0963%" y="149" width="0.0271%" height="15" fill="rgb(238,205,33)" fg:x="26857" fg:w="8"/><text x="91.3463%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719aa (8 samples, 0.03%)</title><rect x="91.1234%" y="149" width="0.0271%" height="15" fill="rgb(231,56,7)" fg:x="26865" fg:w="8"/><text x="91.3734%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (175 samples, 0.59%)</title><rect x="91.1505%" y="149" width="0.5936%" height="15" fill="rgb(244,186,29)" fg:x="26873" fg:w="175"/><text x="91.4005%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719f6 (3 samples, 0.01%)</title><rect x="91.7509%" y="149" width="0.0102%" height="15" fill="rgb(234,111,31)" fg:x="27050" fg:w="3"/><text x="92.0009%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (8 samples, 0.03%)</title><rect x="91.7611%" y="149" width="0.0271%" height="15" fill="rgb(241,149,10)" fg:x="27053" fg:w="8"/><text x="92.0111%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (6 samples, 0.02%)</title><rect x="91.7916%" y="149" width="0.0204%" height="15" fill="rgb(249,206,44)" fg:x="27062" fg:w="6"/><text x="92.0416%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cdd (11 samples, 0.04%)</title><rect x="91.8120%" y="149" width="0.0373%" height="15" fill="rgb(251,153,30)" fg:x="27068" fg:w="11"/><text x="92.0620%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cf1 (21 samples, 0.07%)</title><rect x="91.8527%" y="149" width="0.0712%" height="15" fill="rgb(239,152,38)" fg:x="27080" fg:w="21"/><text x="92.1027%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d04 (10 samples, 0.03%)</title><rect x="91.9307%" y="149" width="0.0339%" height="15" fill="rgb(249,139,47)" fg:x="27103" fg:w="10"/><text x="92.1807%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d0d (10 samples, 0.03%)</title><rect x="91.9646%" y="149" width="0.0339%" height="15" fill="rgb(244,64,35)" fg:x="27113" fg:w="10"/><text x="92.2146%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d19 (14 samples, 0.05%)</title><rect x="92.0019%" y="149" width="0.0475%" height="15" fill="rgb(216,46,15)" fg:x="27124" fg:w="14"/><text x="92.2519%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d1d (5 samples, 0.02%)</title><rect x="92.0494%" y="149" width="0.0170%" height="15" fill="rgb(250,74,19)" fg:x="27138" fg:w="5"/><text x="92.2994%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d1f (3 samples, 0.01%)</title><rect x="92.0663%" y="149" width="0.0102%" height="15" fill="rgb(249,42,33)" fg:x="27143" fg:w="3"/><text x="92.3163%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d28 (10 samples, 0.03%)</title><rect x="92.0765%" y="149" width="0.0339%" height="15" fill="rgb(242,149,17)" fg:x="27146" fg:w="10"/><text x="92.3265%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7a472 (13 samples, 0.04%)</title><rect x="92.1138%" y="149" width="0.0441%" height="15" fill="rgb(244,29,21)" fg:x="27157" fg:w="13"/><text x="92.3638%" y="159.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (19 samples, 0.06%)</title><rect x="92.1579%" y="149" width="0.0644%" height="15" fill="rgb(220,130,37)" fg:x="27170" fg:w="19"/><text x="92.4079%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (22 samples, 0.07%)</title><rect x="92.2224%" y="149" width="0.0746%" height="15" fill="rgb(211,67,2)" fg:x="27189" fg:w="22"/><text x="92.4724%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (7,845 samples, 26.61%)</title><rect x="65.9419%" y="165" width="26.6095%" height="15" fill="rgb(235,68,52)" fg:x="19441" fg:w="7845"/><text x="66.1919%" y="175.50">dateo_fun_remover`dateo_fun_remover::finder..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (75 samples, 0.25%)</title><rect x="92.2970%" y="149" width="0.2544%" height="15" fill="rgb(246,142,3)" fg:x="27211" fg:w="75"/><text x="92.5470%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c6e470 (201 samples, 0.68%)</title><rect x="92.5514%" y="165" width="0.6818%" height="15" fill="rgb(241,25,7)" fg:x="27286" fg:w="201"/><text x="92.8014%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (1,048 samples, 3.55%)</title><rect x="93.2332%" y="165" width="3.5547%" height="15" fill="rgb(242,119,39)" fg:x="27487" fg:w="1048"/><text x="93.4832%" y="175.50">libs..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$log (11 samples, 0.04%)</title><rect x="96.7879%" y="165" width="0.0373%" height="15" fill="rgb(241,98,45)" fg:x="28535" fg:w="11"/><text x="97.0379%" y="175.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (16 samples, 0.05%)</title><rect x="96.8252%" y="165" width="0.0543%" height="15" fill="rgb(254,28,30)" fg:x="28546" fg:w="16"/><text x="97.0752%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57350 (6 samples, 0.02%)</title><rect x="96.8795%" y="165" width="0.0204%" height="15" fill="rgb(241,142,54)" fg:x="28562" fg:w="6"/><text x="97.1295%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e2b (14 samples, 0.05%)</title><rect x="96.9066%" y="165" width="0.0475%" height="15" fill="rgb(222,85,15)" fg:x="28570" fg:w="14"/><text x="97.1566%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e3a (17 samples, 0.06%)</title><rect x="96.9575%" y="165" width="0.0577%" height="15" fill="rgb(210,85,47)" fg:x="28585" fg:w="17"/><text x="97.2075%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e45 (14 samples, 0.05%)</title><rect x="97.0185%" y="165" width="0.0475%" height="15" fill="rgb(224,206,25)" fg:x="28603" fg:w="14"/><text x="97.2685%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e57 (11 samples, 0.04%)</title><rect x="97.0694%" y="165" width="0.0373%" height="15" fill="rgb(243,201,19)" fg:x="28618" fg:w="11"/><text x="97.3194%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e60 (11 samples, 0.04%)</title><rect x="97.1067%" y="165" width="0.0373%" height="15" fill="rgb(236,59,4)" fg:x="28629" fg:w="11"/><text x="97.3567%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e70 (11 samples, 0.04%)</title><rect x="97.1508%" y="165" width="0.0373%" height="15" fill="rgb(254,179,45)" fg:x="28642" fg:w="11"/><text x="97.4008%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e79 (4 samples, 0.01%)</title><rect x="97.1915%" y="165" width="0.0136%" height="15" fill="rgb(226,14,10)" fg:x="28654" fg:w="4"/><text x="97.4415%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (10 samples, 0.03%)</title><rect x="97.2085%" y="165" width="0.0339%" height="15" fill="rgb(244,27,41)" fg:x="28659" fg:w="10"/><text x="97.4585%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fe (9 samples, 0.03%)</title><rect x="97.2424%" y="165" width="0.0305%" height="15" fill="rgb(235,35,32)" fg:x="28669" fg:w="9"/><text x="97.4924%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71705 (8 samples, 0.03%)</title><rect x="97.2729%" y="165" width="0.0271%" height="15" fill="rgb(218,68,31)" fg:x="28678" fg:w="8"/><text x="97.5229%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170f (11 samples, 0.04%)</title><rect x="97.3000%" y="165" width="0.0373%" height="15" fill="rgb(207,120,37)" fg:x="28686" fg:w="11"/><text x="97.5500%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7172f (10 samples, 0.03%)</title><rect x="97.3374%" y="165" width="0.0339%" height="15" fill="rgb(227,98,0)" fg:x="28697" fg:w="10"/><text x="97.5874%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7174f (8 samples, 0.03%)</title><rect x="97.3747%" y="165" width="0.0271%" height="15" fill="rgb(207,7,3)" fg:x="28708" fg:w="8"/><text x="97.6247%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e0 (7 samples, 0.02%)</title><rect x="97.4052%" y="165" width="0.0237%" height="15" fill="rgb(206,98,19)" fg:x="28717" fg:w="7"/><text x="97.6552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717f2 (6 samples, 0.02%)</title><rect x="97.4323%" y="165" width="0.0204%" height="15" fill="rgb(217,5,26)" fg:x="28725" fg:w="6"/><text x="97.6823%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (5 samples, 0.02%)</title><rect x="97.4527%" y="165" width="0.0170%" height="15" fill="rgb(235,190,38)" fg:x="28731" fg:w="5"/><text x="97.7027%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71826 (4 samples, 0.01%)</title><rect x="97.4798%" y="165" width="0.0136%" height="15" fill="rgb(247,86,24)" fg:x="28739" fg:w="4"/><text x="97.7298%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7182d (4 samples, 0.01%)</title><rect x="97.4934%" y="165" width="0.0136%" height="15" fill="rgb(205,101,16)" fg:x="28743" fg:w="4"/><text x="97.7434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71835 (6 samples, 0.02%)</title><rect x="97.5137%" y="165" width="0.0204%" height="15" fill="rgb(246,168,33)" fg:x="28749" fg:w="6"/><text x="97.7637%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71851 (5 samples, 0.02%)</title><rect x="97.5375%" y="165" width="0.0170%" height="15" fill="rgb(231,114,1)" fg:x="28756" fg:w="5"/><text x="97.7875%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7186d (5 samples, 0.02%)</title><rect x="97.5578%" y="165" width="0.0170%" height="15" fill="rgb(207,184,53)" fg:x="28762" fg:w="5"/><text x="97.8078%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71870 (4 samples, 0.01%)</title><rect x="97.5748%" y="165" width="0.0136%" height="15" fill="rgb(224,95,51)" fg:x="28767" fg:w="4"/><text x="97.8248%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71879 (5 samples, 0.02%)</title><rect x="97.5951%" y="165" width="0.0170%" height="15" fill="rgb(212,188,45)" fg:x="28773" fg:w="5"/><text x="97.8451%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71887 (7 samples, 0.02%)</title><rect x="97.6121%" y="165" width="0.0237%" height="15" fill="rgb(223,154,38)" fg:x="28778" fg:w="7"/><text x="97.8621%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (179 samples, 0.61%)</title><rect x="97.6358%" y="165" width="0.6072%" height="15" fill="rgb(251,22,52)" fg:x="28785" fg:w="179"/><text x="97.8858%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718d0 (4 samples, 0.01%)</title><rect x="98.2498%" y="165" width="0.0136%" height="15" fill="rgb(229,209,22)" fg:x="28966" fg:w="4"/><text x="98.4998%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718e5 (5 samples, 0.02%)</title><rect x="98.2735%" y="165" width="0.0170%" height="15" fill="rgb(234,138,34)" fg:x="28973" fg:w="5"/><text x="98.5235%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718f1 (11 samples, 0.04%)</title><rect x="98.2973%" y="165" width="0.0373%" height="15" fill="rgb(212,95,11)" fg:x="28980" fg:w="11"/><text x="98.5473%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (47 samples, 0.16%)</title><rect x="98.3414%" y="165" width="0.1594%" height="15" fill="rgb(240,179,47)" fg:x="28993" fg:w="47"/><text x="98.5914%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (45 samples, 0.15%)</title><rect x="98.3481%" y="149" width="0.1526%" height="15" fill="rgb(240,163,11)" fg:x="28995" fg:w="45"/><text x="98.5981%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7190f (4 samples, 0.01%)</title><rect x="98.5110%" y="165" width="0.0136%" height="15" fill="rgb(236,37,12)" fg:x="29043" fg:w="4"/><text x="98.7610%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71934 (4 samples, 0.01%)</title><rect x="98.5483%" y="165" width="0.0136%" height="15" fill="rgb(232,164,16)" fg:x="29054" fg:w="4"/><text x="98.7983%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71947 (5 samples, 0.02%)</title><rect x="98.5686%" y="165" width="0.0170%" height="15" fill="rgb(244,205,15)" fg:x="29060" fg:w="5"/><text x="98.8186%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71959 (3 samples, 0.01%)</title><rect x="98.5924%" y="165" width="0.0102%" height="15" fill="rgb(223,117,47)" fg:x="29067" fg:w="3"/><text x="98.8424%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71969 (3 samples, 0.01%)</title><rect x="98.6127%" y="165" width="0.0102%" height="15" fill="rgb(244,107,35)" fg:x="29073" fg:w="3"/><text x="98.8627%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (49 samples, 0.17%)</title><rect x="98.6432%" y="165" width="0.1662%" height="15" fill="rgb(205,140,8)" fg:x="29082" fg:w="49"/><text x="98.8932%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199b (3 samples, 0.01%)</title><rect x="98.8162%" y="165" width="0.0102%" height="15" fill="rgb(228,84,46)" fg:x="29133" fg:w="3"/><text x="99.0662%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (40 samples, 0.14%)</title><rect x="98.8264%" y="165" width="0.1357%" height="15" fill="rgb(254,188,9)" fg:x="29136" fg:w="40"/><text x="99.0764%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (61 samples, 0.21%)</title><rect x="98.9756%" y="165" width="0.2069%" height="15" fill="rgb(206,112,54)" fg:x="29180" fg:w="61"/><text x="99.2256%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719c0 (3 samples, 0.01%)</title><rect x="99.1826%" y="165" width="0.0102%" height="15" fill="rgb(216,84,49)" fg:x="29241" fg:w="3"/><text x="99.4326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (8 samples, 0.03%)</title><rect x="99.1927%" y="165" width="0.0271%" height="15" fill="rgb(214,194,35)" fg:x="29244" fg:w="8"/><text x="99.4427%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (8 samples, 0.03%)</title><rect x="99.2199%" y="165" width="0.0271%" height="15" fill="rgb(249,28,3)" fg:x="29252" fg:w="8"/><text x="99.4699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a47 (16 samples, 0.05%)</title><rect x="99.2538%" y="165" width="0.0543%" height="15" fill="rgb(222,56,52)" fg:x="29262" fg:w="16"/><text x="99.5038%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a48 (14 samples, 0.05%)</title><rect x="99.3081%" y="165" width="0.0475%" height="15" fill="rgb(245,217,50)" fg:x="29278" fg:w="14"/><text x="99.5581%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cdd (3 samples, 0.01%)</title><rect x="99.3589%" y="165" width="0.0102%" height="15" fill="rgb(213,201,24)" fg:x="29293" fg:w="3"/><text x="99.6089%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cf1 (13 samples, 0.04%)</title><rect x="99.3691%" y="165" width="0.0441%" height="15" fill="rgb(248,116,28)" fg:x="29296" fg:w="13"/><text x="99.6191%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d04 (8 samples, 0.03%)</title><rect x="99.4166%" y="165" width="0.0271%" height="15" fill="rgb(219,72,43)" fg:x="29310" fg:w="8"/><text x="99.6666%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d0d (5 samples, 0.02%)</title><rect x="99.4437%" y="165" width="0.0170%" height="15" fill="rgb(209,138,14)" fg:x="29318" fg:w="5"/><text x="99.6937%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d19 (3 samples, 0.01%)</title><rect x="99.4607%" y="165" width="0.0102%" height="15" fill="rgb(222,18,33)" fg:x="29323" fg:w="3"/><text x="99.7107%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d1d (3 samples, 0.01%)</title><rect x="99.4709%" y="165" width="0.0102%" height="15" fill="rgb(213,199,7)" fg:x="29326" fg:w="3"/><text x="99.7209%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d28 (3 samples, 0.01%)</title><rect x="99.4810%" y="165" width="0.0102%" height="15" fill="rgb(250,110,10)" fg:x="29329" fg:w="3"/><text x="99.7310%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7a472 (7 samples, 0.02%)</title><rect x="99.4912%" y="165" width="0.0237%" height="15" fill="rgb(248,123,6)" fg:x="29332" fg:w="7"/><text x="99.7412%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (6 samples, 0.02%)</title><rect x="99.5150%" y="165" width="0.0204%" height="15" fill="rgb(206,91,31)" fg:x="29339" fg:w="6"/><text x="99.7650%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (15 samples, 0.05%)</title><rect x="99.5353%" y="165" width="0.0509%" height="15" fill="rgb(211,154,13)" fg:x="29345" fg:w="15"/><text x="99.7853%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.04%)</title><rect x="99.5862%" y="165" width="0.0373%" height="15" fill="rgb(225,148,7)" fg:x="29360" fg:w="11"/><text x="99.8362%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (14,197 samples, 48.15%)</title><rect x="51.5399%" y="181" width="48.1548%" height="15" fill="rgb(220,160,43)" fg:x="15195" fg:w="14197"/><text x="51.7899%" y="191.50">dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (21 samples, 0.07%)</title><rect x="99.6235%" y="165" width="0.0712%" height="15" fill="rgb(213,52,39)" fg:x="29371" fg:w="21"/><text x="99.8735%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e2b (10 samples, 0.03%)</title><rect x="99.6947%" y="181" width="0.0339%" height="15" fill="rgb(243,137,7)" fg:x="29392" fg:w="10"/><text x="99.9447%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e3a (18 samples, 0.06%)</title><rect x="99.7320%" y="181" width="0.0611%" height="15" fill="rgb(230,79,13)" fg:x="29403" fg:w="18"/><text x="99.9820%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e45 (7 samples, 0.02%)</title><rect x="99.7999%" y="181" width="0.0237%" height="15" fill="rgb(247,105,23)" fg:x="29423" fg:w="7"/><text x="100.0499%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e57 (7 samples, 0.02%)</title><rect x="99.8270%" y="181" width="0.0237%" height="15" fill="rgb(223,179,41)" fg:x="29431" fg:w="7"/><text x="100.0770%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e60 (6 samples, 0.02%)</title><rect x="99.8508%" y="181" width="0.0204%" height="15" fill="rgb(218,9,34)" fg:x="29438" fg:w="6"/><text x="100.1008%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e6c (5 samples, 0.02%)</title><rect x="99.8745%" y="181" width="0.0170%" height="15" fill="rgb(222,106,8)" fg:x="29445" fg:w="5"/><text x="100.1245%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e70 (11 samples, 0.04%)</title><rect x="99.8915%" y="181" width="0.0373%" height="15" fill="rgb(211,220,0)" fg:x="29450" fg:w="11"/><text x="100.1415%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (3 samples, 0.01%)</title><rect x="99.9356%" y="181" width="0.0102%" height="15" fill="rgb(229,52,16)" fg:x="29463" fg:w="3"/><text x="100.1856%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a47 (10 samples, 0.03%)</title><rect x="99.9525%" y="181" width="0.0339%" height="15" fill="rgb(212,155,18)" fg:x="29468" fg:w="10"/><text x="100.2025%" y="191.50"></text></g><g><title>all (29,482 samples, 100%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(242,21,14)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="335.50"></text></g><g><title>dyld`start (29,482 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(222,19,48)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="319.50">dyld`start</text></g><g><title>dateo_fun_remover`main (29,482 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(232,45,27)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="303.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (29,482 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(249,103,42)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="287.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (29,482 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(246,81,33)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="271.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (29,482 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(252,33,42)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="255.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (29,482 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(209,212,41)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="239.50">dateo_fun_remover`dateo_fun_remover::main</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (29,482 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(207,154,6)" fg:x="0" fg:w="29482"/><text x="0.2500%" y="223.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (29,479 samples, 99.99%)</title><rect x="0.0102%" y="197" width="99.9898%" height="15" fill="rgb(223,64,47)" fg:x="3" fg:w="29479"/><text x="0.2602%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a48 (4 samples, 0.01%)</title><rect x="99.9864%" y="181" width="0.0136%" height="15" fill="rgb(211,161,38)" fg:x="29478" fg:w="4"/><text x="100.2364%" y="191.50"></text></g></svg></svg>