<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="358" onload="init(evt)" viewBox="0 0 1200 358" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="358" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="341.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="341.00"> </text><svg id="frames" x="10" width="1180" total_samples="121201"><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (17 samples, 0.01%)</title><rect x="0.0182%" y="165" width="0.0140%" height="15" fill="rgb(227,0,7)" fg:x="22" fg:w="17"/><text x="0.2682%" y="175.50"></text></g><g><title>dateo_fun_remover`core::ops::function::impls::_&lt;impl core::ops::function::FnMut&lt;A&gt; for &amp;mut F&gt;::call_mut (606 samples, 0.50%)</title><rect x="0.0446%" y="165" width="0.5000%" height="15" fill="rgb(217,0,24)" fg:x="54" fg:w="606"/><text x="0.2946%" y="175.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (21 samples, 0.02%)</title><rect x="0.5272%" y="149" width="0.0173%" height="15" fill="rgb(221,193,54)" fg:x="639" fg:w="21"/><text x="0.7772%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (198 samples, 0.16%)</title><rect x="0.5487%" y="165" width="0.1634%" height="15" fill="rgb(248,212,6)" fg:x="665" fg:w="198"/><text x="0.7987%" y="175.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (14 samples, 0.01%)</title><rect x="1.3771%" y="133" width="0.0116%" height="15" fill="rgb(208,68,35)" fg:x="1669" fg:w="14"/><text x="1.6271%" y="143.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (20 samples, 0.02%)</title><rect x="1.3762%" y="149" width="0.0165%" height="15" fill="rgb(232,128,0)" fg:x="1668" fg:w="20"/><text x="1.6262%" y="159.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (28 samples, 0.02%)</title><rect x="3.0025%" y="133" width="0.0231%" height="15" fill="rgb(207,160,47)" fg:x="3639" fg:w="28"/><text x="3.2525%" y="143.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (102 samples, 0.08%)</title><rect x="17.1657%" y="85" width="0.0842%" height="15" fill="rgb(228,23,34)" fg:x="20805" fg:w="102"/><text x="17.4157%" y="95.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (12,372 samples, 10.21%)</title><rect x="17.2499%" y="85" width="10.2078%" height="15" fill="rgb(218,30,26)" fg:x="20907" fg:w="12372"/><text x="17.4999%" y="95.50">dateo_fun_remov..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (1,348 samples, 1.11%)</title><rect x="27.4577%" y="85" width="1.1122%" height="15" fill="rgb(220,122,19)" fg:x="33279" fg:w="1348"/><text x="27.7077%" y="95.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (38 samples, 0.03%)</title><rect x="28.5699%" y="85" width="0.0314%" height="15" fill="rgb(250,228,42)" fg:x="34627" fg:w="38"/><text x="28.8199%" y="95.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (18,097 samples, 14.93%)</title><rect x="13.9215%" y="101" width="14.9314%" height="15" fill="rgb(240,193,28)" fg:x="16873" fg:w="18097"/><text x="14.1715%" y="111.50">dateo_fun_remover`dateo..</text></g><g><title>libsystem_m.dylib`trunc (305 samples, 0.25%)</title><rect x="28.6012%" y="85" width="0.2516%" height="15" fill="rgb(216,20,37)" fg:x="34665" fg:w="305"/><text x="28.8512%" y="95.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (735 samples, 0.61%)</title><rect x="28.8529%" y="101" width="0.6064%" height="15" fill="rgb(206,188,39)" fg:x="34970" fg:w="735"/><text x="29.1029%" y="111.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (375 samples, 0.31%)</title><rect x="29.4593%" y="101" width="0.3094%" height="15" fill="rgb(217,207,13)" fg:x="35705" fg:w="375"/><text x="29.7093%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (27,029 samples, 22.30%)</title><rect x="7.4744%" y="117" width="22.3010%" height="15" fill="rgb(231,73,38)" fg:x="9059" fg:w="27029"/><text x="7.7244%" y="127.50">dateo_fun_remover`dateo_fun_remover..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (537 samples, 0.44%)</title><rect x="29.7753%" y="117" width="0.4431%" height="15" fill="rgb(225,20,46)" fg:x="36088" fg:w="537"/><text x="30.0253%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (22 samples, 0.02%)</title><rect x="30.2184%" y="117" width="0.0182%" height="15" fill="rgb(210,31,41)" fg:x="36625" fg:w="22"/><text x="30.4684%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (32,999 samples, 27.23%)</title><rect x="3.0256%" y="133" width="27.2267%" height="15" fill="rgb(221,200,47)" fg:x="3667" fg:w="32999"/><text x="3.2756%" y="143.50">dateo_fun_remover`dateo_fun_remover::finder:..</text></g><g><title>libsystem_m.dylib`trunc (19 samples, 0.02%)</title><rect x="30.2365%" y="117" width="0.0157%" height="15" fill="rgb(226,26,5)" fg:x="36647" fg:w="19"/><text x="30.4865%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (484 samples, 0.40%)</title><rect x="30.2522%" y="133" width="0.3993%" height="15" fill="rgb(249,33,26)" fg:x="36666" fg:w="484"/><text x="30.5022%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (35,523 samples, 29.31%)</title><rect x="1.3993%" y="149" width="29.3092%" height="15" fill="rgb(235,183,28)" fg:x="1696" fg:w="35523"/><text x="1.6493%" y="159.50">dateo_fun_remover`dateo_fun_remover::finder::at..</text></g><g><title>libsystem_m.dylib`trunc (69 samples, 0.06%)</title><rect x="30.6516%" y="133" width="0.0569%" height="15" fill="rgb(221,5,38)" fg:x="37150" fg:w="69"/><text x="30.9016%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::keep_funcs_with_mask::rec (343 samples, 0.28%)</title><rect x="30.9964%" y="85" width="0.2830%" height="15" fill="rgb(247,18,42)" fg:x="37568" fg:w="343"/><text x="31.2464%" y="95.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (87 samples, 0.07%)</title><rect x="31.2077%" y="69" width="0.0718%" height="15" fill="rgb(241,131,45)" fg:x="37824" fg:w="87"/><text x="31.4577%" y="79.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::keep_funcs_with_mask::rec (531 samples, 0.44%)</title><rect x="30.8512%" y="117" width="0.4381%" height="15" fill="rgb(249,31,29)" fg:x="37392" fg:w="531"/><text x="31.1012%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::keep_funcs_with_mask::rec (443 samples, 0.37%)</title><rect x="30.9238%" y="101" width="0.3655%" height="15" fill="rgb(225,111,53)" fg:x="37480" fg:w="443"/><text x="31.1738%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::keep_funcs_with_mask::rec (673 samples, 0.56%)</title><rect x="30.7489%" y="133" width="0.5553%" height="15" fill="rgb(238,160,17)" fg:x="37268" fg:w="673"/><text x="30.9989%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (18 samples, 0.01%)</title><rect x="31.2893%" y="117" width="0.0149%" height="15" fill="rgb(214,148,48)" fg:x="37923" fg:w="18"/><text x="31.5393%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::keep_funcs_with_mask::rec (726 samples, 0.60%)</title><rect x="30.7085%" y="149" width="0.5990%" height="15" fill="rgb(232,36,49)" fg:x="37219" fg:w="726"/><text x="30.9585%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (26 samples, 0.02%)</title><rect x="31.3075%" y="149" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="37945" fg:w="26"/><text x="31.5575%" y="159.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$memcpy (47 samples, 0.04%)</title><rect x="31.7250%" y="133" width="0.0388%" height="15" fill="rgb(229,88,8)" fg:x="38451" fg:w="47"/><text x="31.9750%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`madvise (86 samples, 0.07%)</title><rect x="83.5331%" y="101" width="0.0710%" height="15" fill="rgb(213,181,19)" fg:x="101243" fg:w="86"/><text x="83.7831%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (87 samples, 0.07%)</title><rect x="83.5331%" y="117" width="0.0718%" height="15" fill="rgb(254,191,54)" fg:x="101243" fg:w="87"/><text x="83.7831%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::slice::merge_sort (64,511 samples, 53.23%)</title><rect x="31.7720%" y="133" width="53.2265%" height="15" fill="rgb(241,83,37)" fg:x="38508" fg:w="64511"/><text x="32.0220%" y="143.50">dateo_fun_remover`alloc::slice::merge_sort</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,689 samples, 1.39%)</title><rect x="83.6049%" y="117" width="1.3936%" height="15" fill="rgb(233,36,39)" fg:x="101330" fg:w="1689"/><text x="83.8549%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (41 samples, 0.03%)</title><rect x="85.0009%" y="133" width="0.0338%" height="15" fill="rgb(226,3,54)" fg:x="103022" fg:w="41"/><text x="85.2509%" y="143.50"></text></g><g><title>dateo_fun_remover`itertools::Itertools::sorted_by (65,167 samples, 53.77%)</title><rect x="31.3289%" y="149" width="53.7677%" height="15" fill="rgb(245,192,40)" fg:x="37971" fg:w="65167"/><text x="31.5789%" y="159.50">dateo_fun_remover`itertools::Itertools::sorted_by</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (75 samples, 0.06%)</title><rect x="85.0348%" y="133" width="0.0619%" height="15" fill="rgb(238,167,29)" fg:x="103063" fg:w="75"/><text x="85.2848%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (222 samples, 0.18%)</title><rect x="85.0983%" y="149" width="0.1832%" height="15" fill="rgb(232,182,51)" fg:x="103140" fg:w="222"/><text x="85.3483%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`madvise (222 samples, 0.18%)</title><rect x="85.0983%" y="133" width="0.1832%" height="15" fill="rgb(231,60,39)" fg:x="103140" fg:w="222"/><text x="85.3483%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::simplify (102,503 samples, 84.57%)</title><rect x="0.7137%" y="165" width="84.5727%" height="15" fill="rgb(208,69,12)" fg:x="865" fg:w="102503"/><text x="0.9637%" y="175.50">dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::simplify</text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::insert (1,070 samples, 0.88%)</title><rect x="92.4159%" y="117" width="0.8828%" height="15" fill="rgb(235,93,37)" fg:x="112009" fg:w="1070"/><text x="92.6659%" y="127.50"></text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (8,319 samples, 6.86%)</title><rect x="86.5207%" y="133" width="6.8638%" height="15" fill="rgb(213,116,39)" fg:x="104864" fg:w="8319"/><text x="86.7707%" y="143.50">dateo_fun..</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (104 samples, 0.09%)</title><rect x="93.2987%" y="117" width="0.0858%" height="15" fill="rgb(222,207,29)" fg:x="113079" fg:w="104"/><text x="93.5487%" y="127.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (50 samples, 0.04%)</title><rect x="93.3862%" y="133" width="0.0413%" height="15" fill="rgb(206,96,30)" fg:x="113185" fg:w="50"/><text x="93.6362%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (50 samples, 0.04%)</title><rect x="93.3862%" y="117" width="0.0413%" height="15" fill="rgb(218,138,4)" fg:x="113185" fg:w="50"/><text x="93.6362%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;ahash::hash_map::AHashMap&lt;K,V&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (9,881 samples, 8.15%)</title><rect x="85.2864%" y="149" width="8.1526%" height="15" fill="rgb(250,191,14)" fg:x="103368" fg:w="9881"/><text x="85.5364%" y="159.50">dateo_fun_r..</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (14 samples, 0.01%)</title><rect x="93.4274%" y="133" width="0.0116%" height="15" fill="rgb(239,60,40)" fg:x="113235" fg:w="14"/><text x="93.6774%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects (9,895 samples, 8.16%)</title><rect x="85.2864%" y="165" width="8.1641%" height="15" fill="rgb(206,27,48)" fg:x="103368" fg:w="9895"/><text x="85.5364%" y="175.50">dateo_fun_r..</text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (14 samples, 0.01%)</title><rect x="93.4390%" y="149" width="0.0116%" height="15" fill="rgb(225,35,8)" fg:x="113249" fg:w="14"/><text x="93.6890%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (20 samples, 0.02%)</title><rect x="93.4505%" y="165" width="0.0165%" height="15" fill="rgb(250,213,24)" fg:x="113263" fg:w="20"/><text x="93.7005%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (17 samples, 0.01%)</title><rect x="93.4893%" y="117" width="0.0140%" height="15" fill="rgb(247,123,22)" fg:x="113310" fg:w="17"/><text x="93.7393%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (36 samples, 0.03%)</title><rect x="93.4745%" y="165" width="0.0297%" height="15" fill="rgb(231,138,38)" fg:x="113292" fg:w="36"/><text x="93.7245%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (25 samples, 0.02%)</title><rect x="93.4836%" y="149" width="0.0206%" height="15" fill="rgb(231,145,46)" fg:x="113303" fg:w="25"/><text x="93.7336%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (18 samples, 0.01%)</title><rect x="93.4893%" y="133" width="0.0149%" height="15" fill="rgb(251,118,11)" fg:x="113310" fg:w="18"/><text x="93.7393%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::math::root (13 samples, 0.01%)</title><rect x="94.3004%" y="133" width="0.0107%" height="15" fill="rgb(217,147,25)" fg:x="114293" fg:w="13"/><text x="94.5504%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (49 samples, 0.04%)</title><rect x="94.3128%" y="133" width="0.0404%" height="15" fill="rgb(247,81,37)" fg:x="114308" fg:w="49"/><text x="94.5628%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (556 samples, 0.46%)</title><rect x="93.8953%" y="149" width="0.4587%" height="15" fill="rgb(209,12,38)" fg:x="113802" fg:w="556"/><text x="94.1453%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,198 samples, 0.99%)</title><rect x="94.3606%" y="149" width="0.9884%" height="15" fill="rgb(227,1,9)" fg:x="114366" fg:w="1198"/><text x="94.6106%" y="159.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (17 samples, 0.01%)</title><rect x="95.3655%" y="149" width="0.0140%" height="15" fill="rgb(248,47,43)" fg:x="115584" fg:w="17"/><text x="95.6155%" y="159.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (25 samples, 0.02%)</title><rect x="95.3862%" y="149" width="0.0206%" height="15" fill="rgb(221,10,30)" fg:x="115609" fg:w="25"/><text x="95.6362%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (31 samples, 0.03%)</title><rect x="95.4266%" y="117" width="0.0256%" height="15" fill="rgb(210,229,1)" fg:x="115658" fg:w="31"/><text x="95.6766%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (52 samples, 0.04%)</title><rect x="95.4217%" y="133" width="0.0429%" height="15" fill="rgb(222,148,37)" fg:x="115652" fg:w="52"/><text x="95.6717%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (76 samples, 0.06%)</title><rect x="95.4076%" y="149" width="0.0627%" height="15" fill="rgb(234,67,33)" fg:x="115635" fg:w="76"/><text x="95.6576%" y="159.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (17 samples, 0.01%)</title><rect x="96.6271%" y="101" width="0.0140%" height="15" fill="rgb(247,98,35)" fg:x="117113" fg:w="17"/><text x="96.8771%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (472 samples, 0.39%)</title><rect x="96.6411%" y="101" width="0.3894%" height="15" fill="rgb(247,138,52)" fg:x="117130" fg:w="472"/><text x="96.8911%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (40 samples, 0.03%)</title><rect x="97.0306%" y="101" width="0.0330%" height="15" fill="rgb(213,79,30)" fg:x="117602" fg:w="40"/><text x="97.2806%" y="111.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,101 samples, 0.91%)</title><rect x="96.1906%" y="117" width="0.9084%" height="15" fill="rgb(246,177,23)" fg:x="116584" fg:w="1101"/><text x="96.4406%" y="127.50"></text></g><g><title>libsystem_m.dylib`trunc (43 samples, 0.04%)</title><rect x="97.0636%" y="101" width="0.0355%" height="15" fill="rgb(230,62,27)" fg:x="117642" fg:w="43"/><text x="97.3136%" y="111.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (47 samples, 0.04%)</title><rect x="97.1015%" y="117" width="0.0388%" height="15" fill="rgb(216,154,8)" fg:x="117688" fg:w="47"/><text x="97.3515%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (109 samples, 0.09%)</title><rect x="97.1815%" y="117" width="0.0899%" height="15" fill="rgb(244,35,45)" fg:x="117785" fg:w="109"/><text x="97.4315%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (32 samples, 0.03%)</title><rect x="97.2806%" y="117" width="0.0264%" height="15" fill="rgb(251,115,12)" fg:x="117905" fg:w="32"/><text x="97.5306%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (28 samples, 0.02%)</title><rect x="97.3787%" y="117" width="0.0231%" height="15" fill="rgb(240,54,50)" fg:x="118024" fg:w="28"/><text x="97.6287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (24 samples, 0.02%)</title><rect x="97.4101%" y="117" width="0.0198%" height="15" fill="rgb(233,84,52)" fg:x="118062" fg:w="24"/><text x="97.6601%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (74 samples, 0.06%)</title><rect x="97.4406%" y="117" width="0.0611%" height="15" fill="rgb(207,117,47)" fg:x="118099" fg:w="74"/><text x="97.6906%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,261 samples, 1.87%)</title><rect x="95.6626%" y="133" width="1.8655%" height="15" fill="rgb(249,43,39)" fg:x="115944" fg:w="2261"/><text x="95.9126%" y="143.50">d..</text></g><g><title>libsystem_malloc.dylib`0x7ff806f58004 (85 samples, 0.07%)</title><rect x="97.6659%" y="101" width="0.0701%" height="15" fill="rgb(209,38,44)" fg:x="118372" fg:w="85"/><text x="97.9159%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f581cb (71 samples, 0.06%)</title><rect x="97.8069%" y="69" width="0.0586%" height="15" fill="rgb(236,212,23)" fg:x="118543" fg:w="71"/><text x="98.0569%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (27 samples, 0.02%)</title><rect x="97.8952%" y="53" width="0.0223%" height="15" fill="rgb(242,79,21)" fg:x="118650" fg:w="27"/><text x="98.1452%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (22 samples, 0.02%)</title><rect x="97.9200%" y="53" width="0.0182%" height="15" fill="rgb(211,96,35)" fg:x="118680" fg:w="22"/><text x="98.1700%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (24 samples, 0.02%)</title><rect x="97.9744%" y="53" width="0.0198%" height="15" fill="rgb(253,215,40)" fg:x="118746" fg:w="24"/><text x="98.2244%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (25 samples, 0.02%)</title><rect x="98.0050%" y="53" width="0.0206%" height="15" fill="rgb(211,81,21)" fg:x="118783" fg:w="25"/><text x="98.2550%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a852 (185 samples, 0.15%)</title><rect x="97.8845%" y="69" width="0.1526%" height="15" fill="rgb(208,190,38)" fg:x="118637" fg:w="185"/><text x="98.1345%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (42 samples, 0.03%)</title><rect x="98.0776%" y="53" width="0.0347%" height="15" fill="rgb(235,213,38)" fg:x="118871" fg:w="42"/><text x="98.3276%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (17 samples, 0.01%)</title><rect x="98.1254%" y="53" width="0.0140%" height="15" fill="rgb(237,122,38)" fg:x="118929" fg:w="17"/><text x="98.3754%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (15 samples, 0.01%)</title><rect x="98.1271%" y="37" width="0.0124%" height="15" fill="rgb(244,218,35)" fg:x="118931" fg:w="15"/><text x="98.3771%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (19 samples, 0.02%)</title><rect x="98.1568%" y="53" width="0.0157%" height="15" fill="rgb(240,68,47)" fg:x="118967" fg:w="19"/><text x="98.4068%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (42 samples, 0.03%)</title><rect x="98.1749%" y="53" width="0.0347%" height="15" fill="rgb(210,16,53)" fg:x="118989" fg:w="42"/><text x="98.4249%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a87c (209 samples, 0.17%)</title><rect x="98.0512%" y="69" width="0.1724%" height="15" fill="rgb(235,124,12)" fg:x="118839" fg:w="209"/><text x="98.3012%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (579 samples, 0.48%)</title><rect x="97.7690%" y="85" width="0.4777%" height="15" fill="rgb(224,169,11)" fg:x="118497" fg:w="579"/><text x="98.0190%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (604 samples, 0.50%)</title><rect x="97.7591%" y="101" width="0.4983%" height="15" fill="rgb(250,166,2)" fg:x="118485" fg:w="604"/><text x="98.0091%" y="111.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (823 samples, 0.68%)</title><rect x="97.5850%" y="117" width="0.6790%" height="15" fill="rgb(242,216,29)" fg:x="118274" fg:w="823"/><text x="97.8350%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (881 samples, 0.73%)</title><rect x="97.5446%" y="133" width="0.7269%" height="15" fill="rgb(230,116,27)" fg:x="118225" fg:w="881"/><text x="97.7946%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (51 samples, 0.04%)</title><rect x="98.3036%" y="133" width="0.0421%" height="15" fill="rgb(228,99,48)" fg:x="119145" fg:w="51"/><text x="98.5536%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (20 samples, 0.02%)</title><rect x="98.3862%" y="133" width="0.0165%" height="15" fill="rgb(253,11,6)" fg:x="119245" fg:w="20"/><text x="98.6362%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (25 samples, 0.02%)</title><rect x="98.4183%" y="133" width="0.0206%" height="15" fill="rgb(247,143,39)" fg:x="119284" fg:w="25"/><text x="98.6683%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (164 samples, 0.14%)</title><rect x="98.5215%" y="133" width="0.1353%" height="15" fill="rgb(236,97,10)" fg:x="119409" fg:w="164"/><text x="98.7715%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (45 samples, 0.04%)</title><rect x="98.6815%" y="133" width="0.0371%" height="15" fill="rgb(233,208,19)" fg:x="119603" fg:w="45"/><text x="98.9315%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (44 samples, 0.04%)</title><rect x="98.6824%" y="117" width="0.0363%" height="15" fill="rgb(216,164,2)" fg:x="119604" fg:w="44"/><text x="98.9324%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (25 samples, 0.02%)</title><rect x="98.7484%" y="133" width="0.0206%" height="15" fill="rgb(220,129,5)" fg:x="119684" fg:w="25"/><text x="98.9984%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (78 samples, 0.06%)</title><rect x="98.7748%" y="133" width="0.0644%" height="15" fill="rgb(242,17,10)" fg:x="119716" fg:w="78"/><text x="99.0248%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (84 samples, 0.07%)</title><rect x="98.8498%" y="133" width="0.0693%" height="15" fill="rgb(242,107,0)" fg:x="119807" fg:w="84"/><text x="99.0998%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.01%)</title><rect x="98.9720%" y="133" width="0.0107%" height="15" fill="rgb(251,28,31)" fg:x="119955" fg:w="13"/><text x="99.2220%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (4,313 samples, 3.56%)</title><rect x="95.4703%" y="149" width="3.5586%" height="15" fill="rgb(233,223,10)" fg:x="115711" fg:w="4313"/><text x="95.7203%" y="159.50">date..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (56 samples, 0.05%)</title><rect x="98.9827%" y="133" width="0.0462%" height="15" fill="rgb(215,21,27)" fg:x="119968" fg:w="56"/><text x="99.2327%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c6e470 (80 samples, 0.07%)</title><rect x="99.0289%" y="149" width="0.0660%" height="15" fill="rgb(232,23,21)" fg:x="120024" fg:w="80"/><text x="99.2789%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (538 samples, 0.44%)</title><rect x="99.0949%" y="149" width="0.4439%" height="15" fill="rgb(244,5,23)" fg:x="120104" fg:w="538"/><text x="99.3449%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (71 samples, 0.06%)</title><rect x="99.6394%" y="149" width="0.0586%" height="15" fill="rgb(226,81,46)" fg:x="120764" fg:w="71"/><text x="99.8894%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (27 samples, 0.02%)</title><rect x="99.7071%" y="149" width="0.0223%" height="15" fill="rgb(247,70,30)" fg:x="120846" fg:w="27"/><text x="99.9571%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (24 samples, 0.02%)</title><rect x="99.7096%" y="133" width="0.0198%" height="15" fill="rgb(212,68,19)" fg:x="120849" fg:w="24"/><text x="99.9596%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (23 samples, 0.02%)</title><rect x="99.7525%" y="149" width="0.0190%" height="15" fill="rgb(240,187,13)" fg:x="120901" fg:w="23"/><text x="100.0025%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (22 samples, 0.02%)</title><rect x="99.7715%" y="149" width="0.0182%" height="15" fill="rgb(223,113,26)" fg:x="120924" fg:w="22"/><text x="100.0215%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (34 samples, 0.03%)</title><rect x="99.7929%" y="149" width="0.0281%" height="15" fill="rgb(206,192,2)" fg:x="120950" fg:w="34"/><text x="100.0429%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (7,753 samples, 6.40%)</title><rect x="93.5042%" y="165" width="6.3968%" height="15" fill="rgb(241,108,4)" fg:x="113328" fg:w="7753"/><text x="93.7542%" y="175.50">dateo_fu..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.02%)</title><rect x="99.8820%" y="149" width="0.0190%" height="15" fill="rgb(247,173,49)" fg:x="121058" fg:w="23"/><text x="100.1320%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (59 samples, 0.05%)</title><rect x="99.9307%" y="165" width="0.0487%" height="15" fill="rgb(224,114,35)" fg:x="121117" fg:w="59"/><text x="100.1807%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (59 samples, 0.05%)</title><rect x="99.9307%" y="149" width="0.0487%" height="15" fill="rgb(245,159,27)" fg:x="121117" fg:w="59"/><text x="100.1807%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (59 samples, 0.05%)</title><rect x="99.9307%" y="133" width="0.0487%" height="15" fill="rgb(245,172,44)" fg:x="121117" fg:w="59"/><text x="100.1807%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (59 samples, 0.05%)</title><rect x="99.9307%" y="117" width="0.0487%" height="15" fill="rgb(236,23,11)" fg:x="121117" fg:w="59"/><text x="100.1807%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (121,192 samples, 99.99%)</title><rect x="0.0033%" y="181" width="99.9926%" height="15" fill="rgb(205,117,38)" fg:x="4" fg:w="121192"/><text x="0.2533%" y="191.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>all (121,201 samples, 100%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(237,72,25)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="319.50"></text></g><g><title>dyld`start (121,201 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(244,70,9)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="303.50">dyld`start</text></g><g><title>dateo_fun_remover`main (121,201 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(217,125,39)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="287.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (121,201 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(235,36,10)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="271.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (121,201 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(251,123,47)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="255.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (121,201 samples, 100.00%)</title><rect x="0.0000%" y="229" width="100.0000%" height="15" fill="rgb(221,13,13)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="239.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (121,201 samples, 100.00%)</title><rect x="0.0000%" y="213" width="100.0000%" height="15" fill="rgb(238,131,9)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="223.50">dateo_fun_remover`dateo_fun_remover::main</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (121,201 samples, 100.00%)</title><rect x="0.0000%" y="197" width="100.0000%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="121201"/><text x="0.2500%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g></svg></svg>