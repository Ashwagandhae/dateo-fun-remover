<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="454" onload="init(evt)" viewBox="0 0 1200 454" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="454" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="437.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="437.00"> </text><svg id="frames" x="10" width="1180" total_samples="131649"><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (19 samples, 0.01%)</title><rect x="2.8477%" y="261" width="0.0144%" height="15" fill="rgb(227,0,7)" fg:x="3749" fg:w="19"/><text x="3.0977%" y="271.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (84 samples, 0.06%)</title><rect x="2.8622%" y="261" width="0.0638%" height="15" fill="rgb(217,0,24)" fg:x="3768" fg:w="84"/><text x="3.1122%" y="271.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (106 samples, 0.08%)</title><rect x="2.9290%" y="261" width="0.0805%" height="15" fill="rgb(221,193,54)" fg:x="3856" fg:w="106"/><text x="3.1790%" y="271.50"></text></g><g><title>libsystem_kernel.dylib`madvise (120 samples, 0.09%)</title><rect x="3.0247%" y="213" width="0.0912%" height="15" fill="rgb(248,212,6)" fg:x="3982" fg:w="120"/><text x="3.2747%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (179 samples, 0.14%)</title><rect x="3.1166%" y="213" width="0.1360%" height="15" fill="rgb(208,68,35)" fg:x="4103" fg:w="179"/><text x="3.3666%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (179 samples, 0.14%)</title><rect x="3.1166%" y="197" width="0.1360%" height="15" fill="rgb(232,128,0)" fg:x="4103" fg:w="179"/><text x="3.3666%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (179 samples, 0.14%)</title><rect x="3.1166%" y="181" width="0.1360%" height="15" fill="rgb(207,160,47)" fg:x="4103" fg:w="179"/><text x="3.3666%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::string::String,alloc::vec::Vec&lt;dateo_fun_remover::finder::tree::Val&gt;&gt;&gt; (438 samples, 0.33%)</title><rect x="3.0247%" y="261" width="0.3327%" height="15" fill="rgb(228,23,34)" fg:x="3982" fg:w="438"/><text x="3.2747%" y="271.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (438 samples, 0.33%)</title><rect x="3.0247%" y="245" width="0.3327%" height="15" fill="rgb(218,30,26)" fg:x="3982" fg:w="438"/><text x="3.2747%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (438 samples, 0.33%)</title><rect x="3.0247%" y="229" width="0.3327%" height="15" fill="rgb(220,122,19)" fg:x="3982" fg:w="438"/><text x="3.2747%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f627a3 (138 samples, 0.10%)</title><rect x="3.2526%" y="213" width="0.1048%" height="15" fill="rgb(250,228,42)" fg:x="4282" fg:w="138"/><text x="3.5026%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (138 samples, 0.10%)</title><rect x="3.2526%" y="197" width="0.1048%" height="15" fill="rgb(240,193,28)" fg:x="4282" fg:w="138"/><text x="3.5026%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (138 samples, 0.10%)</title><rect x="3.2526%" y="181" width="0.1048%" height="15" fill="rgb(216,20,37)" fg:x="4282" fg:w="138"/><text x="3.5026%" y="191.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::partial_insertion_sort (419 samples, 0.32%)</title><rect x="20.2349%" y="245" width="0.3183%" height="15" fill="rgb(206,188,39)" fg:x="26639" fg:w="419"/><text x="20.4849%" y="255.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (32 samples, 0.02%)</title><rect x="45.2932%" y="53" width="0.0243%" height="15" fill="rgb(217,207,13)" fg:x="59628" fg:w="32"/><text x="45.5432%" y="63.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (21 samples, 0.02%)</title><rect x="45.3015%" y="37" width="0.0160%" height="15" fill="rgb(231,73,38)" fg:x="59639" fg:w="21"/><text x="45.5515%" y="47.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (149 samples, 0.11%)</title><rect x="45.2643%" y="69" width="0.1132%" height="15" fill="rgb(225,20,46)" fg:x="59590" fg:w="149"/><text x="45.5143%" y="79.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (79 samples, 0.06%)</title><rect x="45.3175%" y="53" width="0.0600%" height="15" fill="rgb(210,31,41)" fg:x="59660" fg:w="79"/><text x="45.5675%" y="63.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (565 samples, 0.43%)</title><rect x="45.1473%" y="85" width="0.4292%" height="15" fill="rgb(221,200,47)" fg:x="59436" fg:w="565"/><text x="45.3973%" y="95.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (262 samples, 0.20%)</title><rect x="45.3775%" y="69" width="0.1990%" height="15" fill="rgb(226,26,5)" fg:x="59739" fg:w="262"/><text x="45.6275%" y="79.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (1,504 samples, 1.14%)</title><rect x="44.8336%" y="101" width="1.1424%" height="15" fill="rgb(249,33,26)" fg:x="59023" fg:w="1504"/><text x="45.0836%" y="111.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (526 samples, 0.40%)</title><rect x="45.5765%" y="85" width="0.3995%" height="15" fill="rgb(235,183,28)" fg:x="60001" fg:w="526"/><text x="45.8265%" y="95.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (3,353 samples, 2.55%)</title><rect x="44.0900%" y="117" width="2.5469%" height="15" fill="rgb(221,5,38)" fg:x="58044" fg:w="3353"/><text x="44.3400%" y="127.50">da..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (870 samples, 0.66%)</title><rect x="45.9760%" y="101" width="0.6608%" height="15" fill="rgb(247,18,42)" fg:x="60527" fg:w="870"/><text x="46.2260%" y="111.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (6,112 samples, 4.64%)</title><rect x="42.8192%" y="133" width="4.6426%" height="15" fill="rgb(241,131,45)" fg:x="56371" fg:w="6112"/><text x="43.0692%" y="143.50">dateo..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (1,086 samples, 0.82%)</title><rect x="46.6369%" y="117" width="0.8249%" height="15" fill="rgb(249,31,29)" fg:x="61397" fg:w="1086"/><text x="46.8869%" y="127.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (9,473 samples, 7.20%)</title><rect x="41.0334%" y="149" width="7.1956%" height="15" fill="rgb(225,111,53)" fg:x="54020" fg:w="9473"/><text x="41.2834%" y="159.50">dateo_fun_..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (1,010 samples, 0.77%)</title><rect x="47.4618%" y="133" width="0.7672%" height="15" fill="rgb(238,160,17)" fg:x="62483" fg:w="1010"/><text x="47.7118%" y="143.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (13,043 samples, 9.91%)</title><rect x="38.8503%" y="165" width="9.9074%" height="15" fill="rgb(214,148,48)" fg:x="51146" fg:w="13043"/><text x="39.1003%" y="175.50">dateo_fun_remo..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (696 samples, 0.53%)</title><rect x="48.2290%" y="149" width="0.5287%" height="15" fill="rgb(232,36,49)" fg:x="63493" fg:w="696"/><text x="48.4790%" y="159.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (16,792 samples, 12.76%)</title><rect x="36.3034%" y="181" width="12.7551%" height="15" fill="rgb(209,103,24)" fg:x="47793" fg:w="16792"/><text x="36.5534%" y="191.50">dateo_fun_remover`c..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (396 samples, 0.30%)</title><rect x="48.7577%" y="165" width="0.3008%" height="15" fill="rgb(229,88,8)" fg:x="64189" fg:w="396"/><text x="49.0077%" y="175.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (20,942 samples, 15.91%)</title><rect x="33.2756%" y="197" width="15.9075%" height="15" fill="rgb(213,181,19)" fg:x="43807" fg:w="20942"/><text x="33.5256%" y="207.50">dateo_fun_remover`core::..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (164 samples, 0.12%)</title><rect x="49.0585%" y="181" width="0.1246%" height="15" fill="rgb(254,191,54)" fg:x="64585" fg:w="164"/><text x="49.3085%" y="191.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (25,686 samples, 19.51%)</title><rect x="29.7192%" y="213" width="19.5110%" height="15" fill="rgb(241,83,37)" fg:x="39125" fg:w="25686"/><text x="29.9692%" y="223.50">dateo_fun_remover`core::slice::..</text></g><g><title>dateo_fun_remover`core::slice::sort::shift_tail (62 samples, 0.05%)</title><rect x="49.1831%" y="197" width="0.0471%" height="15" fill="rgb(233,36,39)" fg:x="64749" fg:w="62"/><text x="49.4331%" y="207.50"></text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (31,151 samples, 23.66%)</title><rect x="25.5756%" y="229" width="23.6622%" height="15" fill="rgb(226,3,54)" fg:x="33670" fg:w="31151"/><text x="25.8256%" y="239.50">dateo_fun_remover`core::slice::sort::r..</text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (60,403 samples, 45.88%)</title><rect x="3.3574%" y="261" width="45.8819%" height="15" fill="rgb(245,192,40)" fg:x="4420" fg:w="60403"/><text x="3.6074%" y="271.50">dateo_fun_remover`core::slice::sort::recurse</text></g><g><title>dateo_fun_remover`core::slice::sort::recurse (37,765 samples, 28.69%)</title><rect x="20.5531%" y="245" width="28.6861%" height="15" fill="rgb(238,167,29)" fg:x="27058" fg:w="37765"/><text x="20.8031%" y="255.50">dateo_fun_remover`core::slice::sort::recurse</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (178 samples, 0.14%)</title><rect x="50.4592%" y="181" width="0.1352%" height="15" fill="rgb(232,182,51)" fg:x="66429" fg:w="178"/><text x="50.7092%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (23 samples, 0.02%)</title><rect x="50.5944%" y="181" width="0.0175%" height="15" fill="rgb(231,60,39)" fg:x="66607" fg:w="23"/><text x="50.8444%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (561 samples, 0.43%)</title><rect x="50.2085%" y="197" width="0.4261%" height="15" fill="rgb(208,69,12)" fg:x="66099" fg:w="561"/><text x="50.4585%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (30 samples, 0.02%)</title><rect x="50.6119%" y="181" width="0.0228%" height="15" fill="rgb(235,93,37)" fg:x="66630" fg:w="30"/><text x="50.8619%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (34 samples, 0.03%)</title><rect x="50.6346%" y="197" width="0.0258%" height="15" fill="rgb(213,116,39)" fg:x="66660" fg:w="34"/><text x="50.8846%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (55 samples, 0.04%)</title><rect x="50.6605%" y="197" width="0.0418%" height="15" fill="rgb(222,207,29)" fg:x="66694" fg:w="55"/><text x="50.9105%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (1,342 samples, 1.02%)</title><rect x="49.6882%" y="213" width="1.0194%" height="15" fill="rgb(206,96,30)" fg:x="65414" fg:w="1342"/><text x="49.9382%" y="223.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (52 samples, 0.04%)</title><rect x="50.7076%" y="213" width="0.0395%" height="15" fill="rgb(218,138,4)" fg:x="66756" fg:w="52"/><text x="50.9576%" y="223.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (35 samples, 0.03%)</title><rect x="50.7471%" y="213" width="0.0266%" height="15" fill="rgb(250,191,14)" fg:x="66808" fg:w="35"/><text x="50.9971%" y="223.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (1,844 samples, 1.40%)</title><rect x="49.3828%" y="229" width="1.4007%" height="15" fill="rgb(239,60,40)" fg:x="65012" fg:w="1844"/><text x="49.6328%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (22 samples, 0.02%)</title><rect x="50.7835%" y="229" width="0.0167%" height="15" fill="rgb(206,27,48)" fg:x="66856" fg:w="22"/><text x="51.0335%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval_with_func_mask::rec (1,998 samples, 1.52%)</title><rect x="49.2947%" y="245" width="1.5177%" height="15" fill="rgb(225,35,8)" fg:x="64896" fg:w="1998"/><text x="49.5447%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::simplify (2,067 samples, 1.57%)</title><rect x="49.2476%" y="261" width="1.5701%" height="15" fill="rgb(250,213,24)" fg:x="64834" fg:w="2067"/><text x="49.4976%" y="271.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (17 samples, 0.01%)</title><rect x="50.8276%" y="245" width="0.0129%" height="15" fill="rgb(247,123,22)" fg:x="66914" fg:w="17"/><text x="51.0776%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (41 samples, 0.03%)</title><rect x="50.8185%" y="261" width="0.0311%" height="15" fill="rgb(231,138,38)" fg:x="66902" fg:w="41"/><text x="51.0685%" y="271.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::get_vals_from_memo (14 samples, 0.01%)</title><rect x="50.8542%" y="245" width="0.0106%" height="15" fill="rgb(231,145,46)" fg:x="66949" fg:w="14"/><text x="51.1042%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::fill_map_rec (21 samples, 0.02%)</title><rect x="50.8496%" y="261" width="0.0160%" height="15" fill="rgb(251,118,11)" fg:x="66943" fg:w="21"/><text x="51.0996%" y="271.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (16 samples, 0.01%)</title><rect x="50.8762%" y="229" width="0.0122%" height="15" fill="rgb(217,147,25)" fg:x="66978" fg:w="16"/><text x="51.1262%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (38 samples, 0.03%)</title><rect x="50.8656%" y="261" width="0.0289%" height="15" fill="rgb(247,81,37)" fg:x="66964" fg:w="38"/><text x="51.1156%" y="271.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (25 samples, 0.02%)</title><rect x="50.8754%" y="245" width="0.0190%" height="15" fill="rgb(209,12,38)" fg:x="66977" fg:w="25"/><text x="51.1254%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b671 (74 samples, 0.06%)</title><rect x="67.4787%" y="165" width="0.0562%" height="15" fill="rgb(227,1,9)" fg:x="88835" fg:w="74"/><text x="67.7287%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ddf (74 samples, 0.06%)</title><rect x="67.4787%" y="149" width="0.0562%" height="15" fill="rgb(248,47,43)" fg:x="88835" fg:w="74"/><text x="67.7287%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (74 samples, 0.06%)</title><rect x="67.4787%" y="133" width="0.0562%" height="15" fill="rgb(221,10,30)" fg:x="88835" fg:w="74"/><text x="67.7287%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (74 samples, 0.06%)</title><rect x="67.4787%" y="117" width="0.0562%" height="15" fill="rgb(210,229,1)" fg:x="88835" fg:w="74"/><text x="67.7287%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b794 (56 samples, 0.04%)</title><rect x="67.5379%" y="165" width="0.0425%" height="15" fill="rgb(222,148,37)" fg:x="88913" fg:w="56"/><text x="67.7879%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (56 samples, 0.04%)</title><rect x="67.5379%" y="149" width="0.0425%" height="15" fill="rgb(234,67,33)" fg:x="88913" fg:w="56"/><text x="67.7879%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (56 samples, 0.04%)</title><rect x="67.5379%" y="133" width="0.0425%" height="15" fill="rgb(247,98,35)" fg:x="88913" fg:w="56"/><text x="67.7879%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7a6 (30 samples, 0.02%)</title><rect x="67.5805%" y="165" width="0.0228%" height="15" fill="rgb(247,138,52)" fg:x="88969" fg:w="30"/><text x="67.8305%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (30 samples, 0.02%)</title><rect x="67.5805%" y="149" width="0.0228%" height="15" fill="rgb(213,79,30)" fg:x="88969" fg:w="30"/><text x="67.8305%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (90 samples, 0.07%)</title><rect x="67.6048%" y="133" width="0.0684%" height="15" fill="rgb(246,177,23)" fg:x="89001" fg:w="90"/><text x="67.8548%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (90 samples, 0.07%)</title><rect x="67.6048%" y="117" width="0.0684%" height="15" fill="rgb(230,62,27)" fg:x="89001" fg:w="90"/><text x="67.8548%" y="127.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (90 samples, 0.07%)</title><rect x="67.6048%" y="101" width="0.0684%" height="15" fill="rgb(216,154,8)" fg:x="89001" fg:w="90"/><text x="67.8548%" y="111.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (260 samples, 0.20%)</title><rect x="67.4787%" y="229" width="0.1975%" height="15" fill="rgb(244,35,45)" fg:x="88835" fg:w="260"/><text x="67.7287%" y="239.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (260 samples, 0.20%)</title><rect x="67.4787%" y="213" width="0.1975%" height="15" fill="rgb(251,115,12)" fg:x="88835" fg:w="260"/><text x="67.7287%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (260 samples, 0.20%)</title><rect x="67.4787%" y="197" width="0.1975%" height="15" fill="rgb(240,54,50)" fg:x="88835" fg:w="260"/><text x="67.7287%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (260 samples, 0.20%)</title><rect x="67.4787%" y="181" width="0.1975%" height="15" fill="rgb(233,84,52)" fg:x="88835" fg:w="260"/><text x="67.7287%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7b3 (96 samples, 0.07%)</title><rect x="67.6032%" y="165" width="0.0729%" height="15" fill="rgb(207,117,47)" fg:x="88999" fg:w="96"/><text x="67.8532%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (96 samples, 0.07%)</title><rect x="67.6032%" y="149" width="0.0729%" height="15" fill="rgb(249,43,39)" fg:x="88999" fg:w="96"/><text x="67.8532%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::math::power (201 samples, 0.15%)</title><rect x="67.6762%" y="229" width="0.1527%" height="15" fill="rgb(209,38,44)" fg:x="89095" fg:w="201"/><text x="67.9262%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::math::root (249 samples, 0.19%)</title><rect x="67.8288%" y="229" width="0.1891%" height="15" fill="rgb(236,212,23)" fg:x="89296" fg:w="249"/><text x="68.0788%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (21 samples, 0.02%)</title><rect x="68.0180%" y="229" width="0.0160%" height="15" fill="rgb(242,79,21)" fg:x="89545" fg:w="21"/><text x="68.2680%" y="239.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (1,952 samples, 1.48%)</title><rect x="68.0339%" y="229" width="1.4827%" height="15" fill="rgb(211,96,35)" fg:x="89566" fg:w="1952"/><text x="68.2839%" y="239.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (39 samples, 0.03%)</title><rect x="69.5167%" y="229" width="0.0296%" height="15" fill="rgb(253,215,40)" fg:x="91518" fg:w="39"/><text x="69.7667%" y="239.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (13,326 samples, 10.12%)</title><rect x="59.4399%" y="245" width="10.1224%" height="15" fill="rgb(211,81,21)" fg:x="78252" fg:w="13326"/><text x="59.6899%" y="255.50">dateo_fun_remov..</text></g><g><title>libsystem_m.dylib`trunc (16 samples, 0.01%)</title><rect x="69.5501%" y="229" width="0.0122%" height="15" fill="rgb(208,190,38)" fg:x="91562" fg:w="16"/><text x="69.8001%" y="239.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (162 samples, 0.12%)</title><rect x="69.5622%" y="245" width="0.1231%" height="15" fill="rgb(235,213,38)" fg:x="91578" fg:w="162"/><text x="69.8122%" y="255.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (5,844 samples, 4.44%)</title><rect x="69.6853%" y="245" width="4.4391%" height="15" fill="rgb(237,122,38)" fg:x="91740" fg:w="5844"/><text x="69.9353%" y="255.50">dateo..</text></g><g><title>dateo_fun_remover`DYLD-STUB$$log (99 samples, 0.08%)</title><rect x="74.1244%" y="245" width="0.0752%" height="15" fill="rgb(244,218,35)" fg:x="97584" fg:w="99"/><text x="74.3744%" y="255.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$pow (104 samples, 0.08%)</title><rect x="74.1996%" y="245" width="0.0790%" height="15" fill="rgb(240,68,47)" fg:x="97683" fg:w="104"/><text x="74.4496%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b671 (15 samples, 0.01%)</title><rect x="74.2831%" y="181" width="0.0114%" height="15" fill="rgb(210,16,53)" fg:x="97793" fg:w="15"/><text x="74.5331%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ddf (15 samples, 0.01%)</title><rect x="74.2831%" y="165" width="0.0114%" height="15" fill="rgb(235,124,12)" fg:x="97793" fg:w="15"/><text x="74.5331%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (15 samples, 0.01%)</title><rect x="74.2831%" y="149" width="0.0114%" height="15" fill="rgb(224,169,11)" fg:x="97793" fg:w="15"/><text x="74.5331%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (15 samples, 0.01%)</title><rect x="74.2831%" y="133" width="0.0114%" height="15" fill="rgb(250,166,2)" fg:x="97793" fg:w="15"/><text x="74.5331%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b794 (18 samples, 0.01%)</title><rect x="74.2945%" y="181" width="0.0137%" height="15" fill="rgb(242,216,29)" fg:x="97808" fg:w="18"/><text x="74.5445%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`vm_copy (18 samples, 0.01%)</title><rect x="74.2945%" y="165" width="0.0137%" height="15" fill="rgb(230,116,27)" fg:x="97808" fg:w="18"/><text x="74.5445%" y="175.50"></text></g><g><title>libsystem_kernel.dylib`mach_msg2_trap (18 samples, 0.01%)</title><rect x="74.2945%" y="149" width="0.0137%" height="15" fill="rgb(228,99,48)" fg:x="97808" fg:w="18"/><text x="74.5445%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6268c (90 samples, 0.07%)</title><rect x="74.3158%" y="149" width="0.0684%" height="15" fill="rgb(253,11,6)" fg:x="97836" fg:w="90"/><text x="74.5658%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f63ce7 (90 samples, 0.07%)</title><rect x="74.3158%" y="133" width="0.0684%" height="15" fill="rgb(247,143,39)" fg:x="97836" fg:w="90"/><text x="74.5658%" y="143.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (90 samples, 0.07%)</title><rect x="74.3158%" y="117" width="0.0684%" height="15" fill="rgb(236,97,10)" fg:x="97836" fg:w="90"/><text x="74.5658%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (142 samples, 0.11%)</title><rect x="74.2816%" y="245" width="0.1079%" height="15" fill="rgb(233,208,19)" fg:x="97791" fg:w="142"/><text x="74.5316%" y="255.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (140 samples, 0.11%)</title><rect x="74.2831%" y="229" width="0.1063%" height="15" fill="rgb(216,164,2)" fg:x="97793" fg:w="140"/><text x="74.5331%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (140 samples, 0.11%)</title><rect x="74.2831%" y="213" width="0.1063%" height="15" fill="rgb(220,129,5)" fg:x="97793" fg:w="140"/><text x="74.5331%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (140 samples, 0.11%)</title><rect x="74.2831%" y="197" width="0.1063%" height="15" fill="rgb(242,17,10)" fg:x="97793" fg:w="140"/><text x="74.5331%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5b7b3 (100 samples, 0.08%)</title><rect x="74.3135%" y="181" width="0.0760%" height="15" fill="rgb(242,107,0)" fg:x="97833" fg:w="100"/><text x="74.5635%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f6ba5f (99 samples, 0.08%)</title><rect x="74.3143%" y="165" width="0.0752%" height="15" fill="rgb(251,28,31)" fg:x="97834" fg:w="99"/><text x="74.5643%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::math::power (19 samples, 0.01%)</title><rect x="74.3895%" y="245" width="0.0144%" height="15" fill="rgb(233,223,10)" fg:x="97933" fg:w="19"/><text x="74.6395%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::math::root (14 samples, 0.01%)</title><rect x="74.4039%" y="245" width="0.0106%" height="15" fill="rgb(215,21,27)" fg:x="97952" fg:w="14"/><text x="74.6539%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (36 samples, 0.03%)</title><rect x="74.4229%" y="245" width="0.0273%" height="15" fill="rgb(232,23,21)" fg:x="97977" fg:w="36"/><text x="74.6729%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (65 samples, 0.05%)</title><rect x="80.5954%" y="197" width="0.0494%" height="15" fill="rgb(244,5,23)" fg:x="106103" fg:w="65"/><text x="80.8454%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,135 samples, 1.62%)</title><rect x="79.0321%" y="213" width="1.6217%" height="15" fill="rgb(226,81,46)" fg:x="104045" fg:w="2135"/><text x="79.2821%" y="223.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (15 samples, 0.01%)</title><rect x="80.6539%" y="213" width="0.0114%" height="15" fill="rgb(247,70,30)" fg:x="106180" fg:w="15"/><text x="80.9039%" y="223.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (14 samples, 0.01%)</title><rect x="80.6653%" y="213" width="0.0106%" height="15" fill="rgb(212,68,19)" fg:x="106195" fg:w="14"/><text x="80.9153%" y="223.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (2,607 samples, 1.98%)</title><rect x="80.6759%" y="213" width="1.9803%" height="15" fill="rgb(240,187,13)" fg:x="106209" fg:w="2607"/><text x="80.9259%" y="223.50">d..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (226 samples, 0.17%)</title><rect x="82.6562%" y="213" width="0.1717%" height="15" fill="rgb(223,113,26)" fg:x="108816" fg:w="226"/><text x="82.9062%" y="223.50"></text></g><g><title>libsystem_m.dylib`trunc (434 samples, 0.33%)</title><rect x="82.8278%" y="213" width="0.3297%" height="15" fill="rgb(206,192,2)" fg:x="109042" fg:w="434"/><text x="83.0778%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57393 (31 samples, 0.02%)</title><rect x="83.1575%" y="213" width="0.0235%" height="15" fill="rgb(241,108,4)" fg:x="109476" fg:w="31"/><text x="83.4075%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57399 (39 samples, 0.03%)</title><rect x="83.1879%" y="213" width="0.0296%" height="15" fill="rgb(247,173,49)" fg:x="109516" fg:w="39"/><text x="83.4379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573a0 (36 samples, 0.03%)</title><rect x="83.2205%" y="213" width="0.0273%" height="15" fill="rgb(224,114,35)" fg:x="109559" fg:w="36"/><text x="83.4705%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573b2 (30 samples, 0.02%)</title><rect x="83.2517%" y="213" width="0.0228%" height="15" fill="rgb(245,159,27)" fg:x="109600" fg:w="30"/><text x="83.5017%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573ca (40 samples, 0.03%)</title><rect x="83.2760%" y="213" width="0.0304%" height="15" fill="rgb(245,172,44)" fg:x="109632" fg:w="40"/><text x="83.5260%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573d9 (57 samples, 0.04%)</title><rect x="83.3117%" y="213" width="0.0433%" height="15" fill="rgb(236,23,11)" fg:x="109679" fg:w="57"/><text x="83.5617%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573dd (139 samples, 0.11%)</title><rect x="83.3550%" y="213" width="0.1056%" height="15" fill="rgb(205,117,38)" fg:x="109736" fg:w="139"/><text x="83.6050%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573e7 (632 samples, 0.48%)</title><rect x="83.4613%" y="213" width="0.4801%" height="15" fill="rgb(237,72,25)" fg:x="109876" fg:w="632"/><text x="83.7113%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573eb (53 samples, 0.04%)</title><rect x="83.9414%" y="213" width="0.0403%" height="15" fill="rgb(244,70,9)" fg:x="110508" fg:w="53"/><text x="84.1914%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f573f8 (54 samples, 0.04%)</title><rect x="83.9816%" y="213" width="0.0410%" height="15" fill="rgb(217,125,39)" fg:x="110561" fg:w="54"/><text x="84.2316%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57407 (196 samples, 0.15%)</title><rect x="84.0242%" y="213" width="0.1489%" height="15" fill="rgb(235,36,10)" fg:x="110617" fg:w="196"/><text x="84.2742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5740a (35 samples, 0.03%)</title><rect x="84.1731%" y="213" width="0.0266%" height="15" fill="rgb(251,123,47)" fg:x="110813" fg:w="35"/><text x="84.4231%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57414 (49 samples, 0.04%)</title><rect x="84.1997%" y="213" width="0.0372%" height="15" fill="rgb(221,13,13)" fg:x="110848" fg:w="49"/><text x="84.4497%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5741b (133 samples, 0.10%)</title><rect x="84.2369%" y="213" width="0.1010%" height="15" fill="rgb(238,131,9)" fg:x="110897" fg:w="133"/><text x="84.4869%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5742b (39 samples, 0.03%)</title><rect x="84.3394%" y="213" width="0.0296%" height="15" fill="rgb(211,50,8)" fg:x="111032" fg:w="39"/><text x="84.5894%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57439 (43 samples, 0.03%)</title><rect x="84.3713%" y="213" width="0.0327%" height="15" fill="rgb(245,182,24)" fg:x="111074" fg:w="43"/><text x="84.6213%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57442 (15 samples, 0.01%)</title><rect x="84.4085%" y="213" width="0.0114%" height="15" fill="rgb(242,14,37)" fg:x="111123" fg:w="15"/><text x="84.6585%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57445 (28 samples, 0.02%)</title><rect x="84.4199%" y="213" width="0.0213%" height="15" fill="rgb(246,228,12)" fg:x="111138" fg:w="28"/><text x="84.6699%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57452 (37 samples, 0.03%)</title><rect x="84.4420%" y="213" width="0.0281%" height="15" fill="rgb(213,55,15)" fg:x="111167" fg:w="37"/><text x="84.6920%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57467 (42 samples, 0.03%)</title><rect x="84.4723%" y="213" width="0.0319%" height="15" fill="rgb(209,9,3)" fg:x="111207" fg:w="42"/><text x="84.7223%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57484 (43 samples, 0.03%)</title><rect x="84.5050%" y="213" width="0.0327%" height="15" fill="rgb(230,59,30)" fg:x="111250" fg:w="43"/><text x="84.7550%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57493 (32 samples, 0.02%)</title><rect x="84.5400%" y="213" width="0.0243%" height="15" fill="rgb(209,121,21)" fg:x="111296" fg:w="32"/><text x="84.7900%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574a4 (42 samples, 0.03%)</title><rect x="84.5650%" y="213" width="0.0319%" height="15" fill="rgb(220,109,13)" fg:x="111329" fg:w="42"/><text x="84.8150%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574c1 (26 samples, 0.02%)</title><rect x="84.6000%" y="213" width="0.0197%" height="15" fill="rgb(232,18,1)" fg:x="111375" fg:w="26"/><text x="84.8500%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ce (399 samples, 0.30%)</title><rect x="84.6212%" y="213" width="0.3031%" height="15" fill="rgb(215,41,42)" fg:x="111403" fg:w="399"/><text x="84.8712%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574d0 (20 samples, 0.02%)</title><rect x="84.9243%" y="213" width="0.0152%" height="15" fill="rgb(224,123,36)" fg:x="111802" fg:w="20"/><text x="85.1743%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574d9 (23 samples, 0.02%)</title><rect x="84.9395%" y="213" width="0.0175%" height="15" fill="rgb(240,125,3)" fg:x="111822" fg:w="23"/><text x="85.1895%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574e7 (17 samples, 0.01%)</title><rect x="84.9653%" y="213" width="0.0129%" height="15" fill="rgb(205,98,50)" fg:x="111856" fg:w="17"/><text x="85.2153%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574ef (97 samples, 0.07%)</title><rect x="84.9782%" y="213" width="0.0737%" height="15" fill="rgb(205,185,37)" fg:x="111873" fg:w="97"/><text x="85.2282%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fc (26 samples, 0.02%)</title><rect x="85.0519%" y="213" width="0.0197%" height="15" fill="rgb(238,207,15)" fg:x="111970" fg:w="26"/><text x="85.3019%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f574fe (21 samples, 0.02%)</title><rect x="85.0717%" y="213" width="0.0160%" height="15" fill="rgb(213,199,42)" fg:x="111996" fg:w="21"/><text x="85.3217%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57504 (15 samples, 0.01%)</title><rect x="85.0876%" y="213" width="0.0114%" height="15" fill="rgb(235,201,11)" fg:x="112017" fg:w="15"/><text x="85.3376%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57509 (378 samples, 0.29%)</title><rect x="85.0990%" y="213" width="0.2871%" height="15" fill="rgb(207,46,11)" fg:x="112032" fg:w="378"/><text x="85.3490%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5754a (28 samples, 0.02%)</title><rect x="85.3861%" y="213" width="0.0213%" height="15" fill="rgb(241,35,35)" fg:x="112410" fg:w="28"/><text x="85.6361%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5755a (18 samples, 0.01%)</title><rect x="85.4104%" y="213" width="0.0137%" height="15" fill="rgb(243,32,47)" fg:x="112442" fg:w="18"/><text x="85.6604%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57568 (25 samples, 0.02%)</title><rect x="85.4272%" y="213" width="0.0190%" height="15" fill="rgb(247,202,23)" fg:x="112464" fg:w="25"/><text x="85.6772%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575a4 (35 samples, 0.03%)</title><rect x="85.4461%" y="213" width="0.0266%" height="15" fill="rgb(219,102,11)" fg:x="112489" fg:w="35"/><text x="85.6961%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575ae (38 samples, 0.03%)</title><rect x="85.4773%" y="213" width="0.0289%" height="15" fill="rgb(243,110,44)" fg:x="112530" fg:w="38"/><text x="85.7273%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b9 (25 samples, 0.02%)</title><rect x="85.5145%" y="213" width="0.0190%" height="15" fill="rgb(222,74,54)" fg:x="112579" fg:w="25"/><text x="85.7645%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575c6 (22 samples, 0.02%)</title><rect x="85.5358%" y="213" width="0.0167%" height="15" fill="rgb(216,99,12)" fg:x="112607" fg:w="22"/><text x="85.7858%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575d8 (18 samples, 0.01%)</title><rect x="85.5555%" y="213" width="0.0137%" height="15" fill="rgb(226,22,26)" fg:x="112633" fg:w="18"/><text x="85.8055%" y="223.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (13,564 samples, 10.30%)</title><rect x="75.2812%" y="229" width="10.3032%" height="15" fill="rgb(217,163,10)" fg:x="99107" fg:w="13564"/><text x="75.5312%" y="239.50">dateo_fun_remov..</text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.02%)</title><rect x="85.5844%" y="229" width="0.0213%" height="15" fill="rgb(213,25,53)" fg:x="112671" fg:w="28"/><text x="85.8344%" y="239.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (100 samples, 0.08%)</title><rect x="85.6072%" y="229" width="0.0760%" height="15" fill="rgb(252,105,26)" fg:x="112701" fg:w="100"/><text x="85.8572%" y="239.50"></text></g><g><title>dateo_fun_remover`__rust_alloc (43 samples, 0.03%)</title><rect x="85.6831%" y="229" width="0.0327%" height="15" fill="rgb(220,39,43)" fg:x="112801" fg:w="43"/><text x="85.9331%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a852 (14 samples, 0.01%)</title><rect x="85.7530%" y="165" width="0.0106%" height="15" fill="rgb(229,68,48)" fg:x="112893" fg:w="14"/><text x="86.0030%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a87c (14 samples, 0.01%)</title><rect x="85.7675%" y="165" width="0.0106%" height="15" fill="rgb(252,8,32)" fg:x="112912" fg:w="14"/><text x="86.0175%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f5a698 (66 samples, 0.05%)</title><rect x="85.7371%" y="181" width="0.0501%" height="15" fill="rgb(223,20,43)" fg:x="112872" fg:w="66"/><text x="85.9871%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f59235 (68 samples, 0.05%)</title><rect x="85.7363%" y="197" width="0.0517%" height="15" fill="rgb(229,81,49)" fg:x="112871" fg:w="68"/><text x="85.9863%" y="207.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (92 samples, 0.07%)</title><rect x="85.7188%" y="213" width="0.0699%" height="15" fill="rgb(236,28,36)" fg:x="112848" fg:w="92"/><text x="85.9688%" y="223.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (97 samples, 0.07%)</title><rect x="85.7158%" y="229" width="0.0737%" height="15" fill="rgb(249,185,26)" fg:x="112844" fg:w="97"/><text x="85.9658%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (302 samples, 0.23%)</title><rect x="85.7895%" y="229" width="0.2294%" height="15" fill="rgb(249,174,33)" fg:x="112941" fg:w="302"/><text x="86.0395%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (43 samples, 0.03%)</title><rect x="86.0189%" y="229" width="0.0327%" height="15" fill="rgb(233,201,37)" fg:x="113243" fg:w="43"/><text x="86.2689%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57350 (47 samples, 0.04%)</title><rect x="86.0515%" y="229" width="0.0357%" height="15" fill="rgb(221,78,26)" fg:x="113286" fg:w="47"/><text x="86.3015%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f575b5 (38 samples, 0.03%)</title><rect x="86.0926%" y="229" width="0.0289%" height="15" fill="rgb(250,127,30)" fg:x="113340" fg:w="38"/><text x="86.3426%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cdd (68 samples, 0.05%)</title><rect x="86.1670%" y="229" width="0.0517%" height="15" fill="rgb(230,49,44)" fg:x="113438" fg:w="68"/><text x="86.4170%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73cf1 (56 samples, 0.04%)</title><rect x="86.2217%" y="229" width="0.0425%" height="15" fill="rgb(229,67,23)" fg:x="113510" fg:w="56"/><text x="86.4717%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d04 (32 samples, 0.02%)</title><rect x="86.2771%" y="229" width="0.0243%" height="15" fill="rgb(249,83,47)" fg:x="113583" fg:w="32"/><text x="86.5271%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d0d (39 samples, 0.03%)</title><rect x="86.3015%" y="229" width="0.0296%" height="15" fill="rgb(215,43,3)" fg:x="113615" fg:w="39"/><text x="86.5515%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d19 (48 samples, 0.04%)</title><rect x="86.3349%" y="229" width="0.0365%" height="15" fill="rgb(238,154,13)" fg:x="113659" fg:w="48"/><text x="86.5849%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f73d28 (32 samples, 0.02%)</title><rect x="86.3805%" y="229" width="0.0243%" height="15" fill="rgb(219,56,2)" fg:x="113719" fg:w="32"/><text x="86.6305%" y="239.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (15,758 samples, 11.97%)</title><rect x="74.4502%" y="245" width="11.9697%" height="15" fill="rgb(233,0,4)" fg:x="98013" fg:w="15758"/><text x="74.7002%" y="255.50">dateo_fun_remover`..</text></g><g><title>libsystem_m.dylib`0x00007ff812c6e470 (2,086 samples, 1.58%)</title><rect x="86.4215%" y="245" width="1.5845%" height="15" fill="rgb(235,30,7)" fg:x="113773" fg:w="2086"/><text x="86.6715%" y="255.50"></text></g><g><title>libsystem_m.dylib`0x00007ff812c70aa0 (10,911 samples, 8.29%)</title><rect x="88.0060%" y="245" width="8.2879%" height="15" fill="rgb(250,79,13)" fg:x="115859" fg:w="10911"/><text x="88.2560%" y="255.50">libsystem_m...</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$log (152 samples, 0.12%)</title><rect x="96.2939%" y="245" width="0.1155%" height="15" fill="rgb(211,146,34)" fg:x="126770" fg:w="152"/><text x="96.5439%" y="255.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (185 samples, 0.14%)</title><rect x="96.4094%" y="245" width="0.1405%" height="15" fill="rgb(228,22,38)" fg:x="126922" fg:w="185"/><text x="96.6594%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716fe (52 samples, 0.04%)</title><rect x="96.5651%" y="245" width="0.0395%" height="15" fill="rgb(235,168,5)" fg:x="127127" fg:w="52"/><text x="96.8151%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71705 (37 samples, 0.03%)</title><rect x="96.6122%" y="245" width="0.0281%" height="15" fill="rgb(221,155,16)" fg:x="127189" fg:w="37"/><text x="96.8622%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7170f (39 samples, 0.03%)</title><rect x="96.6441%" y="245" width="0.0296%" height="15" fill="rgb(215,215,53)" fg:x="127231" fg:w="39"/><text x="96.8941%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7172f (58 samples, 0.04%)</title><rect x="96.6760%" y="245" width="0.0441%" height="15" fill="rgb(223,4,10)" fg:x="127273" fg:w="58"/><text x="96.9260%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7174f (37 samples, 0.03%)</title><rect x="96.7353%" y="245" width="0.0281%" height="15" fill="rgb(234,103,6)" fg:x="127351" fg:w="37"/><text x="96.9853%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717e0 (44 samples, 0.03%)</title><rect x="96.7672%" y="245" width="0.0334%" height="15" fill="rgb(227,97,0)" fg:x="127393" fg:w="44"/><text x="97.0172%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717f2 (29 samples, 0.02%)</title><rect x="96.8059%" y="245" width="0.0220%" height="15" fill="rgb(234,150,53)" fg:x="127444" fg:w="29"/><text x="97.0559%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f717ff (23 samples, 0.02%)</title><rect x="96.8325%" y="245" width="0.0175%" height="15" fill="rgb(228,201,54)" fg:x="127479" fg:w="23"/><text x="97.0825%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71802 (36 samples, 0.03%)</title><rect x="96.8500%" y="245" width="0.0273%" height="15" fill="rgb(222,22,37)" fg:x="127502" fg:w="36"/><text x="97.1000%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71816 (28 samples, 0.02%)</title><rect x="96.8864%" y="245" width="0.0213%" height="15" fill="rgb(237,53,32)" fg:x="127550" fg:w="28"/><text x="97.1364%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71826 (38 samples, 0.03%)</title><rect x="96.9145%" y="245" width="0.0289%" height="15" fill="rgb(233,25,53)" fg:x="127587" fg:w="38"/><text x="97.1645%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71835 (46 samples, 0.03%)</title><rect x="96.9540%" y="245" width="0.0349%" height="15" fill="rgb(210,40,34)" fg:x="127639" fg:w="46"/><text x="97.2040%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71851 (41 samples, 0.03%)</title><rect x="96.9950%" y="245" width="0.0311%" height="15" fill="rgb(241,220,44)" fg:x="127693" fg:w="41"/><text x="97.2450%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7186d (34 samples, 0.03%)</title><rect x="97.0315%" y="245" width="0.0258%" height="15" fill="rgb(235,28,35)" fg:x="127741" fg:w="34"/><text x="97.2815%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71879 (38 samples, 0.03%)</title><rect x="97.0710%" y="245" width="0.0289%" height="15" fill="rgb(210,56,17)" fg:x="127793" fg:w="38"/><text x="97.3210%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71887 (32 samples, 0.02%)</title><rect x="97.1021%" y="245" width="0.0243%" height="15" fill="rgb(224,130,29)" fg:x="127834" fg:w="32"/><text x="97.3521%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71891 (1,153 samples, 0.88%)</title><rect x="97.1272%" y="245" width="0.8758%" height="15" fill="rgb(235,212,8)" fg:x="127867" fg:w="1153"/><text x="97.3772%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718c2 (28 samples, 0.02%)</title><rect x="98.0045%" y="245" width="0.0213%" height="15" fill="rgb(223,33,50)" fg:x="129022" fg:w="28"/><text x="98.2545%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718d0 (26 samples, 0.02%)</title><rect x="98.0372%" y="245" width="0.0197%" height="15" fill="rgb(219,149,13)" fg:x="129065" fg:w="26"/><text x="98.2872%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718de (15 samples, 0.01%)</title><rect x="98.0630%" y="245" width="0.0114%" height="15" fill="rgb(250,156,29)" fg:x="129099" fg:w="15"/><text x="98.3130%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f718e5 (33 samples, 0.03%)</title><rect x="98.0744%" y="245" width="0.0251%" height="15" fill="rgb(216,193,19)" fg:x="129114" fg:w="33"/><text x="98.3244%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71901 (270 samples, 0.21%)</title><rect x="98.1329%" y="245" width="0.2051%" height="15" fill="rgb(216,135,14)" fg:x="129191" fg:w="270"/><text x="98.3829%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (270 samples, 0.21%)</title><rect x="98.1329%" y="229" width="0.2051%" height="15" fill="rgb(241,47,5)" fg:x="129191" fg:w="270"/><text x="98.3829%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7190f (45 samples, 0.03%)</title><rect x="98.3403%" y="245" width="0.0342%" height="15" fill="rgb(233,42,35)" fg:x="129464" fg:w="45"/><text x="98.5903%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7191d (14 samples, 0.01%)</title><rect x="98.3783%" y="245" width="0.0106%" height="15" fill="rgb(231,13,6)" fg:x="129514" fg:w="14"/><text x="98.6283%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71920 (36 samples, 0.03%)</title><rect x="98.3889%" y="245" width="0.0273%" height="15" fill="rgb(207,181,40)" fg:x="129528" fg:w="36"/><text x="98.6389%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71932 (39 samples, 0.03%)</title><rect x="98.4208%" y="245" width="0.0296%" height="15" fill="rgb(254,173,49)" fg:x="129570" fg:w="39"/><text x="98.6708%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71945 (31 samples, 0.02%)</title><rect x="98.4550%" y="245" width="0.0235%" height="15" fill="rgb(221,1,38)" fg:x="129615" fg:w="31"/><text x="98.7050%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71959 (43 samples, 0.03%)</title><rect x="98.4816%" y="245" width="0.0327%" height="15" fill="rgb(206,124,46)" fg:x="129650" fg:w="43"/><text x="98.7316%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71969 (35 samples, 0.03%)</title><rect x="98.5158%" y="245" width="0.0266%" height="15" fill="rgb(249,21,11)" fg:x="129695" fg:w="35"/><text x="98.7658%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7197b (18 samples, 0.01%)</title><rect x="98.5484%" y="245" width="0.0137%" height="15" fill="rgb(222,201,40)" fg:x="129738" fg:w="18"/><text x="98.7984%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71984 (16 samples, 0.01%)</title><rect x="98.5674%" y="245" width="0.0122%" height="15" fill="rgb(235,61,29)" fg:x="129763" fg:w="16"/><text x="98.8174%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71992 (402 samples, 0.31%)</title><rect x="98.5849%" y="245" width="0.3054%" height="15" fill="rgb(219,207,3)" fg:x="129786" fg:w="402"/><text x="98.8349%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71999 (15 samples, 0.01%)</title><rect x="98.8978%" y="245" width="0.0114%" height="15" fill="rgb(222,56,46)" fg:x="130198" fg:w="15"/><text x="99.1478%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7199e (189 samples, 0.14%)</title><rect x="98.9092%" y="245" width="0.1436%" height="15" fill="rgb(239,76,54)" fg:x="130213" fg:w="189"/><text x="99.1592%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719aa (21 samples, 0.02%)</title><rect x="99.0627%" y="245" width="0.0160%" height="15" fill="rgb(231,124,27)" fg:x="130415" fg:w="21"/><text x="99.3127%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719b7 (378 samples, 0.29%)</title><rect x="99.0786%" y="245" width="0.2871%" height="15" fill="rgb(249,195,6)" fg:x="130436" fg:w="378"/><text x="99.3286%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719c0 (24 samples, 0.02%)</title><rect x="99.3657%" y="245" width="0.0182%" height="15" fill="rgb(237,174,47)" fg:x="130814" fg:w="24"/><text x="99.6157%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f719f4 (28 samples, 0.02%)</title><rect x="99.3840%" y="245" width="0.0213%" height="15" fill="rgb(206,201,31)" fg:x="130838" fg:w="28"/><text x="99.6340%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a39 (41 samples, 0.03%)</title><rect x="99.4083%" y="245" width="0.0311%" height="15" fill="rgb(231,57,52)" fg:x="130870" fg:w="41"/><text x="99.6583%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a40 (40 samples, 0.03%)</title><rect x="99.4409%" y="245" width="0.0304%" height="15" fill="rgb(248,177,22)" fg:x="130913" fg:w="40"/><text x="99.6909%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f7a472 (36 samples, 0.03%)</title><rect x="99.4736%" y="245" width="0.0273%" height="15" fill="rgb(215,211,37)" fg:x="130956" fg:w="36"/><text x="99.7236%" y="255.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (56 samples, 0.04%)</title><rect x="99.5009%" y="245" width="0.0425%" height="15" fill="rgb(241,128,51)" fg:x="130992" fg:w="56"/><text x="99.7509%" y="255.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (95 samples, 0.07%)</title><rect x="99.5442%" y="245" width="0.0722%" height="15" fill="rgb(227,165,31)" fg:x="131049" fg:w="95"/><text x="99.7942%" y="255.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (64,139 samples, 48.72%)</title><rect x="50.8990%" y="261" width="48.7197%" height="15" fill="rgb(228,167,24)" fg:x="67008" fg:w="64139"/><text x="51.1490%" y="271.50">dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (28 samples, 0.02%)</title><rect x="99.6187%" y="261" width="0.0213%" height="15" fill="rgb(228,143,12)" fg:x="131147" fg:w="28"/><text x="99.8687%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e2b (44 samples, 0.03%)</title><rect x="99.6400%" y="261" width="0.0334%" height="15" fill="rgb(249,149,8)" fg:x="131175" fg:w="44"/><text x="99.8900%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e3a (45 samples, 0.03%)</title><rect x="99.6757%" y="261" width="0.0342%" height="15" fill="rgb(243,35,44)" fg:x="131222" fg:w="45"/><text x="99.9257%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e45 (50 samples, 0.04%)</title><rect x="99.7167%" y="261" width="0.0380%" height="15" fill="rgb(246,89,9)" fg:x="131276" fg:w="50"/><text x="99.9667%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e57 (38 samples, 0.03%)</title><rect x="99.7562%" y="261" width="0.0289%" height="15" fill="rgb(233,213,13)" fg:x="131328" fg:w="38"/><text x="100.0062%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e60 (29 samples, 0.02%)</title><rect x="99.7858%" y="261" width="0.0220%" height="15" fill="rgb(233,141,41)" fg:x="131367" fg:w="29"/><text x="100.0358%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e6c (27 samples, 0.02%)</title><rect x="99.8101%" y="261" width="0.0205%" height="15" fill="rgb(239,167,4)" fg:x="131399" fg:w="27"/><text x="100.0601%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f57e70 (80 samples, 0.06%)</title><rect x="99.8306%" y="261" width="0.0608%" height="15" fill="rgb(209,217,16)" fg:x="131426" fg:w="80"/><text x="100.0806%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f716f8 (38 samples, 0.03%)</title><rect x="99.9066%" y="261" width="0.0289%" height="15" fill="rgb(219,88,35)" fg:x="131526" fg:w="38"/><text x="100.1566%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a47 (39 samples, 0.03%)</title><rect x="99.9392%" y="261" width="0.0296%" height="15" fill="rgb(220,193,23)" fg:x="131569" fg:w="39"/><text x="100.1892%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff806f71a48 (34 samples, 0.03%)</title><rect x="99.9689%" y="261" width="0.0258%" height="15" fill="rgb(230,90,52)" fg:x="131608" fg:w="34"/><text x="100.2189%" y="271.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (131,644 samples, 100.00%)</title><rect x="0.0015%" y="277" width="99.9962%" height="15" fill="rgb(252,106,19)" fg:x="2" fg:w="131644"/><text x="0.2515%" y="287.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (131,648 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9992%" height="15" fill="rgb(206,74,20)" fg:x="0" fg:w="131648"/><text x="0.2500%" y="303.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g><g><title>all (131,649 samples, 100%)</title><rect x="0.0000%" y="405" width="100.0000%" height="15" fill="rgb(230,138,44)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="415.50"></text></g><g><title>dyld`start (131,649 samples, 100.00%)</title><rect x="0.0000%" y="389" width="100.0000%" height="15" fill="rgb(235,182,43)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="399.50">dyld`start</text></g><g><title>dateo_fun_remover`main (131,649 samples, 100.00%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(242,16,51)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="383.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (131,649 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(248,9,4)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="367.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (131,649 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(210,31,22)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="351.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (131,649 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(239,54,39)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="335.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (131,649 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(230,99,41)" fg:x="0" fg:w="131649"/><text x="0.2500%" y="319.50">dateo_fun_remover`dateo_fun_remover::main</text></g></svg></svg>