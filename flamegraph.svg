<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="422" onload="init(evt)" viewBox="0 0 1200 422" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="422" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="405.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="405.00"> </text><svg id="frames" x="10" width="1180" total_samples="172732"><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (437 samples, 0.25%)</title><rect x="0.0000%" y="245" width="0.2530%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="437"/><text x="0.2500%" y="255.50"></text></g><g><title>datoe_fun_remover`__rdl_dealloc (780 samples, 0.45%)</title><rect x="0.2599%" y="245" width="0.4516%" height="15" fill="rgb(217,0,24)" fg:x="449" fg:w="780"/><text x="0.5099%" y="255.50"></text></g><g><title>datoe_fun_remover`__rust_dealloc (91 samples, 0.05%)</title><rect x="0.7115%" y="245" width="0.0527%" height="15" fill="rgb(221,193,54)" fg:x="1229" fg:w="91"/><text x="0.9615%" y="255.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomGroup::eval_with_funcs (314 samples, 0.18%)</title><rect x="0.7694%" y="245" width="0.1818%" height="15" fill="rgb(248,212,6)" fg:x="1329" fg:w="314"/><text x="1.0194%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (578 samples, 0.33%)</title><rect x="2.8796%" y="229" width="0.3346%" height="15" fill="rgb(208,68,35)" fg:x="4974" fg:w="578"/><text x="3.1296%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (285 samples, 0.16%)</title><rect x="12.5310%" y="197" width="0.1650%" height="15" fill="rgb(232,128,0)" fg:x="21645" fg:w="285"/><text x="12.7810%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209395 (84 samples, 0.05%)</title><rect x="12.6960%" y="197" width="0.0486%" height="15" fill="rgb(207,160,47)" fg:x="21930" fg:w="84"/><text x="12.9460%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (278 samples, 0.16%)</title><rect x="12.7481%" y="197" width="0.1609%" height="15" fill="rgb(228,23,34)" fg:x="22020" fg:w="278"/><text x="12.9981%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20939c (64 samples, 0.04%)</title><rect x="12.9148%" y="197" width="0.0371%" height="15" fill="rgb(218,30,26)" fg:x="22308" fg:w="64"/><text x="13.1648%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (297 samples, 0.17%)</title><rect x="12.9519%" y="197" width="0.1719%" height="15" fill="rgb(220,122,19)" fg:x="22372" fg:w="297"/><text x="13.2019%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a8 (56 samples, 0.03%)</title><rect x="13.1255%" y="197" width="0.0324%" height="15" fill="rgb(250,228,42)" fg:x="22672" fg:w="56"/><text x="13.3755%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b2 (257 samples, 0.15%)</title><rect x="13.1597%" y="197" width="0.1488%" height="15" fill="rgb(240,193,28)" fg:x="22731" fg:w="257"/><text x="13.4097%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093c3 (73 samples, 0.04%)</title><rect x="13.3143%" y="197" width="0.0423%" height="15" fill="rgb(216,20,37)" fg:x="22998" fg:w="73"/><text x="13.5643%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (302 samples, 0.17%)</title><rect x="13.3583%" y="197" width="0.1748%" height="15" fill="rgb(206,188,39)" fg:x="23074" fg:w="302"/><text x="13.6083%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d3 (71 samples, 0.04%)</title><rect x="13.5372%" y="197" width="0.0411%" height="15" fill="rgb(217,207,13)" fg:x="23383" fg:w="71"/><text x="13.7872%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (294 samples, 0.17%)</title><rect x="13.5783%" y="197" width="0.1702%" height="15" fill="rgb(231,73,38)" fg:x="23454" fg:w="294"/><text x="13.8283%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (1,132 samples, 0.66%)</title><rect x="13.7485%" y="197" width="0.6554%" height="15" fill="rgb(225,20,46)" fg:x="23748" fg:w="1132"/><text x="13.9985%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (5,336 samples, 3.09%)</title><rect x="14.4137%" y="197" width="3.0892%" height="15" fill="rgb(210,31,41)" fg:x="24897" fg:w="5336"/><text x="14.6637%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (452 samples, 0.26%)</title><rect x="17.5028%" y="197" width="0.2617%" height="15" fill="rgb(221,200,47)" fg:x="30233" fg:w="452"/><text x="17.7528%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093f8 (383 samples, 0.22%)</title><rect x="17.7657%" y="197" width="0.2217%" height="15" fill="rgb(226,26,5)" fg:x="30687" fg:w="383"/><text x="18.0157%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (1,465 samples, 0.85%)</title><rect x="17.9897%" y="197" width="0.8481%" height="15" fill="rgb(249,33,26)" fg:x="31074" fg:w="1465"/><text x="18.2397%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (392 samples, 0.23%)</title><rect x="18.8379%" y="197" width="0.2269%" height="15" fill="rgb(235,183,28)" fg:x="32539" fg:w="392"/><text x="19.0879%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (364 samples, 0.21%)</title><rect x="19.0671%" y="197" width="0.2107%" height="15" fill="rgb(221,5,38)" fg:x="32935" fg:w="364"/><text x="19.3171%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (824 samples, 0.48%)</title><rect x="19.2796%" y="197" width="0.4770%" height="15" fill="rgb(247,18,42)" fg:x="33302" fg:w="824"/><text x="19.5296%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941e (19 samples, 0.01%)</title><rect x="19.7566%" y="197" width="0.0110%" height="15" fill="rgb(241,131,45)" fg:x="34126" fg:w="19"/><text x="20.0066%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (362 samples, 0.21%)</title><rect x="19.7682%" y="197" width="0.2096%" height="15" fill="rgb(249,31,29)" fg:x="34146" fg:w="362"/><text x="20.0182%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (372 samples, 0.22%)</title><rect x="19.9807%" y="197" width="0.2154%" height="15" fill="rgb(225,111,53)" fg:x="34513" fg:w="372"/><text x="20.2307%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20943e (38 samples, 0.02%)</title><rect x="20.2012%" y="197" width="0.0220%" height="15" fill="rgb(238,160,17)" fg:x="34894" fg:w="38"/><text x="20.4512%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (139 samples, 0.08%)</title><rect x="20.2232%" y="197" width="0.0805%" height="15" fill="rgb(214,148,48)" fg:x="34932" fg:w="139"/><text x="20.4732%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (367 samples, 0.21%)</title><rect x="20.3037%" y="197" width="0.2125%" height="15" fill="rgb(232,36,49)" fg:x="35071" fg:w="367"/><text x="20.5537%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (358 samples, 0.21%)</title><rect x="20.5173%" y="197" width="0.2073%" height="15" fill="rgb(209,103,24)" fg:x="35440" fg:w="358"/><text x="20.7673%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (343 samples, 0.20%)</title><rect x="20.7298%" y="197" width="0.1986%" height="15" fill="rgb(229,88,8)" fg:x="35807" fg:w="343"/><text x="20.9798%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (358 samples, 0.21%)</title><rect x="20.9313%" y="197" width="0.2073%" height="15" fill="rgb(213,181,19)" fg:x="36155" fg:w="358"/><text x="21.1813%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (354 samples, 0.20%)</title><rect x="21.1530%" y="197" width="0.2049%" height="15" fill="rgb(254,191,54)" fg:x="36538" fg:w="354"/><text x="21.4030%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (366 samples, 0.21%)</title><rect x="21.3689%" y="197" width="0.2119%" height="15" fill="rgb(241,83,37)" fg:x="36911" fg:w="366"/><text x="21.6189%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (46 samples, 0.03%)</title><rect x="21.5878%" y="197" width="0.0266%" height="15" fill="rgb(233,36,39)" fg:x="37289" fg:w="46"/><text x="21.8378%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (299 samples, 0.17%)</title><rect x="21.6260%" y="197" width="0.1731%" height="15" fill="rgb(226,3,54)" fg:x="37355" fg:w="299"/><text x="21.8760%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e0 (36 samples, 0.02%)</title><rect x="21.8031%" y="197" width="0.0208%" height="15" fill="rgb(245,192,40)" fg:x="37661" fg:w="36"/><text x="22.0531%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e3 (65 samples, 0.04%)</title><rect x="21.8240%" y="197" width="0.0376%" height="15" fill="rgb(238,167,29)" fg:x="37697" fg:w="65"/><text x="22.0740%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (324 samples, 0.19%)</title><rect x="21.8616%" y="197" width="0.1876%" height="15" fill="rgb(232,182,51)" fg:x="37762" fg:w="324"/><text x="22.1116%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (1,500 samples, 0.87%)</title><rect x="22.0521%" y="197" width="0.8684%" height="15" fill="rgb(231,60,39)" fg:x="38091" fg:w="1500"/><text x="22.3021%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094f6 (28 samples, 0.02%)</title><rect x="22.9205%" y="197" width="0.0162%" height="15" fill="rgb(208,69,12)" fg:x="39591" fg:w="28"/><text x="23.1705%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (367 samples, 0.21%)</title><rect x="22.9367%" y="197" width="0.2125%" height="15" fill="rgb(235,93,37)" fg:x="39619" fg:w="367"/><text x="23.1867%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (352 samples, 0.20%)</title><rect x="23.1492%" y="197" width="0.2038%" height="15" fill="rgb(213,116,39)" fg:x="39986" fg:w="352"/><text x="23.3992%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (347 samples, 0.20%)</title><rect x="23.3529%" y="197" width="0.2009%" height="15" fill="rgb(222,207,29)" fg:x="40338" fg:w="347"/><text x="23.6029%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (5,924 samples, 3.43%)</title><rect x="23.5538%" y="197" width="3.4296%" height="15" fill="rgb(206,96,30)" fg:x="40685" fg:w="5924"/><text x="23.8038%" y="207.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (371 samples, 0.21%)</title><rect x="26.9869%" y="197" width="0.2148%" height="15" fill="rgb(218,138,4)" fg:x="46615" fg:w="371"/><text x="27.2369%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (338 samples, 0.20%)</title><rect x="27.2075%" y="197" width="0.1957%" height="15" fill="rgb(250,191,14)" fg:x="46996" fg:w="338"/><text x="27.4575%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b6 (83 samples, 0.05%)</title><rect x="27.4049%" y="197" width="0.0481%" height="15" fill="rgb(239,60,40)" fg:x="47337" fg:w="83"/><text x="27.6549%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (341 samples, 0.20%)</title><rect x="27.4529%" y="197" width="0.1974%" height="15" fill="rgb(206,27,48)" fg:x="47420" fg:w="341"/><text x="27.7029%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (394 samples, 0.23%)</title><rect x="27.6527%" y="197" width="0.2281%" height="15" fill="rgb(225,35,8)" fg:x="47765" fg:w="394"/><text x="27.9027%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (368 samples, 0.21%)</title><rect x="27.8900%" y="197" width="0.2130%" height="15" fill="rgb(250,213,24)" fg:x="48175" fg:w="368"/><text x="28.1400%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35,978 samples, 20.83%)</title><rect x="7.2835%" y="213" width="20.8288%" height="15" fill="rgb(247,123,22)" fg:x="12581" fg:w="35978"/><text x="7.5335%" y="223.50">datoe_fun_remover`&lt;alloc::vec::Ve..</text></g><g><title>datoe_fun_remover`__rdl_alloc (732 samples, 0.42%)</title><rect x="28.1164%" y="213" width="0.4238%" height="15" fill="rgb(231,138,38)" fg:x="48566" fg:w="732"/><text x="28.3664%" y="223.50"></text></g><g><title>datoe_fun_remover`__rust_alloc (247 samples, 0.14%)</title><rect x="28.5402%" y="213" width="0.1430%" height="15" fill="rgb(231,145,46)" fg:x="49298" fg:w="247"/><text x="28.7902%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (18 samples, 0.01%)</title><rect x="28.7306%" y="181" width="0.0104%" height="15" fill="rgb(251,118,11)" fg:x="49627" fg:w="18"/><text x="28.9806%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (19 samples, 0.01%)</title><rect x="28.7746%" y="181" width="0.0110%" height="15" fill="rgb(217,147,25)" fg:x="49703" fg:w="19"/><text x="29.0246%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a004 (30 samples, 0.02%)</title><rect x="28.8018%" y="181" width="0.0174%" height="15" fill="rgb(247,81,37)" fg:x="49750" fg:w="30"/><text x="29.0518%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a1cb (36 samples, 0.02%)</title><rect x="28.8453%" y="149" width="0.0208%" height="15" fill="rgb(209,12,38)" fg:x="49825" fg:w="36"/><text x="29.0953%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c852 (90 samples, 0.05%)</title><rect x="28.8725%" y="149" width="0.0521%" height="15" fill="rgb(227,1,9)" fg:x="49872" fg:w="90"/><text x="29.1225%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (21 samples, 0.01%)</title><rect x="28.9448%" y="133" width="0.0122%" height="15" fill="rgb(248,47,43)" fg:x="49997" fg:w="21"/><text x="29.1948%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (80 samples, 0.05%)</title><rect x="28.9304%" y="149" width="0.0463%" height="15" fill="rgb(221,10,30)" fg:x="49972" fg:w="80"/><text x="29.1804%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (259 samples, 0.15%)</title><rect x="28.8343%" y="165" width="0.1499%" height="15" fill="rgb(210,229,1)" fg:x="49806" fg:w="259"/><text x="29.0843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (279 samples, 0.16%)</title><rect x="28.8291%" y="181" width="0.1615%" height="15" fill="rgb(222,148,37)" fg:x="49797" fg:w="279"/><text x="29.0791%" y="191.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (497 samples, 0.29%)</title><rect x="28.7046%" y="197" width="0.2877%" height="15" fill="rgb(234,67,33)" fg:x="49582" fg:w="497"/><text x="28.9546%" y="207.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (556 samples, 0.32%)</title><rect x="28.6832%" y="213" width="0.3219%" height="15" fill="rgb(247,98,35)" fg:x="49545" fg:w="556"/><text x="28.9332%" y="223.50"></text></g><g><title>datoe_fun_remover`itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (30 samples, 0.02%)</title><rect x="29.0050%" y="213" width="0.0174%" height="15" fill="rgb(247,138,52)" fg:x="50101" fg:w="30"/><text x="29.2550%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (409 samples, 0.24%)</title><rect x="29.0224%" y="213" width="0.2368%" height="15" fill="rgb(213,79,30)" fg:x="50131" fg:w="409"/><text x="29.2724%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20938f (75 samples, 0.04%)</title><rect x="29.2661%" y="213" width="0.0434%" height="15" fill="rgb(246,177,23)" fg:x="50552" fg:w="75"/><text x="29.5161%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (355 samples, 0.21%)</title><rect x="29.3101%" y="213" width="0.2055%" height="15" fill="rgb(230,62,27)" fg:x="50628" fg:w="355"/><text x="29.5601%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (376 samples, 0.22%)</title><rect x="29.5157%" y="213" width="0.2177%" height="15" fill="rgb(216,154,8)" fg:x="50983" fg:w="376"/><text x="29.7657%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (368 samples, 0.21%)</title><rect x="29.7391%" y="213" width="0.2130%" height="15" fill="rgb(244,35,45)" fg:x="51369" fg:w="368"/><text x="29.9891%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cfa (89 samples, 0.05%)</title><rect x="29.9568%" y="213" width="0.0515%" height="15" fill="rgb(251,115,12)" fg:x="51745" fg:w="89"/><text x="30.2068%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cfd (208 samples, 0.12%)</title><rect x="30.0083%" y="213" width="0.1204%" height="15" fill="rgb(240,54,50)" fg:x="51834" fg:w="208"/><text x="30.2583%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (313 samples, 0.18%)</title><rect x="30.1288%" y="213" width="0.1812%" height="15" fill="rgb(233,84,52)" fg:x="52042" fg:w="313"/><text x="30.3788%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (397 samples, 0.23%)</title><rect x="30.3134%" y="213" width="0.2298%" height="15" fill="rgb(207,117,47)" fg:x="52361" fg:w="397"/><text x="30.5634%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d17 (69 samples, 0.04%)</title><rect x="30.5462%" y="213" width="0.0399%" height="15" fill="rgb(249,43,39)" fg:x="52763" fg:w="69"/><text x="30.7962%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (330 samples, 0.19%)</title><rect x="30.5861%" y="213" width="0.1910%" height="15" fill="rgb(209,38,44)" fg:x="52832" fg:w="330"/><text x="30.8361%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1d (251 samples, 0.15%)</title><rect x="30.7772%" y="213" width="0.1453%" height="15" fill="rgb(236,212,23)" fg:x="53162" fg:w="251"/><text x="31.0272%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1f (63 samples, 0.04%)</title><rect x="30.9225%" y="213" width="0.0365%" height="15" fill="rgb(242,79,21)" fg:x="53413" fg:w="63"/><text x="31.1725%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (302 samples, 0.17%)</title><rect x="30.9589%" y="213" width="0.1748%" height="15" fill="rgb(211,96,35)" fg:x="53476" fg:w="302"/><text x="31.2089%" y="223.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (48,313 samples, 27.97%)</title><rect x="3.2142%" y="229" width="27.9699%" height="15" fill="rgb(253,215,40)" fg:x="5552" fg:w="48313"/><text x="3.4642%" y="239.50">datoe_fun_remover`&lt;itertools::combinations_wi..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d2c (87 samples, 0.05%)</title><rect x="31.1338%" y="213" width="0.0504%" height="15" fill="rgb(211,81,21)" fg:x="53778" fg:w="87"/><text x="31.3838%" y="223.50"></text></g><g><title>datoe_fun_remover`alloc::vec::from_elem (116 samples, 0.07%)</title><rect x="31.1923%" y="229" width="0.0672%" height="15" fill="rgb(208,190,38)" fg:x="53879" fg:w="116"/><text x="31.4423%" y="239.50"></text></g><g><title>datoe_fun_remover`core::hash::Hasher::write_u64 (56 samples, 0.03%)</title><rect x="31.3237%" y="213" width="0.0324%" height="15" fill="rgb(235,213,38)" fg:x="54106" fg:w="56"/><text x="31.5737%" y="223.50"></text></g><g><title>datoe_fun_remover`core::hash::BuildHasher::hash_one (188 samples, 0.11%)</title><rect x="31.2594%" y="229" width="0.1088%" height="15" fill="rgb(237,122,38)" fg:x="53995" fg:w="188"/><text x="31.5094%" y="239.50"></text></g><g><title>datoe_fun_remover`num_traits::float::integer_decode_f64 (21 samples, 0.01%)</title><rect x="31.3561%" y="213" width="0.0122%" height="15" fill="rgb(244,218,35)" fg:x="54162" fg:w="21"/><text x="31.6061%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (136 samples, 0.08%)</title><rect x="31.3700%" y="229" width="0.0787%" height="15" fill="rgb(240,68,47)" fg:x="54186" fg:w="136"/><text x="31.6200%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (78 samples, 0.05%)</title><rect x="31.4036%" y="213" width="0.0452%" height="15" fill="rgb(210,16,53)" fg:x="54244" fg:w="78"/><text x="31.6536%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (37 samples, 0.02%)</title><rect x="31.4273%" y="197" width="0.0214%" height="15" fill="rgb(235,124,12)" fg:x="54285" fg:w="37"/><text x="31.6773%" y="207.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$pow (216 samples, 0.13%)</title><rect x="45.0855%" y="213" width="0.1250%" height="15" fill="rgb(224,169,11)" fg:x="77877" fg:w="216"/><text x="45.3355%" y="223.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (273 samples, 0.16%)</title><rect x="45.2105%" y="213" width="0.1580%" height="15" fill="rgb(250,166,2)" fg:x="78093" fg:w="273"/><text x="45.4605%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (10,670 samples, 6.18%)</title><rect x="45.3685%" y="213" width="6.1772%" height="15" fill="rgb(242,216,29)" fg:x="78366" fg:w="10670"/><text x="45.6185%" y="223.50">datoe_fu..</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (9,268 samples, 5.37%)</title><rect x="51.5457%" y="213" width="5.3655%" height="15" fill="rgb(230,116,27)" fg:x="89036" fg:w="9268"/><text x="51.7957%" y="223.50">datoe_f..</text></g><g><title>libsystem_m.dylib`fmod (1,974 samples, 1.14%)</title><rect x="55.7685%" y="197" width="1.1428%" height="15" fill="rgb(228,99,48)" fg:x="96330" fg:w="1974"/><text x="56.0185%" y="207.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (26,917 samples, 15.58%)</title><rect x="56.9113%" y="213" width="15.5831%" height="15" fill="rgb(253,11,6)" fg:x="98304" fg:w="26917"/><text x="57.1613%" y="223.50">libsystem_m.dylib`0x0000..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (294 samples, 0.17%)</title><rect x="72.4944%" y="213" width="0.1702%" height="15" fill="rgb(247,143,39)" fg:x="125221" fg:w="294"/><text x="72.7444%" y="223.50"></text></g><g><title>libsystem_m.dylib`fmod (65 samples, 0.04%)</title><rect x="72.6646%" y="213" width="0.0376%" height="15" fill="rgb(236,97,10)" fg:x="125515" fg:w="65"/><text x="72.9146%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomGroup::eval_with_funcs (72,172 samples, 41.78%)</title><rect x="31.4487%" y="229" width="41.7826%" height="15" fill="rgb(233,208,19)" fg:x="54322" fg:w="72172"/><text x="31.6987%" y="239.50">datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomGroup::..</text></g><g><title>libsystem_m.dylib`trunc (914 samples, 0.53%)</title><rect x="72.7022%" y="213" width="0.5291%" height="15" fill="rgb(216,164,2)" fg:x="125580" fg:w="914"/><text x="72.9522%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (927 samples, 0.54%)</title><rect x="73.2314%" y="229" width="0.5367%" height="15" fill="rgb(220,129,5)" fg:x="126494" fg:w="927"/><text x="73.4814%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (176 samples, 0.10%)</title><rect x="73.7680%" y="229" width="0.1019%" height="15" fill="rgb(242,17,10)" fg:x="127421" fg:w="176"/><text x="74.0180%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fc (86 samples, 0.05%)</title><rect x="73.8728%" y="229" width="0.0498%" height="15" fill="rgb(242,107,0)" fg:x="127602" fg:w="86"/><text x="74.1228%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (339 samples, 0.20%)</title><rect x="73.9226%" y="229" width="0.1963%" height="15" fill="rgb(251,28,31)" fg:x="127688" fg:w="339"/><text x="74.1726%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223702 (21 samples, 0.01%)</title><rect x="74.1235%" y="229" width="0.0122%" height="15" fill="rgb(233,223,10)" fg:x="128035" fg:w="21"/><text x="74.3735%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223704 (44 samples, 0.03%)</title><rect x="74.1357%" y="229" width="0.0255%" height="15" fill="rgb(215,21,27)" fg:x="128056" fg:w="44"/><text x="74.3857%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (296 samples, 0.17%)</title><rect x="74.1611%" y="229" width="0.1714%" height="15" fill="rgb(232,23,21)" fg:x="128100" fg:w="296"/><text x="74.4111%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370c (62 samples, 0.04%)</title><rect x="74.3412%" y="229" width="0.0359%" height="15" fill="rgb(244,5,23)" fg:x="128411" fg:w="62"/><text x="74.5912%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (307 samples, 0.18%)</title><rect x="74.3771%" y="229" width="0.1777%" height="15" fill="rgb(226,81,46)" fg:x="128473" fg:w="307"/><text x="74.6271%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223725 (108 samples, 0.06%)</title><rect x="74.5675%" y="229" width="0.0625%" height="15" fill="rgb(247,70,30)" fg:x="128802" fg:w="108"/><text x="74.8175%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (379 samples, 0.22%)</title><rect x="74.6301%" y="229" width="0.2194%" height="15" fill="rgb(212,68,19)" fg:x="128910" fg:w="379"/><text x="74.8801%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22373f (712 samples, 0.41%)</title><rect x="74.8541%" y="229" width="0.4122%" height="15" fill="rgb(240,187,13)" fg:x="129297" fg:w="712"/><text x="75.1041%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223746 (738 samples, 0.43%)</title><rect x="75.2663%" y="229" width="0.4273%" height="15" fill="rgb(223,113,26)" fg:x="130009" fg:w="738"/><text x="75.5163%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (335 samples, 0.19%)</title><rect x="75.6936%" y="229" width="0.1939%" height="15" fill="rgb(206,192,2)" fg:x="130747" fg:w="335"/><text x="75.9436%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223758 (85 samples, 0.05%)</title><rect x="75.8875%" y="229" width="0.0492%" height="15" fill="rgb(241,108,4)" fg:x="131082" fg:w="85"/><text x="76.1375%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22375f (22 samples, 0.01%)</title><rect x="75.9367%" y="229" width="0.0127%" height="15" fill="rgb(247,173,49)" fg:x="131167" fg:w="22"/><text x="76.1867%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237dd (18 samples, 0.01%)</title><rect x="75.9494%" y="229" width="0.0104%" height="15" fill="rgb(224,114,35)" fg:x="131189" fg:w="18"/><text x="76.1994%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (272 samples, 0.16%)</title><rect x="75.9599%" y="229" width="0.1575%" height="15" fill="rgb(245,159,27)" fg:x="131207" fg:w="272"/><text x="76.2099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e3 (41 samples, 0.02%)</title><rect x="76.1173%" y="229" width="0.0237%" height="15" fill="rgb(245,172,44)" fg:x="131479" fg:w="41"/><text x="76.3673%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (294 samples, 0.17%)</title><rect x="76.1498%" y="229" width="0.1702%" height="15" fill="rgb(236,23,11)" fg:x="131535" fg:w="294"/><text x="76.3998%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f5 (67 samples, 0.04%)</title><rect x="76.3200%" y="229" width="0.0388%" height="15" fill="rgb(205,117,38)" fg:x="131829" fg:w="67"/><text x="76.5700%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (22 samples, 0.01%)</title><rect x="76.3599%" y="229" width="0.0127%" height="15" fill="rgb(237,72,25)" fg:x="131898" fg:w="22"/><text x="76.6099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (304 samples, 0.18%)</title><rect x="76.3726%" y="229" width="0.1760%" height="15" fill="rgb(244,70,9)" fg:x="131920" fg:w="304"/><text x="76.6226%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223809 (54 samples, 0.03%)</title><rect x="76.5486%" y="229" width="0.0313%" height="15" fill="rgb(217,125,39)" fg:x="132224" fg:w="54"/><text x="76.7986%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223813 (22 samples, 0.01%)</title><rect x="76.5805%" y="229" width="0.0127%" height="15" fill="rgb(235,36,10)" fg:x="132279" fg:w="22"/><text x="76.8305%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (329 samples, 0.19%)</title><rect x="76.5932%" y="229" width="0.1905%" height="15" fill="rgb(251,123,47)" fg:x="132301" fg:w="329"/><text x="76.8432%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223819 (64 samples, 0.04%)</title><rect x="76.7837%" y="229" width="0.0371%" height="15" fill="rgb(221,13,13)" fg:x="132630" fg:w="64"/><text x="77.0337%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (275 samples, 0.16%)</title><rect x="76.8306%" y="229" width="0.1592%" height="15" fill="rgb(238,131,9)" fg:x="132711" fg:w="275"/><text x="77.0806%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223829 (55 samples, 0.03%)</title><rect x="76.9898%" y="229" width="0.0318%" height="15" fill="rgb(211,50,8)" fg:x="132986" fg:w="55"/><text x="77.2398%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382f (20 samples, 0.01%)</title><rect x="77.0280%" y="229" width="0.0116%" height="15" fill="rgb(245,182,24)" fg:x="133052" fg:w="20"/><text x="77.2780%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (294 samples, 0.17%)</title><rect x="77.0396%" y="229" width="0.1702%" height="15" fill="rgb(242,14,37)" fg:x="133072" fg:w="294"/><text x="77.2896%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22383d (56 samples, 0.03%)</title><rect x="77.2098%" y="229" width="0.0324%" height="15" fill="rgb(246,228,12)" fg:x="133366" fg:w="56"/><text x="77.4598%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (340 samples, 0.20%)</title><rect x="77.2491%" y="229" width="0.1968%" height="15" fill="rgb(213,55,15)" fg:x="133434" fg:w="340"/><text x="77.4991%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22385e (43 samples, 0.02%)</title><rect x="77.4460%" y="229" width="0.0249%" height="15" fill="rgb(209,9,3)" fg:x="133774" fg:w="43"/><text x="77.6960%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (320 samples, 0.19%)</title><rect x="77.4813%" y="229" width="0.1853%" height="15" fill="rgb(230,59,30)" fg:x="133835" fg:w="320"/><text x="77.7313%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223870 (86 samples, 0.05%)</title><rect x="77.6666%" y="229" width="0.0498%" height="15" fill="rgb(209,121,21)" fg:x="134155" fg:w="86"/><text x="77.9166%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223876 (23 samples, 0.01%)</title><rect x="77.7181%" y="229" width="0.0133%" height="15" fill="rgb(220,109,13)" fg:x="134244" fg:w="23"/><text x="77.9681%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (325 samples, 0.19%)</title><rect x="77.7314%" y="229" width="0.1882%" height="15" fill="rgb(232,18,1)" fg:x="134267" fg:w="325"/><text x="77.9814%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22387d (59 samples, 0.03%)</title><rect x="77.9196%" y="229" width="0.0342%" height="15" fill="rgb(215,41,42)" fg:x="134592" fg:w="59"/><text x="78.1696%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (309 samples, 0.18%)</title><rect x="77.9636%" y="229" width="0.1789%" height="15" fill="rgb(224,123,36)" fg:x="134668" fg:w="309"/><text x="78.2136%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22388c (56 samples, 0.03%)</title><rect x="78.1424%" y="229" width="0.0324%" height="15" fill="rgb(240,125,3)" fg:x="134977" fg:w="56"/><text x="78.3924%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (8,526 samples, 4.94%)</title><rect x="78.1760%" y="229" width="4.9360%" height="15" fill="rgb(205,98,50)" fg:x="135035" fg:w="8526"/><text x="78.4260%" y="239.50">libsys..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238c2 (216 samples, 0.13%)</title><rect x="83.1126%" y="229" width="0.1250%" height="15" fill="rgb(205,185,37)" fg:x="143562" fg:w="216"/><text x="83.3626%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238cd (36 samples, 0.02%)</title><rect x="83.2422%" y="229" width="0.0208%" height="15" fill="rgb(238,207,15)" fg:x="143786" fg:w="36"/><text x="83.4922%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (271 samples, 0.16%)</title><rect x="83.2631%" y="229" width="0.1569%" height="15" fill="rgb(213,199,42)" fg:x="143822" fg:w="271"/><text x="83.5131%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d5 (93 samples, 0.05%)</title><rect x="83.4200%" y="229" width="0.0538%" height="15" fill="rgb(235,201,11)" fg:x="144093" fg:w="93"/><text x="83.6700%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238de (34 samples, 0.02%)</title><rect x="83.4750%" y="229" width="0.0197%" height="15" fill="rgb(207,46,11)" fg:x="144188" fg:w="34"/><text x="83.7250%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (345 samples, 0.20%)</title><rect x="83.4947%" y="229" width="0.1997%" height="15" fill="rgb(241,35,35)" fg:x="144222" fg:w="345"/><text x="83.7447%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238ed (31 samples, 0.02%)</title><rect x="83.6979%" y="229" width="0.0179%" height="15" fill="rgb(243,32,47)" fg:x="144573" fg:w="31"/><text x="83.9479%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f1 (247 samples, 0.14%)</title><rect x="83.7158%" y="229" width="0.1430%" height="15" fill="rgb(247,202,23)" fg:x="144604" fg:w="247"/><text x="83.9658%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f5 (87 samples, 0.05%)</title><rect x="83.8588%" y="229" width="0.0504%" height="15" fill="rgb(219,102,11)" fg:x="144851" fg:w="87"/><text x="84.1088%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238fc (41 samples, 0.02%)</title><rect x="83.9092%" y="229" width="0.0237%" height="15" fill="rgb(243,110,44)" fg:x="144938" fg:w="41"/><text x="84.1592%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (2,849 samples, 1.65%)</title><rect x="83.9329%" y="229" width="1.6494%" height="15" fill="rgb(222,74,54)" fg:x="144979" fg:w="2849"/><text x="84.1829%" y="239.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2,477 samples, 1.43%)</title><rect x="84.1483%" y="213" width="1.4340%" height="15" fill="rgb(216,99,12)" fg:x="145351" fg:w="2477"/><text x="84.3983%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223912 (346 samples, 0.20%)</title><rect x="85.5997%" y="229" width="0.2003%" height="15" fill="rgb(226,22,26)" fg:x="147858" fg:w="346"/><text x="85.8497%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22391d (26 samples, 0.02%)</title><rect x="85.8011%" y="229" width="0.0151%" height="15" fill="rgb(217,163,10)" fg:x="148206" fg:w="26"/><text x="86.0511%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (378 samples, 0.22%)</title><rect x="85.8179%" y="229" width="0.2188%" height="15" fill="rgb(213,25,53)" fg:x="148235" fg:w="378"/><text x="86.0679%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223934 (370 samples, 0.21%)</title><rect x="86.0483%" y="229" width="0.2142%" height="15" fill="rgb(252,105,26)" fg:x="148633" fg:w="370"/><text x="86.2983%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223947 (357 samples, 0.21%)</title><rect x="86.2677%" y="229" width="0.2067%" height="15" fill="rgb(220,39,43)" fg:x="149012" fg:w="357"/><text x="86.5177%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395b (388 samples, 0.22%)</title><rect x="86.4814%" y="229" width="0.2246%" height="15" fill="rgb(229,68,48)" fg:x="149381" fg:w="388"/><text x="86.7314%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396c (325 samples, 0.19%)</title><rect x="86.7118%" y="229" width="0.1882%" height="15" fill="rgb(252,8,32)" fg:x="149779" fg:w="325"/><text x="86.9618%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (39 samples, 0.02%)</title><rect x="86.9046%" y="229" width="0.0226%" height="15" fill="rgb(223,20,43)" fg:x="150112" fg:w="39"/><text x="87.1546%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399b (348 samples, 0.20%)</title><rect x="86.9312%" y="229" width="0.2015%" height="15" fill="rgb(229,81,49)" fg:x="150158" fg:w="348"/><text x="87.1812%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (3,491 samples, 2.02%)</title><rect x="87.1327%" y="229" width="2.0210%" height="15" fill="rgb(236,28,36)" fg:x="150506" fg:w="3491"/><text x="87.3827%" y="239.50">l..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a0 (96 samples, 0.06%)</title><rect x="89.1537%" y="229" width="0.0556%" height="15" fill="rgb(249,185,26)" fg:x="153997" fg:w="96"/><text x="89.4037%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a2 (110 samples, 0.06%)</title><rect x="89.2093%" y="229" width="0.0637%" height="15" fill="rgb(249,174,33)" fg:x="154093" fg:w="110"/><text x="89.4593%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (287 samples, 0.17%)</title><rect x="89.2730%" y="229" width="0.1662%" height="15" fill="rgb(233,201,37)" fg:x="154203" fg:w="287"/><text x="89.5230%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (300 samples, 0.17%)</title><rect x="89.4391%" y="229" width="0.1737%" height="15" fill="rgb(221,78,26)" fg:x="154490" fg:w="300"/><text x="89.6891%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239ac (30 samples, 0.02%)</title><rect x="89.6128%" y="229" width="0.0174%" height="15" fill="rgb(250,127,30)" fg:x="154790" fg:w="30"/><text x="89.8628%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b0 (23 samples, 0.01%)</title><rect x="89.6302%" y="229" width="0.0133%" height="15" fill="rgb(230,49,44)" fg:x="154820" fg:w="23"/><text x="89.8802%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (6,637 samples, 3.84%)</title><rect x="89.6435%" y="229" width="3.8424%" height="15" fill="rgb(229,67,23)" fg:x="154843" fg:w="6637"/><text x="89.8935%" y="239.50">libs..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239f6 (126 samples, 0.07%)</title><rect x="93.4888%" y="229" width="0.0729%" height="15" fill="rgb(249,83,47)" fg:x="161485" fg:w="126"/><text x="93.7388%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (340 samples, 0.20%)</title><rect x="93.5623%" y="229" width="0.1968%" height="15" fill="rgb(215,43,3)" fg:x="161612" fg:w="340"/><text x="93.8123%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (346 samples, 0.20%)</title><rect x="93.7643%" y="229" width="0.2003%" height="15" fill="rgb(238,154,13)" fg:x="161961" fg:w="346"/><text x="94.0143%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (295 samples, 0.17%)</title><rect x="93.9890%" y="229" width="0.1708%" height="15" fill="rgb(219,56,2)" fg:x="162349" fg:w="295"/><text x="94.2390%" y="239.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (363 samples, 0.21%)</title><rect x="94.1597%" y="229" width="0.2102%" height="15" fill="rgb(233,0,4)" fg:x="162644" fg:w="363"/><text x="94.4097%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group (161,784 samples, 93.66%)</title><rect x="0.9512%" y="245" width="93.6619%" height="15" fill="rgb(235,30,7)" fg:x="1643" fg:w="161784"/><text x="1.2012%" y="255.50">datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (420 samples, 0.24%)</title><rect x="94.3699%" y="229" width="0.2432%" height="15" fill="rgb(250,79,13)" fg:x="163007" fg:w="420"/><text x="94.6199%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (363 samples, 0.21%)</title><rect x="94.6130%" y="245" width="0.2102%" height="15" fill="rgb(211,146,34)" fg:x="163427" fg:w="363"/><text x="94.8630%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (361 samples, 0.21%)</title><rect x="94.8301%" y="245" width="0.2090%" height="15" fill="rgb(228,22,38)" fg:x="163802" fg:w="361"/><text x="95.0801%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3c (55 samples, 0.03%)</title><rect x="95.0391%" y="245" width="0.0318%" height="15" fill="rgb(235,168,5)" fg:x="164163" fg:w="55"/><text x="95.2891%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (339 samples, 0.20%)</title><rect x="95.0721%" y="245" width="0.1963%" height="15" fill="rgb(221,155,16)" fg:x="164220" fg:w="339"/><text x="95.3221%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e4f (50 samples, 0.03%)</title><rect x="95.2777%" y="245" width="0.0289%" height="15" fill="rgb(215,215,53)" fg:x="164575" fg:w="50"/><text x="95.5277%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (298 samples, 0.17%)</title><rect x="95.3066%" y="245" width="0.1725%" height="15" fill="rgb(223,4,10)" fg:x="164625" fg:w="298"/><text x="95.5566%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e59 (58 samples, 0.03%)</title><rect x="95.4791%" y="245" width="0.0336%" height="15" fill="rgb(234,103,6)" fg:x="164923" fg:w="58"/><text x="95.7291%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (331 samples, 0.19%)</title><rect x="95.5127%" y="245" width="0.1916%" height="15" fill="rgb(227,97,0)" fg:x="164981" fg:w="331"/><text x="95.7627%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e62 (59 samples, 0.03%)</title><rect x="95.7043%" y="245" width="0.0342%" height="15" fill="rgb(234,150,53)" fg:x="165312" fg:w="59"/><text x="95.9543%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e6c (183 samples, 0.11%)</title><rect x="95.7483%" y="245" width="0.1059%" height="15" fill="rgb(228,201,54)" fg:x="165388" fg:w="183"/><text x="95.9983%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (841 samples, 0.49%)</title><rect x="95.8543%" y="245" width="0.4869%" height="15" fill="rgb(222,22,37)" fg:x="165571" fg:w="841"/><text x="96.1043%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e72 (149 samples, 0.09%)</title><rect x="96.3412%" y="245" width="0.0863%" height="15" fill="rgb(237,53,32)" fg:x="166412" fg:w="149"/><text x="96.5912%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (312 samples, 0.18%)</title><rect x="96.4320%" y="245" width="0.1806%" height="15" fill="rgb(233,25,53)" fg:x="166569" fg:w="312"/><text x="96.6820%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (365 samples, 0.21%)</title><rect x="96.6208%" y="245" width="0.2113%" height="15" fill="rgb(210,40,34)" fg:x="166895" fg:w="365"/><text x="96.8708%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (325 samples, 0.19%)</title><rect x="96.8321%" y="245" width="0.1882%" height="15" fill="rgb(241,220,44)" fg:x="167260" fg:w="325"/><text x="97.0821%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (167,664 samples, 97.07%)</title><rect x="0.0000%" y="261" width="97.0660%" height="15" fill="rgb(235,28,35)" fg:x="0" fg:w="167664"/><text x="0.2500%" y="271.50">datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a4d (79 samples, 0.05%)</title><rect x="97.0202%" y="245" width="0.0457%" height="15" fill="rgb(210,56,17)" fg:x="167585" fg:w="79"/><text x="97.2702%" y="255.50"></text></g><g><title>datoe_fun_remover`alloc::vec::in_place_collect::_&lt;impl alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt; for alloc::vec::Vec&lt;T&gt;&gt;::from_iter (104 samples, 0.06%)</title><rect x="97.0671%" y="261" width="0.0602%" height="15" fill="rgb(224,130,29)" fg:x="167666" fg:w="104"/><text x="97.3171%" y="271.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (55 samples, 0.03%)</title><rect x="97.0955%" y="245" width="0.0318%" height="15" fill="rgb(235,212,8)" fg:x="167715" fg:w="55"/><text x="97.3455%" y="255.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (42 samples, 0.02%)</title><rect x="97.1030%" y="229" width="0.0243%" height="15" fill="rgb(223,33,50)" fg:x="167728" fg:w="42"/><text x="97.3530%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (21 samples, 0.01%)</title><rect x="97.2275%" y="133" width="0.0122%" height="15" fill="rgb(219,149,13)" fg:x="167943" fg:w="21"/><text x="97.4775%" y="143.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (86 samples, 0.05%)</title><rect x="97.1922%" y="149" width="0.0498%" height="15" fill="rgb(250,156,29)" fg:x="167882" fg:w="86"/><text x="97.4422%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (172 samples, 0.10%)</title><rect x="97.1812%" y="165" width="0.0996%" height="15" fill="rgb(216,193,19)" fg:x="167863" fg:w="172"/><text x="97.4312%" y="175.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (269 samples, 0.16%)</title><rect x="97.1615%" y="181" width="0.1557%" height="15" fill="rgb(216,135,14)" fg:x="167829" fg:w="269"/><text x="97.4115%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20959d (18 samples, 0.01%)</title><rect x="97.3410%" y="181" width="0.0104%" height="15" fill="rgb(241,47,5)" fg:x="168139" fg:w="18"/><text x="97.5910%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (27 samples, 0.02%)</title><rect x="97.3531%" y="181" width="0.0156%" height="15" fill="rgb(233,42,35)" fg:x="168160" fg:w="27"/><text x="97.6031%" y="191.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (383 samples, 0.22%)</title><rect x="97.1522%" y="197" width="0.2217%" height="15" fill="rgb(231,13,6)" fg:x="167813" fg:w="383"/><text x="97.4022%" y="207.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (19 samples, 0.01%)</title><rect x="97.3763%" y="197" width="0.0110%" height="15" fill="rgb(207,181,40)" fg:x="168200" fg:w="19"/><text x="97.6263%" y="207.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (19 samples, 0.01%)</title><rect x="97.3763%" y="181" width="0.0110%" height="15" fill="rgb(254,173,49)" fg:x="168200" fg:w="19"/><text x="97.6263%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (19 samples, 0.01%)</title><rect x="97.3763%" y="165" width="0.0110%" height="15" fill="rgb(221,1,38)" fg:x="168200" fg:w="19"/><text x="97.6263%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (19 samples, 0.01%)</title><rect x="97.3763%" y="149" width="0.0110%" height="15" fill="rgb(206,124,46)" fg:x="168200" fg:w="19"/><text x="97.6263%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (33 samples, 0.02%)</title><rect x="97.4330%" y="181" width="0.0191%" height="15" fill="rgb(249,21,11)" fg:x="168298" fg:w="33"/><text x="97.6830%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b7de (27 samples, 0.02%)</title><rect x="97.5060%" y="85" width="0.0156%" height="15" fill="rgb(222,201,40)" fg:x="168424" fg:w="27"/><text x="97.7560%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (53 samples, 0.03%)</title><rect x="97.4973%" y="101" width="0.0307%" height="15" fill="rgb(235,61,29)" fg:x="168409" fg:w="53"/><text x="97.7473%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c7a0 (54 samples, 0.03%)</title><rect x="97.4973%" y="117" width="0.0313%" height="15" fill="rgb(219,207,3)" fg:x="168409" fg:w="54"/><text x="97.7473%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (27 samples, 0.02%)</title><rect x="97.5314%" y="117" width="0.0156%" height="15" fill="rgb(222,56,46)" fg:x="168468" fg:w="27"/><text x="97.7814%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d532 (40 samples, 0.02%)</title><rect x="97.5534%" y="117" width="0.0232%" height="15" fill="rgb(239,76,54)" fg:x="168506" fg:w="40"/><text x="97.8034%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (155 samples, 0.09%)</title><rect x="97.4886%" y="133" width="0.0897%" height="15" fill="rgb(231,124,27)" fg:x="168394" fg:w="155"/><text x="97.7386%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (164 samples, 0.09%)</title><rect x="97.4869%" y="149" width="0.0949%" height="15" fill="rgb(249,195,6)" fg:x="168391" fg:w="164"/><text x="97.7369%" y="159.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (218 samples, 0.13%)</title><rect x="97.4573%" y="165" width="0.1262%" height="15" fill="rgb(237,174,47)" fg:x="168340" fg:w="218"/><text x="97.7073%" y="175.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (231 samples, 0.13%)</title><rect x="97.4527%" y="181" width="0.1337%" height="15" fill="rgb(206,201,31)" fg:x="168332" fg:w="231"/><text x="97.7027%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::move_codon_front (31 samples, 0.02%)</title><rect x="97.6131%" y="133" width="0.0179%" height="15" fill="rgb(231,57,52)" fg:x="168609" fg:w="31"/><text x="97.8631%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::move_codon_front (61 samples, 0.04%)</title><rect x="97.6090%" y="149" width="0.0353%" height="15" fill="rgb(248,177,22)" fg:x="168602" fg:w="61"/><text x="97.8590%" y="159.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (23 samples, 0.01%)</title><rect x="97.6310%" y="133" width="0.0133%" height="15" fill="rgb(215,211,37)" fg:x="168640" fg:w="23"/><text x="97.8810%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::move_codon_front (108 samples, 0.06%)</title><rect x="97.5969%" y="165" width="0.0625%" height="15" fill="rgb(241,128,51)" fg:x="168581" fg:w="108"/><text x="97.8469%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (26 samples, 0.02%)</title><rect x="97.6443%" y="149" width="0.0151%" height="15" fill="rgb(227,165,31)" fg:x="168663" fg:w="26"/><text x="97.8943%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::move_codon_front (134 samples, 0.08%)</title><rect x="97.5864%" y="181" width="0.0776%" height="15" fill="rgb(228,167,24)" fg:x="168563" fg:w="134"/><text x="97.8364%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d532 (30 samples, 0.02%)</title><rect x="97.6918%" y="101" width="0.0174%" height="15" fill="rgb(228,143,12)" fg:x="168745" fg:w="30"/><text x="97.9418%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (45 samples, 0.03%)</title><rect x="97.6837%" y="117" width="0.0261%" height="15" fill="rgb(249,149,8)" fg:x="168731" fg:w="45"/><text x="97.9337%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (68 samples, 0.04%)</title><rect x="97.6715%" y="165" width="0.0394%" height="15" fill="rgb(243,35,44)" fg:x="168710" fg:w="68"/><text x="97.9215%" y="175.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (63 samples, 0.04%)</title><rect x="97.6744%" y="149" width="0.0365%" height="15" fill="rgb(246,89,9)" fg:x="168715" fg:w="63"/><text x="97.9244%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (49 samples, 0.03%)</title><rect x="97.6825%" y="133" width="0.0284%" height="15" fill="rgb(233,213,13)" fg:x="168729" fg:w="49"/><text x="97.9325%" y="143.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (20 samples, 0.01%)</title><rect x="97.7312%" y="149" width="0.0116%" height="15" fill="rgb(233,141,41)" fg:x="168813" fg:w="20"/><text x="97.9812%" y="159.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (27 samples, 0.02%)</title><rect x="97.7549%" y="133" width="0.0156%" height="15" fill="rgb(239,167,4)" fg:x="168854" fg:w="27"/><text x="98.0049%" y="143.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (22 samples, 0.01%)</title><rect x="97.7578%" y="117" width="0.0127%" height="15" fill="rgb(209,217,16)" fg:x="168859" fg:w="22"/><text x="98.0078%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c7a0 (28 samples, 0.02%)</title><rect x="97.7908%" y="53" width="0.0162%" height="15" fill="rgb(219,88,35)" fg:x="168916" fg:w="28"/><text x="98.0408%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (26 samples, 0.02%)</title><rect x="97.7920%" y="37" width="0.0151%" height="15" fill="rgb(220,193,23)" fg:x="168918" fg:w="26"/><text x="98.0420%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (50 samples, 0.03%)</title><rect x="97.7867%" y="69" width="0.0289%" height="15" fill="rgb(230,90,52)" fg:x="168909" fg:w="50"/><text x="98.0367%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (52 samples, 0.03%)</title><rect x="97.7867%" y="85" width="0.0301%" height="15" fill="rgb(252,106,19)" fg:x="168909" fg:w="52"/><text x="98.0367%" y="95.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (66 samples, 0.04%)</title><rect x="97.7792%" y="101" width="0.0382%" height="15" fill="rgb(206,74,20)" fg:x="168896" fg:w="66"/><text x="98.0292%" y="111.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (69 samples, 0.04%)</title><rect x="97.7781%" y="117" width="0.0399%" height="15" fill="rgb(230,138,44)" fg:x="168894" fg:w="69"/><text x="98.0281%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::rec (295 samples, 0.17%)</title><rect x="97.6640%" y="181" width="0.1708%" height="15" fill="rgb(235,182,43)" fg:x="168697" fg:w="295"/><text x="97.9140%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::rec (214 samples, 0.12%)</title><rect x="97.7109%" y="165" width="0.1239%" height="15" fill="rgb(242,16,51)" fg:x="168778" fg:w="214"/><text x="97.9609%" y="175.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::rec (159 samples, 0.09%)</title><rect x="97.7427%" y="149" width="0.0921%" height="15" fill="rgb(248,9,4)" fg:x="168833" fg:w="159"/><text x="97.9927%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::rec (111 samples, 0.06%)</title><rect x="97.7705%" y="133" width="0.0643%" height="15" fill="rgb(210,31,22)" fg:x="168881" fg:w="111"/><text x="98.0205%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom::rec (29 samples, 0.02%)</title><rect x="97.8180%" y="117" width="0.0168%" height="15" fill="rgb(239,54,39)" fg:x="168963" fg:w="29"/><text x="98.0680%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (22 samples, 0.01%)</title><rect x="97.8221%" y="101" width="0.0127%" height="15" fill="rgb(230,99,41)" fg:x="168970" fg:w="22"/><text x="98.0721%" y="111.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (22 samples, 0.01%)</title><rect x="97.8221%" y="85" width="0.0127%" height="15" fill="rgb(253,106,12)" fg:x="168970" fg:w="22"/><text x="98.0721%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (19 samples, 0.01%)</title><rect x="97.8238%" y="69" width="0.0110%" height="15" fill="rgb(213,46,41)" fg:x="168973" fg:w="19"/><text x="98.0738%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (19 samples, 0.01%)</title><rect x="97.8238%" y="53" width="0.0110%" height="15" fill="rgb(215,133,35)" fg:x="168973" fg:w="19"/><text x="98.0738%" y="63.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::codon::codons_from_atom (842 samples, 0.49%)</title><rect x="97.3879%" y="197" width="0.4875%" height="15" fill="rgb(213,28,5)" fg:x="168220" fg:w="842"/><text x="97.6379%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20e006 (32 samples, 0.02%)</title><rect x="97.8857%" y="197" width="0.0185%" height="15" fill="rgb(215,77,49)" fg:x="169080" fg:w="32"/><text x="98.1357%" y="207.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomGroup::new (1,483 samples, 0.86%)</title><rect x="97.1378%" y="213" width="0.8586%" height="15" fill="rgb(248,100,22)" fg:x="167788" fg:w="1483"/><text x="97.3878%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (145 samples, 0.08%)</title><rect x="97.9124%" y="197" width="0.0839%" height="15" fill="rgb(208,67,9)" fg:x="169126" fg:w="145"/><text x="98.1624%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,490 samples, 0.86%)</title><rect x="97.1378%" y="245" width="0.8626%" height="15" fill="rgb(219,133,21)" fg:x="167788" fg:w="1490"/><text x="97.3878%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,490 samples, 0.86%)</title><rect x="97.1378%" y="229" width="0.8626%" height="15" fill="rgb(246,46,29)" fg:x="167788" fg:w="1490"/><text x="97.3878%" y="239.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (52 samples, 0.03%)</title><rect x="98.0328%" y="197" width="0.0301%" height="15" fill="rgb(246,185,52)" fg:x="169334" fg:w="52"/><text x="98.2828%" y="207.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (109 samples, 0.06%)</title><rect x="98.0258%" y="213" width="0.0631%" height="15" fill="rgb(252,136,11)" fg:x="169322" fg:w="109"/><text x="98.2758%" y="223.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (201 samples, 0.12%)</title><rect x="98.0114%" y="229" width="0.1164%" height="15" fill="rgb(219,138,53)" fg:x="169297" fg:w="201"/><text x="98.2614%" y="239.50"></text></g><g><title>libsystem_kernel.dylib`madvise (22 samples, 0.01%)</title><rect x="98.1295%" y="197" width="0.0127%" height="15" fill="rgb(211,51,23)" fg:x="169501" fg:w="22"/><text x="98.3795%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223dbf (23 samples, 0.01%)</title><rect x="98.1295%" y="213" width="0.0133%" height="15" fill="rgb(247,221,28)" fg:x="169501" fg:w="23"/><text x="98.3795%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2130c9 (24 samples, 0.01%)</title><rect x="98.1295%" y="229" width="0.0139%" height="15" fill="rgb(251,222,45)" fg:x="169501" fg:w="24"/><text x="98.3795%" y="239.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (277 samples, 0.16%)</title><rect x="98.0073%" y="245" width="0.1604%" height="15" fill="rgb(217,162,53)" fg:x="169290" fg:w="277"/><text x="98.2573%" y="255.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (42 samples, 0.02%)</title><rect x="98.1677%" y="245" width="0.0243%" height="15" fill="rgb(229,93,14)" fg:x="169567" fg:w="42"/><text x="98.4177%" y="255.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (29 samples, 0.02%)</title><rect x="98.1752%" y="229" width="0.0168%" height="15" fill="rgb(209,67,49)" fg:x="169580" fg:w="29"/><text x="98.4252%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomStore::new (1,857 samples, 1.08%)</title><rect x="97.1285%" y="261" width="1.0751%" height="15" fill="rgb(213,87,29)" fg:x="167772" fg:w="1857"/><text x="97.3785%" y="271.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (82 samples, 0.05%)</title><rect x="98.2308%" y="213" width="0.0475%" height="15" fill="rgb(205,151,52)" fg:x="169676" fg:w="82"/><text x="98.4808%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (20 samples, 0.01%)</title><rect x="98.3095%" y="213" width="0.0116%" height="15" fill="rgb(253,215,39)" fg:x="169812" fg:w="20"/><text x="98.5595%" y="223.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (175 samples, 0.10%)</title><rect x="98.2233%" y="229" width="0.1013%" height="15" fill="rgb(221,220,41)" fg:x="169663" fg:w="175"/><text x="98.4733%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (22 samples, 0.01%)</title><rect x="98.3524%" y="229" width="0.0127%" height="15" fill="rgb(218,133,21)" fg:x="169886" fg:w="22"/><text x="98.6024%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (262 samples, 0.15%)</title><rect x="98.2157%" y="245" width="0.1517%" height="15" fill="rgb(221,193,43)" fg:x="169650" fg:w="262"/><text x="98.4657%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (30 samples, 0.02%)</title><rect x="98.3801%" y="197" width="0.0174%" height="15" fill="rgb(240,128,52)" fg:x="169934" fg:w="30"/><text x="98.6301%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (59 samples, 0.03%)</title><rect x="98.3755%" y="213" width="0.0342%" height="15" fill="rgb(253,114,12)" fg:x="169926" fg:w="59"/><text x="98.6255%" y="223.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (90 samples, 0.05%)</title><rect x="98.3732%" y="229" width="0.0521%" height="15" fill="rgb(215,223,47)" fg:x="169922" fg:w="90"/><text x="98.6232%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (111 samples, 0.06%)</title><rect x="98.3680%" y="245" width="0.0643%" height="15" fill="rgb(248,225,23)" fg:x="169913" fg:w="111"/><text x="98.6180%" y="255.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (38 samples, 0.02%)</title><rect x="98.4351%" y="229" width="0.0220%" height="15" fill="rgb(250,108,0)" fg:x="170029" fg:w="38"/><text x="98.6851%" y="239.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (76 samples, 0.04%)</title><rect x="98.4340%" y="245" width="0.0440%" height="15" fill="rgb(228,208,7)" fg:x="170027" fg:w="76"/><text x="98.6840%" y="255.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20959d (22 samples, 0.01%)</title><rect x="98.5197%" y="229" width="0.0127%" height="15" fill="rgb(244,45,10)" fg:x="170175" fg:w="22"/><text x="98.7697%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (22 samples, 0.01%)</title><rect x="98.5324%" y="229" width="0.0127%" height="15" fill="rgb(207,125,25)" fg:x="170197" fg:w="22"/><text x="98.7824%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::new_express (104 samples, 0.06%)</title><rect x="98.4861%" y="245" width="0.0602%" height="15" fill="rgb(210,195,18)" fg:x="170117" fg:w="104"/><text x="98.7361%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (21 samples, 0.01%)</title><rect x="98.5480%" y="229" width="0.0122%" height="15" fill="rgb(249,80,12)" fg:x="170224" fg:w="21"/><text x="98.7980%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms::rec (50 samples, 0.03%)</title><rect x="98.5463%" y="245" width="0.0289%" height="15" fill="rgb(221,65,9)" fg:x="170221" fg:w="50"/><text x="98.7963%" y="255.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms::rec (677 samples, 0.39%)</title><rect x="98.2036%" y="261" width="0.3919%" height="15" fill="rgb(235,49,36)" fg:x="169629" fg:w="677"/><text x="98.4536%" y="271.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (22 samples, 0.01%)</title><rect x="99.1038%" y="181" width="0.0127%" height="15" fill="rgb(225,32,20)" fg:x="171184" fg:w="22"/><text x="99.3538%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (123 samples, 0.07%)</title><rect x="99.1166%" y="181" width="0.0712%" height="15" fill="rgb(215,141,46)" fg:x="171206" fg:w="123"/><text x="99.3666%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (22 samples, 0.01%)</title><rect x="99.1988%" y="181" width="0.0127%" height="15" fill="rgb(250,160,47)" fg:x="171348" fg:w="22"/><text x="99.4488%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (28 samples, 0.02%)</title><rect x="99.2231%" y="181" width="0.0162%" height="15" fill="rgb(216,222,40)" fg:x="171390" fg:w="28"/><text x="99.4731%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (49 samples, 0.03%)</title><rect x="99.2752%" y="181" width="0.0284%" height="15" fill="rgb(234,217,39)" fg:x="171480" fg:w="49"/><text x="99.5252%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (24 samples, 0.01%)</title><rect x="99.3151%" y="181" width="0.0139%" height="15" fill="rgb(207,178,40)" fg:x="171549" fg:w="24"/><text x="99.5651%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (88 samples, 0.05%)</title><rect x="99.3336%" y="181" width="0.0509%" height="15" fill="rgb(221,136,13)" fg:x="171581" fg:w="88"/><text x="99.5836%" y="191.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (861 samples, 0.50%)</title><rect x="98.9151%" y="197" width="0.4985%" height="15" fill="rgb(249,199,10)" fg:x="170858" fg:w="861"/><text x="99.1651%" y="207.50"></text></g><g><title>datoe_fun_remover`__rdl_alloc (27 samples, 0.02%)</title><rect x="99.4135%" y="197" width="0.0156%" height="15" fill="rgb(249,222,13)" fg:x="171719" fg:w="27"/><text x="99.6635%" y="207.50"></text></g><g><title>datoe_fun_remover`itertools::adaptors::multi_product::MultiProduct&lt;I&gt;::iterate_last (150 samples, 0.09%)</title><rect x="99.4315%" y="197" width="0.0868%" height="15" fill="rgb(244,185,38)" fg:x="171750" fg:w="150"/><text x="99.6815%" y="207.50"></text></g><g><title>datoe_fun_remover`itertools::adaptors::multi_product::MultiProduct&lt;I&gt;::iterate_last (58 samples, 0.03%)</title><rect x="99.4848%" y="181" width="0.0336%" height="15" fill="rgb(236,202,9)" fg:x="171842" fg:w="58"/><text x="99.7348%" y="191.50"></text></g><g><title>datoe_fun_remover`itertools::adaptors::multi_product::MultiProduct&lt;I&gt;::iterate_last (33 samples, 0.02%)</title><rect x="99.4992%" y="165" width="0.0191%" height="15" fill="rgb(250,229,37)" fg:x="171867" fg:w="33"/><text x="99.7492%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (147 samples, 0.09%)</title><rect x="99.6092%" y="197" width="0.0851%" height="15" fill="rgb(206,174,23)" fg:x="172057" fg:w="147"/><text x="99.8592%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (56 samples, 0.03%)</title><rect x="99.7383%" y="197" width="0.0324%" height="15" fill="rgb(211,33,43)" fg:x="172280" fg:w="56"/><text x="99.9883%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (51 samples, 0.03%)</title><rect x="99.7731%" y="197" width="0.0295%" height="15" fill="rgb(245,58,50)" fg:x="172340" fg:w="51"/><text x="100.0231%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (101 samples, 0.06%)</title><rect x="99.8095%" y="197" width="0.0585%" height="15" fill="rgb(244,68,36)" fg:x="172403" fg:w="101"/><text x="100.0595%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (2,265 samples, 1.31%)</title><rect x="98.5967%" y="213" width="1.3113%" height="15" fill="rgb(232,229,15)" fg:x="170308" fg:w="2265"/><text x="98.8467%" y="223.50"></text></g><g><title>datoe_fun_remover`__rdl_dealloc (22 samples, 0.01%)</title><rect x="99.9103%" y="213" width="0.0127%" height="15" fill="rgb(254,30,23)" fg:x="172577" fg:w="22"/><text x="100.1603%" y="223.50"></text></g><g><title>libsystem_m.dylib`trunc (35 samples, 0.02%)</title><rect x="99.9276%" y="213" width="0.0203%" height="15" fill="rgb(235,160,14)" fg:x="172607" fg:w="35"/><text x="100.1776%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_goal_paths (2,421 samples, 1.40%)</title><rect x="98.5955%" y="261" width="1.4016%" height="15" fill="rgb(212,155,44)" fg:x="170306" fg:w="2421"/><text x="98.8455%" y="271.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,421 samples, 1.40%)</title><rect x="98.5955%" y="245" width="1.4016%" height="15" fill="rgb(226,2,50)" fg:x="170306" fg:w="2421"/><text x="98.8455%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2,421 samples, 1.40%)</title><rect x="98.5955%" y="229" width="1.4016%" height="15" fill="rgb(234,177,6)" fg:x="170306" fg:w="2421"/><text x="98.8455%" y="239.50"></text></g><g><title>all (172,732 samples, 100%)</title><rect x="0.0000%" y="373" width="100.0000%" height="15" fill="rgb(217,24,9)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="383.50"></text></g><g><title>dyld`start (172,732 samples, 100.00%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(220,13,46)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="367.50">dyld`start</text></g><g><title>datoe_fun_remover`main (172,732 samples, 100.00%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(239,221,27)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="351.50">datoe_fun_remover`main</text></g><g><title>datoe_fun_remover`std::rt::lang_start_internal (172,732 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(222,198,25)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="335.50">datoe_fun_remover`std::rt::lang_start_internal</text></g><g><title>datoe_fun_remover`std::rt::lang_start::_{{closure}} (172,732 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(211,99,13)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="319.50">datoe_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (172,732 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(232,111,31)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="303.50">datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>datoe_fun_remover`datoe_fun_remover::main (172,732 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(245,82,37)" fg:x="0" fg:w="172732"/><text x="0.2500%" y="287.50">datoe_fun_remover`datoe_fun_remover::main</text></g></svg></svg>