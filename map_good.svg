<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="390" onload="init(evt)" viewBox="0 0 1200 390" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="390" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="373.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="373.00"> </text><svg id="frames" x="10" width="1180" total_samples="55803"><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (6 samples, 0.01%)</title><rect x="0.0269%" y="117" width="0.0108%" height="15" fill="rgb(227,0,7)" fg:x="15" fg:w="6"/><text x="0.2769%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (12 samples, 0.02%)</title><rect x="0.0197%" y="181" width="0.0215%" height="15" fill="rgb(217,0,24)" fg:x="11" fg:w="12"/><text x="0.2697%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (12 samples, 0.02%)</title><rect x="0.0197%" y="165" width="0.0215%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="12"/><text x="0.2697%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (11 samples, 0.02%)</title><rect x="0.0215%" y="149" width="0.0197%" height="15" fill="rgb(248,212,6)" fg:x="12" fg:w="11"/><text x="0.2715%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (11 samples, 0.02%)</title><rect x="0.0215%" y="133" width="0.0197%" height="15" fill="rgb(208,68,35)" fg:x="12" fg:w="11"/><text x="0.2715%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (28 samples, 0.05%)</title><rect x="0.0036%" y="197" width="0.0502%" height="15" fill="rgb(232,128,0)" fg:x="2" fg:w="28"/><text x="0.2536%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (30 samples, 0.05%)</title><rect x="0.0538%" y="197" width="0.0538%" height="15" fill="rgb(207,160,47)" fg:x="30" fg:w="30"/><text x="0.3038%" y="207.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (12 samples, 0.02%)</title><rect x="0.1093%" y="197" width="0.0215%" height="15" fill="rgb(228,23,34)" fg:x="61" fg:w="12"/><text x="0.3593%" y="207.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (6 samples, 0.01%)</title><rect x="0.1308%" y="165" width="0.0108%" height="15" fill="rgb(218,30,26)" fg:x="73" fg:w="6"/><text x="0.3808%" y="175.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (12 samples, 0.02%)</title><rect x="0.1308%" y="181" width="0.0215%" height="15" fill="rgb(220,122,19)" fg:x="73" fg:w="12"/><text x="0.3808%" y="191.50"></text></g><g><title>dateo_fun_remover`core::ptr::drop_in_place&lt;alloc::boxed::Box&lt;dateo_fun_remover::finder::atom::Atom&gt;&gt; (18 samples, 0.03%)</title><rect x="0.1308%" y="197" width="0.0323%" height="15" fill="rgb(250,228,42)" fg:x="73" fg:w="18"/><text x="0.3808%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (6 samples, 0.01%)</title><rect x="0.1828%" y="133" width="0.0108%" height="15" fill="rgb(240,193,28)" fg:x="102" fg:w="6"/><text x="0.4328%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (12 samples, 0.02%)</title><rect x="0.1792%" y="149" width="0.0215%" height="15" fill="rgb(216,20,37)" fg:x="100" fg:w="12"/><text x="0.4292%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (22 samples, 0.04%)</title><rect x="0.1738%" y="165" width="0.0394%" height="15" fill="rgb(206,188,39)" fg:x="97" fg:w="22"/><text x="0.4238%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::test (33 samples, 0.06%)</title><rect x="0.1631%" y="197" width="0.0591%" height="15" fill="rgb(217,207,13)" fg:x="91" fg:w="33"/><text x="0.4131%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::eval (28 samples, 0.05%)</title><rect x="0.1720%" y="181" width="0.0502%" height="15" fill="rgb(231,73,38)" fg:x="96" fg:w="28"/><text x="0.4220%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (410 samples, 0.73%)</title><rect x="64.1991%" y="165" width="0.7347%" height="15" fill="rgb(225,20,46)" fg:x="35825" fg:w="410"/><text x="64.4491%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (36,288 samples, 65.03%)</title><rect x="0.5089%" y="181" width="65.0288%" height="15" fill="rgb(210,31,41)" fg:x="284" fg:w="36288"/><text x="0.7589%" y="191.50">dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold</text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (337 samples, 0.60%)</title><rect x="64.9338%" y="165" width="0.6039%" height="15" fill="rgb(221,200,47)" fg:x="36235" fg:w="337"/><text x="65.1838%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (171 samples, 0.31%)</title><rect x="65.5377%" y="181" width="0.3064%" height="15" fill="rgb(226,26,5)" fg:x="36572" fg:w="171"/><text x="65.7877%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (171 samples, 0.31%)</title><rect x="65.5377%" y="165" width="0.3064%" height="15" fill="rgb(249,33,26)" fg:x="36572" fg:w="171"/><text x="65.7877%" y="175.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (17 samples, 0.03%)</title><rect x="65.8441%" y="181" width="0.0305%" height="15" fill="rgb(235,183,28)" fg:x="36743" fg:w="17"/><text x="66.0941%" y="191.50"></text></g><g><title>dateo_fun_remover`num_traits::float::integer_decode_f64 (87 samples, 0.16%)</title><rect x="65.8746%" y="181" width="0.1559%" height="15" fill="rgb(221,5,38)" fg:x="36760" fg:w="87"/><text x="66.1246%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (14 samples, 0.03%)</title><rect x="66.0323%" y="165" width="0.0251%" height="15" fill="rgb(247,18,42)" fg:x="36848" fg:w="14"/><text x="66.2823%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects (37,078 samples, 66.44%)</title><rect x="0.2240%" y="197" width="66.4445%" height="15" fill="rgb(241,131,45)" fg:x="125" fg:w="37078"/><text x="0.4740%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::find_val_intersects</text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (355 samples, 0.64%)</title><rect x="66.0323%" y="181" width="0.6362%" height="15" fill="rgb(249,31,29)" fg:x="36848" fg:w="355"/><text x="66.2823%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (341 samples, 0.61%)</title><rect x="66.0574%" y="165" width="0.6111%" height="15" fill="rgb(225,111,53)" fg:x="36862" fg:w="341"/><text x="66.3074%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (341 samples, 0.61%)</title><rect x="66.0574%" y="149" width="0.6111%" height="15" fill="rgb(238,160,17)" fg:x="36862" fg:w="341"/><text x="66.3074%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (341 samples, 0.61%)</title><rect x="66.0574%" y="133" width="0.6111%" height="15" fill="rgb(214,148,48)" fg:x="36862" fg:w="341"/><text x="66.3074%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (7 samples, 0.01%)</title><rect x="66.6756%" y="181" width="0.0125%" height="15" fill="rgb(232,36,49)" fg:x="37207" fg:w="7"/><text x="66.9256%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom (12 samples, 0.02%)</title><rect x="66.6685%" y="197" width="0.0215%" height="15" fill="rgb(209,103,24)" fg:x="37203" fg:w="12"/><text x="66.9185%" y="207.50"></text></g><g><title>dateo_fun_remover`hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (8 samples, 0.01%)</title><rect x="66.6935%" y="181" width="0.0143%" height="15" fill="rgb(229,88,8)" fg:x="37217" fg:w="8"/><text x="66.9435%" y="191.50"></text></g><g><title>dateo_fun_remover`hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.01%)</title><rect x="66.6971%" y="165" width="0.0108%" height="15" fill="rgb(213,181,19)" fg:x="37219" fg:w="6"/><text x="66.9471%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::fill_map_rec (11 samples, 0.02%)</title><rect x="66.6900%" y="197" width="0.0197%" height="15" fill="rgb(254,191,54)" fg:x="37215" fg:w="11"/><text x="66.9400%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::atom::Atom::new_express (9 samples, 0.02%)</title><rect x="66.7115%" y="181" width="0.0161%" height="15" fill="rgb(241,83,37)" fg:x="37227" fg:w="9"/><text x="66.9615%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;dateo_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (12 samples, 0.02%)</title><rect x="66.7419%" y="149" width="0.0215%" height="15" fill="rgb(233,36,39)" fg:x="37244" fg:w="12"/><text x="66.9919%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (13 samples, 0.02%)</title><rect x="66.7419%" y="165" width="0.0233%" height="15" fill="rgb(226,3,54)" fg:x="37244" fg:w="13"/><text x="66.9919%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (18 samples, 0.03%)</title><rect x="66.7348%" y="181" width="0.0323%" height="15" fill="rgb(245,192,40)" fg:x="37240" fg:w="18"/><text x="66.9848%" y="191.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::val_to_atom_rev::rec (33 samples, 0.06%)</title><rect x="66.7097%" y="197" width="0.0591%" height="15" fill="rgb(238,167,29)" fg:x="37226" fg:w="33"/><text x="66.9597%" y="207.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41 samples, 0.07%)</title><rect x="67.9390%" y="181" width="0.0735%" height="15" fill="rgb(232,182,51)" fg:x="37912" fg:w="41"/><text x="68.1890%" y="191.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (2,101 samples, 3.77%)</title><rect x="68.0125%" y="181" width="3.7650%" height="15" fill="rgb(231,60,39)" fg:x="37953" fg:w="2101"/><text x="68.2625%" y="191.50">date..</text></g><g><title>dateo_fun_remover`__rdl_dealloc (29 samples, 0.05%)</title><rect x="71.7811%" y="181" width="0.0520%" height="15" fill="rgb(208,69,12)" fg:x="40056" fg:w="29"/><text x="72.0311%" y="191.50"></text></g><g><title>dateo_fun_remover`__rust_dealloc (9 samples, 0.02%)</title><rect x="71.8331%" y="181" width="0.0161%" height="15" fill="rgb(235,93,37)" fg:x="40085" fg:w="9"/><text x="72.0831%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (32 samples, 0.06%)</title><rect x="71.8492%" y="181" width="0.0573%" height="15" fill="rgb(213,116,39)" fg:x="40094" fg:w="32"/><text x="72.0992%" y="191.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (32 samples, 0.06%)</title><rect x="71.8492%" y="165" width="0.0573%" height="15" fill="rgb(222,207,29)" fg:x="40094" fg:w="32"/><text x="72.0992%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (32 samples, 0.06%)</title><rect x="71.8492%" y="149" width="0.0573%" height="15" fill="rgb(206,96,30)" fg:x="40094" fg:w="32"/><text x="72.0992%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (32 samples, 0.06%)</title><rect x="71.8492%" y="133" width="0.0573%" height="15" fill="rgb(218,138,4)" fg:x="40094" fg:w="32"/><text x="72.0992%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7b3 (21 samples, 0.04%)</title><rect x="71.8689%" y="117" width="0.0376%" height="15" fill="rgb(250,191,14)" fg:x="40105" fg:w="21"/><text x="72.1189%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (21 samples, 0.04%)</title><rect x="71.8689%" y="101" width="0.0376%" height="15" fill="rgb(239,60,40)" fg:x="40105" fg:w="21"/><text x="72.1189%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (21 samples, 0.04%)</title><rect x="71.8689%" y="85" width="0.0376%" height="15" fill="rgb(206,27,48)" fg:x="40105" fg:w="21"/><text x="72.1189%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (21 samples, 0.04%)</title><rect x="71.8689%" y="69" width="0.0376%" height="15" fill="rgb(225,35,8)" fg:x="40105" fg:w="21"/><text x="72.1189%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (21 samples, 0.04%)</title><rect x="71.8689%" y="53" width="0.0376%" height="15" fill="rgb(250,213,24)" fg:x="40105" fg:w="21"/><text x="72.1189%" y="63.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (7 samples, 0.01%)</title><rect x="71.9083%" y="165" width="0.0125%" height="15" fill="rgb(247,123,22)" fg:x="40127" fg:w="7"/><text x="72.1583%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7a6 (8 samples, 0.01%)</title><rect x="71.9209%" y="101" width="0.0143%" height="15" fill="rgb(231,138,38)" fg:x="40134" fg:w="8"/><text x="72.1709%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (8 samples, 0.01%)</title><rect x="71.9209%" y="85" width="0.0143%" height="15" fill="rgb(231,145,46)" fg:x="40134" fg:w="8"/><text x="72.1709%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (9 samples, 0.02%)</title><rect x="71.9209%" y="165" width="0.0161%" height="15" fill="rgb(251,118,11)" fg:x="40134" fg:w="9"/><text x="72.1709%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (9 samples, 0.02%)</title><rect x="71.9209%" y="149" width="0.0161%" height="15" fill="rgb(217,147,25)" fg:x="40134" fg:w="9"/><text x="72.1709%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (9 samples, 0.02%)</title><rect x="71.9209%" y="133" width="0.0161%" height="15" fill="rgb(247,81,37)" fg:x="40134" fg:w="9"/><text x="72.1709%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (9 samples, 0.02%)</title><rect x="71.9209%" y="117" width="0.0161%" height="15" fill="rgb(209,12,38)" fg:x="40134" fg:w="9"/><text x="72.1709%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.02%)</title><rect x="71.9460%" y="133" width="0.0197%" height="15" fill="rgb(227,1,9)" fg:x="40148" fg:w="11"/><text x="72.1960%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (23 samples, 0.04%)</title><rect x="71.9370%" y="149" width="0.0412%" height="15" fill="rgb(248,47,43)" fg:x="40143" fg:w="23"/><text x="72.1870%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (25 samples, 0.04%)</title><rect x="71.9370%" y="165" width="0.0448%" height="15" fill="rgb(221,10,30)" fg:x="40143" fg:w="25"/><text x="72.1870%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.01%)</title><rect x="71.9925%" y="117" width="0.0108%" height="15" fill="rgb(210,229,1)" fg:x="40174" fg:w="6"/><text x="72.2425%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (7 samples, 0.01%)</title><rect x="71.9925%" y="149" width="0.0125%" height="15" fill="rgb(222,148,37)" fg:x="40174" fg:w="7"/><text x="72.2425%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (7 samples, 0.01%)</title><rect x="71.9925%" y="133" width="0.0125%" height="15" fill="rgb(234,67,33)" fg:x="40174" fg:w="7"/><text x="72.2425%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_node (17 samples, 0.03%)</title><rect x="71.9818%" y="165" width="0.0305%" height="15" fill="rgb(247,98,35)" fg:x="40168" fg:w="17"/><text x="72.2318%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (62 samples, 0.11%)</title><rect x="71.9083%" y="181" width="0.1111%" height="15" fill="rgb(247,138,52)" fg:x="40127" fg:w="62"/><text x="72.1583%" y="191.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (31 samples, 0.06%)</title><rect x="77.2414%" y="133" width="0.0556%" height="15" fill="rgb(213,79,30)" fg:x="43103" fg:w="31"/><text x="77.4914%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (659 samples, 1.18%)</title><rect x="77.2969%" y="133" width="1.1809%" height="15" fill="rgb(246,177,23)" fg:x="43134" fg:w="659"/><text x="77.5469%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (62 samples, 0.11%)</title><rect x="78.4779%" y="133" width="0.1111%" height="15" fill="rgb(230,62,27)" fg:x="43793" fg:w="62"/><text x="78.7279%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1,828 samples, 3.28%)</title><rect x="75.4906%" y="149" width="3.2758%" height="15" fill="rgb(216,154,8)" fg:x="42126" fg:w="1828"/><text x="75.7406%" y="159.50">dat..</text></g><g><title>libsystem_m.dylib`trunc (99 samples, 0.18%)</title><rect x="78.5890%" y="133" width="0.1774%" height="15" fill="rgb(244,35,45)" fg:x="43855" fg:w="99"/><text x="78.8390%" y="143.50"></text></g><g><title>dateo_fun_remover`DYLD-STUB$$trunc (13 samples, 0.02%)</title><rect x="78.7664%" y="149" width="0.0233%" height="15" fill="rgb(251,115,12)" fg:x="43954" fg:w="13"/><text x="79.0164%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (495 samples, 0.89%)</title><rect x="78.7915%" y="149" width="0.8870%" height="15" fill="rgb(240,54,50)" fg:x="43968" fg:w="495"/><text x="79.0415%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func_list::FuncList::push (62 samples, 0.11%)</title><rect x="79.6785%" y="149" width="0.1111%" height="15" fill="rgb(233,84,52)" fg:x="44463" fg:w="62"/><text x="79.9285%" y="159.50"></text></g><g><title>libsystem_m.dylib`trunc (33 samples, 0.06%)</title><rect x="79.7896%" y="149" width="0.0591%" height="15" fill="rgb(207,117,47)" fg:x="44525" fg:w="33"/><text x="80.0396%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (23 samples, 0.04%)</title><rect x="79.8488%" y="149" width="0.0412%" height="15" fill="rgb(249,43,39)" fg:x="44558" fg:w="23"/><text x="80.0988%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (17 samples, 0.03%)</title><rect x="79.8936%" y="149" width="0.0305%" height="15" fill="rgb(209,38,44)" fg:x="44583" fg:w="17"/><text x="80.1436%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (18 samples, 0.03%)</title><rect x="79.9276%" y="149" width="0.0323%" height="15" fill="rgb(236,212,23)" fg:x="44602" fg:w="18"/><text x="80.1776%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b2 (26 samples, 0.05%)</title><rect x="79.9634%" y="149" width="0.0466%" height="15" fill="rgb(242,79,21)" fg:x="44622" fg:w="26"/><text x="80.2134%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (24 samples, 0.04%)</title><rect x="80.0118%" y="149" width="0.0430%" height="15" fill="rgb(211,96,35)" fg:x="44649" fg:w="24"/><text x="80.2618%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (21 samples, 0.04%)</title><rect x="80.0548%" y="149" width="0.0376%" height="15" fill="rgb(253,215,40)" fg:x="44673" fg:w="21"/><text x="80.3048%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (58 samples, 0.10%)</title><rect x="80.0925%" y="149" width="0.1039%" height="15" fill="rgb(211,81,21)" fg:x="44694" fg:w="58"/><text x="80.3425%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (259 samples, 0.46%)</title><rect x="80.1964%" y="149" width="0.4641%" height="15" fill="rgb(208,190,38)" fg:x="44752" fg:w="259"/><text x="80.4464%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (17 samples, 0.03%)</title><rect x="80.6605%" y="149" width="0.0305%" height="15" fill="rgb(235,213,38)" fg:x="45011" fg:w="17"/><text x="80.9105%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093f8 (13 samples, 0.02%)</title><rect x="80.6910%" y="149" width="0.0233%" height="15" fill="rgb(237,122,38)" fg:x="45028" fg:w="13"/><text x="80.9410%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (78 samples, 0.14%)</title><rect x="80.7143%" y="149" width="0.1398%" height="15" fill="rgb(244,218,35)" fg:x="45041" fg:w="78"/><text x="80.9643%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (12 samples, 0.02%)</title><rect x="80.8541%" y="149" width="0.0215%" height="15" fill="rgb(240,68,47)" fg:x="45119" fg:w="12"/><text x="81.1041%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (27 samples, 0.05%)</title><rect x="80.8774%" y="149" width="0.0484%" height="15" fill="rgb(210,16,53)" fg:x="45132" fg:w="27"/><text x="81.1274%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (41 samples, 0.07%)</title><rect x="80.9258%" y="149" width="0.0735%" height="15" fill="rgb(235,124,12)" fg:x="45159" fg:w="41"/><text x="81.1758%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (19 samples, 0.03%)</title><rect x="81.0010%" y="149" width="0.0340%" height="15" fill="rgb(224,169,11)" fg:x="45201" fg:w="19"/><text x="81.2510%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (19 samples, 0.03%)</title><rect x="81.0351%" y="149" width="0.0340%" height="15" fill="rgb(250,166,2)" fg:x="45220" fg:w="19"/><text x="81.2851%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (7 samples, 0.01%)</title><rect x="81.0799%" y="149" width="0.0125%" height="15" fill="rgb(242,216,29)" fg:x="45245" fg:w="7"/><text x="81.3299%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (15 samples, 0.03%)</title><rect x="81.0924%" y="149" width="0.0269%" height="15" fill="rgb(230,116,27)" fg:x="45252" fg:w="15"/><text x="81.3424%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (13 samples, 0.02%)</title><rect x="81.1193%" y="149" width="0.0233%" height="15" fill="rgb(228,99,48)" fg:x="45267" fg:w="13"/><text x="81.3693%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (18 samples, 0.03%)</title><rect x="81.1426%" y="149" width="0.0323%" height="15" fill="rgb(253,11,6)" fg:x="45280" fg:w="18"/><text x="81.3926%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (23 samples, 0.04%)</title><rect x="81.1748%" y="149" width="0.0412%" height="15" fill="rgb(247,143,39)" fg:x="45298" fg:w="23"/><text x="81.4248%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (11 samples, 0.02%)</title><rect x="81.2161%" y="149" width="0.0197%" height="15" fill="rgb(236,97,10)" fg:x="45321" fg:w="11"/><text x="81.4661%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (11 samples, 0.02%)</title><rect x="81.2358%" y="149" width="0.0197%" height="15" fill="rgb(233,208,19)" fg:x="45332" fg:w="11"/><text x="81.4858%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (106 samples, 0.19%)</title><rect x="81.2662%" y="149" width="0.1900%" height="15" fill="rgb(216,164,2)" fg:x="45349" fg:w="106"/><text x="81.5162%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (18 samples, 0.03%)</title><rect x="81.4580%" y="149" width="0.0323%" height="15" fill="rgb(220,129,5)" fg:x="45456" fg:w="18"/><text x="81.7080%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (16 samples, 0.03%)</title><rect x="81.4938%" y="149" width="0.0287%" height="15" fill="rgb(242,17,10)" fg:x="45476" fg:w="16"/><text x="81.7438%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (59 samples, 0.11%)</title><rect x="81.5225%" y="149" width="0.1057%" height="15" fill="rgb(242,107,0)" fg:x="45492" fg:w="59"/><text x="81.7725%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (6 samples, 0.01%)</title><rect x="81.6300%" y="149" width="0.0108%" height="15" fill="rgb(251,28,31)" fg:x="45552" fg:w="6"/><text x="81.8800%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (18 samples, 0.03%)</title><rect x="81.6408%" y="149" width="0.0323%" height="15" fill="rgb(233,223,10)" fg:x="45558" fg:w="18"/><text x="81.8908%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (10 samples, 0.02%)</title><rect x="81.6730%" y="149" width="0.0179%" height="15" fill="rgb(215,21,27)" fg:x="45576" fg:w="10"/><text x="81.9230%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (206 samples, 0.37%)</title><rect x="81.6909%" y="149" width="0.3692%" height="15" fill="rgb(232,23,21)" fg:x="45586" fg:w="206"/><text x="81.9409%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209568 (8 samples, 0.01%)</title><rect x="82.0709%" y="149" width="0.0143%" height="15" fill="rgb(244,5,23)" fg:x="45798" fg:w="8"/><text x="82.3209%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (15 samples, 0.03%)</title><rect x="82.0852%" y="149" width="0.0269%" height="15" fill="rgb(226,81,46)" fg:x="45806" fg:w="15"/><text x="82.3352%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (16 samples, 0.03%)</title><rect x="82.1139%" y="149" width="0.0287%" height="15" fill="rgb(247,70,30)" fg:x="45822" fg:w="16"/><text x="82.3639%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (16 samples, 0.03%)</title><rect x="82.1497%" y="149" width="0.0287%" height="15" fill="rgb(212,68,19)" fg:x="45842" fg:w="16"/><text x="82.3997%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (13 samples, 0.02%)</title><rect x="82.1802%" y="149" width="0.0233%" height="15" fill="rgb(240,187,13)" fg:x="45859" fg:w="13"/><text x="82.4302%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (9 samples, 0.02%)</title><rect x="82.2053%" y="149" width="0.0161%" height="15" fill="rgb(223,113,26)" fg:x="45873" fg:w="9"/><text x="82.4553%" y="159.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (5,351 samples, 9.59%)</title><rect x="72.6359%" y="165" width="9.5891%" height="15" fill="rgb(206,192,2)" fg:x="40533" fg:w="5351"/><text x="72.8859%" y="175.50">dateo_fun_remo..</text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 0.02%)</title><rect x="82.2250%" y="165" width="0.0161%" height="15" fill="rgb(241,108,4)" fg:x="45884" fg:w="9"/><text x="82.4750%" y="175.50"></text></g><g><title>dateo_fun_remover`__rdl_alloc (24 samples, 0.04%)</title><rect x="82.2411%" y="165" width="0.0430%" height="15" fill="rgb(247,173,49)" fg:x="45893" fg:w="24"/><text x="82.4911%" y="175.50"></text></g><g><title>dateo_fun_remover`__rust_alloc (6 samples, 0.01%)</title><rect x="82.2841%" y="165" width="0.0108%" height="15" fill="rgb(224,114,35)" fg:x="45917" fg:w="6"/><text x="82.5341%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (11 samples, 0.02%)</title><rect x="82.3020%" y="117" width="0.0197%" height="15" fill="rgb(245,159,27)" fg:x="45927" fg:w="11"/><text x="82.5520%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (17 samples, 0.03%)</title><rect x="82.2949%" y="165" width="0.0305%" height="15" fill="rgb(245,172,44)" fg:x="45923" fg:w="17"/><text x="82.5449%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (16 samples, 0.03%)</title><rect x="82.2967%" y="149" width="0.0287%" height="15" fill="rgb(236,23,11)" fg:x="45924" fg:w="16"/><text x="82.5467%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (13 samples, 0.02%)</title><rect x="82.3020%" y="133" width="0.0233%" height="15" fill="rgb(205,117,38)" fg:x="45927" fg:w="13"/><text x="82.5520%" y="143.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::func::Func::apply_rev_if (53 samples, 0.09%)</title><rect x="82.3253%" y="165" width="0.0950%" height="15" fill="rgb(237,72,25)" fg:x="45940" fg:w="53"/><text x="82.5753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (16 samples, 0.03%)</title><rect x="82.4257%" y="165" width="0.0287%" height="15" fill="rgb(244,70,9)" fg:x="45996" fg:w="16"/><text x="82.6757%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (14 samples, 0.03%)</title><rect x="82.4561%" y="165" width="0.0251%" height="15" fill="rgb(217,125,39)" fg:x="46013" fg:w="14"/><text x="82.7061%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (13 samples, 0.02%)</title><rect x="82.4812%" y="165" width="0.0233%" height="15" fill="rgb(235,36,10)" fg:x="46027" fg:w="13"/><text x="82.7312%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (14 samples, 0.03%)</title><rect x="82.5099%" y="165" width="0.0251%" height="15" fill="rgb(251,123,47)" fg:x="46043" fg:w="14"/><text x="82.7599%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (10 samples, 0.02%)</title><rect x="82.5368%" y="165" width="0.0179%" height="15" fill="rgb(221,13,13)" fg:x="46058" fg:w="10"/><text x="82.7868%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (18 samples, 0.03%)</title><rect x="82.5565%" y="165" width="0.0323%" height="15" fill="rgb(238,131,9)" fg:x="46069" fg:w="18"/><text x="82.8065%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (11 samples, 0.02%)</title><rect x="82.5923%" y="165" width="0.0197%" height="15" fill="rgb(211,50,8)" fg:x="46089" fg:w="11"/><text x="82.8423%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (23 samples, 0.04%)</title><rect x="82.6120%" y="165" width="0.0412%" height="15" fill="rgb(245,182,24)" fg:x="46100" fg:w="23"/><text x="82.8620%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (22 samples, 0.04%)</title><rect x="82.6533%" y="165" width="0.0394%" height="15" fill="rgb(242,14,37)" fg:x="46123" fg:w="22"/><text x="82.9033%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (7 samples, 0.01%)</title><rect x="82.6927%" y="165" width="0.0125%" height="15" fill="rgb(246,228,12)" fg:x="46145" fg:w="7"/><text x="82.9427%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (7 samples, 0.01%)</title><rect x="82.7052%" y="165" width="0.0125%" height="15" fill="rgb(213,55,15)" fg:x="46152" fg:w="7"/><text x="82.9552%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (10 samples, 0.02%)</title><rect x="82.7178%" y="165" width="0.0179%" height="15" fill="rgb(209,9,3)" fg:x="46159" fg:w="10"/><text x="82.9678%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (10 samples, 0.02%)</title><rect x="82.7393%" y="165" width="0.0179%" height="15" fill="rgb(230,59,30)" fg:x="46171" fg:w="10"/><text x="82.9893%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (13 samples, 0.02%)</title><rect x="82.7626%" y="165" width="0.0233%" height="15" fill="rgb(209,121,21)" fg:x="46184" fg:w="13"/><text x="83.0126%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (8 samples, 0.01%)</title><rect x="82.7895%" y="165" width="0.0143%" height="15" fill="rgb(220,109,13)" fg:x="46199" fg:w="8"/><text x="83.0395%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (6 samples, 0.01%)</title><rect x="82.8074%" y="165" width="0.0108%" height="15" fill="rgb(232,18,1)" fg:x="46209" fg:w="6"/><text x="83.0574%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (6 samples, 0.01%)</title><rect x="82.8199%" y="165" width="0.0108%" height="15" fill="rgb(215,41,42)" fg:x="46216" fg:w="6"/><text x="83.0699%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (11 samples, 0.02%)</title><rect x="82.8343%" y="165" width="0.0197%" height="15" fill="rgb(224,123,36)" fg:x="46224" fg:w="11"/><text x="83.0843%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (300 samples, 0.54%)</title><rect x="82.8540%" y="165" width="0.5376%" height="15" fill="rgb(240,125,3)" fg:x="46235" fg:w="300"/><text x="83.1040%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (7 samples, 0.01%)</title><rect x="83.3934%" y="165" width="0.0125%" height="15" fill="rgb(205,98,50)" fg:x="46536" fg:w="7"/><text x="83.6434%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (17 samples, 0.03%)</title><rect x="83.4059%" y="165" width="0.0305%" height="15" fill="rgb(205,185,37)" fg:x="46543" fg:w="17"/><text x="83.6559%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (77 samples, 0.14%)</title><rect x="83.4453%" y="165" width="0.1380%" height="15" fill="rgb(238,207,15)" fg:x="46565" fg:w="77"/><text x="83.6953%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (77 samples, 0.14%)</title><rect x="83.4453%" y="149" width="0.1380%" height="15" fill="rgb(213,199,42)" fg:x="46565" fg:w="77"/><text x="83.6953%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (12 samples, 0.02%)</title><rect x="83.5887%" y="165" width="0.0215%" height="15" fill="rgb(235,201,11)" fg:x="46645" fg:w="12"/><text x="83.8387%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223932 (10 samples, 0.02%)</title><rect x="83.6389%" y="165" width="0.0179%" height="15" fill="rgb(207,46,11)" fg:x="46673" fg:w="10"/><text x="83.8889%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223959 (9 samples, 0.02%)</title><rect x="83.6783%" y="165" width="0.0161%" height="15" fill="rgb(241,35,35)" fg:x="46695" fg:w="9"/><text x="83.9283%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223962 (6 samples, 0.01%)</title><rect x="83.6944%" y="165" width="0.0108%" height="15" fill="rgb(243,32,47)" fg:x="46704" fg:w="6"/><text x="83.9444%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223999 (8 samples, 0.01%)</title><rect x="83.7195%" y="165" width="0.0143%" height="15" fill="rgb(247,202,23)" fg:x="46718" fg:w="8"/><text x="83.9695%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (159 samples, 0.28%)</title><rect x="83.7338%" y="165" width="0.2849%" height="15" fill="rgb(219,102,11)" fg:x="46726" fg:w="159"/><text x="83.9838%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a2 (6 samples, 0.01%)</title><rect x="84.0224%" y="165" width="0.0108%" height="15" fill="rgb(243,110,44)" fg:x="46887" fg:w="6"/><text x="84.2724%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (12 samples, 0.02%)</title><rect x="84.0331%" y="165" width="0.0215%" height="15" fill="rgb(222,74,54)" fg:x="46893" fg:w="12"/><text x="84.2831%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (10 samples, 0.02%)</title><rect x="84.0546%" y="165" width="0.0179%" height="15" fill="rgb(216,99,12)" fg:x="46905" fg:w="10"/><text x="84.3046%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (170 samples, 0.30%)</title><rect x="84.0725%" y="165" width="0.3046%" height="15" fill="rgb(226,22,26)" fg:x="46915" fg:w="170"/><text x="84.3225%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (8 samples, 0.01%)</title><rect x="84.3826%" y="165" width="0.0143%" height="15" fill="rgb(217,163,10)" fg:x="47088" fg:w="8"/><text x="84.6326%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (18 samples, 0.03%)</title><rect x="84.3969%" y="165" width="0.0323%" height="15" fill="rgb(213,25,53)" fg:x="47096" fg:w="18"/><text x="84.6469%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (15 samples, 0.03%)</title><rect x="84.4292%" y="165" width="0.0269%" height="15" fill="rgb(252,105,26)" fg:x="47114" fg:w="15"/><text x="84.6792%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (22 samples, 0.04%)</title><rect x="84.4578%" y="165" width="0.0394%" height="15" fill="rgb(220,39,43)" fg:x="47130" fg:w="22"/><text x="84.7078%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cfd (6 samples, 0.01%)</title><rect x="84.4972%" y="165" width="0.0108%" height="15" fill="rgb(229,68,48)" fg:x="47152" fg:w="6"/><text x="84.7472%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (15 samples, 0.03%)</title><rect x="84.5080%" y="165" width="0.0269%" height="15" fill="rgb(252,8,32)" fg:x="47158" fg:w="15"/><text x="84.7580%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (14 samples, 0.03%)</title><rect x="84.5367%" y="165" width="0.0251%" height="15" fill="rgb(223,20,43)" fg:x="47174" fg:w="14"/><text x="84.7867%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (20 samples, 0.04%)</title><rect x="84.5636%" y="165" width="0.0358%" height="15" fill="rgb(229,81,49)" fg:x="47189" fg:w="20"/><text x="84.8136%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (15 samples, 0.03%)</title><rect x="84.6012%" y="165" width="0.0269%" height="15" fill="rgb(236,28,36)" fg:x="47210" fg:w="15"/><text x="84.8512%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (14 samples, 0.03%)</title><rect x="84.6281%" y="165" width="0.0251%" height="15" fill="rgb(249,185,26)" fg:x="47225" fg:w="14"/><text x="84.8781%" y="175.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (11 samples, 0.02%)</title><rect x="84.6532%" y="165" width="0.0197%" height="15" fill="rgb(249,174,33)" fg:x="47239" fg:w="11"/><text x="84.9032%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (27 samples, 0.05%)</title><rect x="84.6729%" y="165" width="0.0484%" height="15" fill="rgb(233,201,37)" fg:x="47250" fg:w="27"/><text x="84.9229%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (7,184 samples, 12.87%)</title><rect x="72.0194%" y="181" width="12.8739%" height="15" fill="rgb(221,78,26)" fg:x="40189" fg:w="7184"/><text x="72.2694%" y="191.50">dateo_fun_remover`d..</text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (96 samples, 0.17%)</title><rect x="84.7213%" y="165" width="0.1720%" height="15" fill="rgb(250,127,30)" fg:x="47277" fg:w="96"/><text x="84.9713%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,093 samples, 1.96%)</title><rect x="84.9847%" y="165" width="1.9587%" height="15" fill="rgb(230,49,44)" fg:x="47424" fg:w="1093"/><text x="85.2347%" y="175.50">d..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d671 (12 samples, 0.02%)</title><rect x="86.9451%" y="101" width="0.0215%" height="15" fill="rgb(229,67,23)" fg:x="48518" fg:w="12"/><text x="87.1951%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ddf (12 samples, 0.02%)</title><rect x="86.9451%" y="85" width="0.0215%" height="15" fill="rgb(249,83,47)" fg:x="48518" fg:w="12"/><text x="87.1951%" y="95.50"></text></g><g><title>libsystem_kernel.dylib`vm_allocate (12 samples, 0.02%)</title><rect x="86.9451%" y="69" width="0.0215%" height="15" fill="rgb(215,43,3)" fg:x="48518" fg:w="12"/><text x="87.1951%" y="79.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_allocate_trap (12 samples, 0.02%)</title><rect x="86.9451%" y="53" width="0.0215%" height="15" fill="rgb(238,154,13)" fg:x="48518" fg:w="12"/><text x="87.1951%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d7a6 (13 samples, 0.02%)</title><rect x="86.9667%" y="101" width="0.0233%" height="15" fill="rgb(219,56,2)" fg:x="48530" fg:w="13"/><text x="87.2167%" y="111.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="86.9667%" y="85" width="0.0233%" height="15" fill="rgb(233,0,4)" fg:x="48530" fg:w="13"/><text x="87.2167%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (27 samples, 0.05%)</title><rect x="86.9434%" y="165" width="0.0484%" height="15" fill="rgb(235,30,7)" fg:x="48517" fg:w="27"/><text x="87.1934%" y="175.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (27 samples, 0.05%)</title><rect x="86.9434%" y="149" width="0.0484%" height="15" fill="rgb(250,79,13)" fg:x="48517" fg:w="27"/><text x="87.1934%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (26 samples, 0.05%)</title><rect x="86.9451%" y="133" width="0.0466%" height="15" fill="rgb(211,146,34)" fg:x="48518" fg:w="26"/><text x="87.1951%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (26 samples, 0.05%)</title><rect x="86.9451%" y="117" width="0.0466%" height="15" fill="rgb(228,22,38)" fg:x="48518" fg:w="26"/><text x="87.1951%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (6 samples, 0.01%)</title><rect x="87.1351%" y="101" width="0.0108%" height="15" fill="rgb(235,168,5)" fg:x="48624" fg:w="6"/><text x="87.3851%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (6 samples, 0.01%)</title><rect x="87.1674%" y="101" width="0.0108%" height="15" fill="rgb(221,155,16)" fg:x="48642" fg:w="6"/><text x="87.4174%" y="111.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (76 samples, 0.14%)</title><rect x="87.0473%" y="117" width="0.1362%" height="15" fill="rgb(215,215,53)" fg:x="48575" fg:w="76"/><text x="87.2973%" y="127.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_no_limit (21 samples, 0.04%)</title><rect x="87.1871%" y="117" width="0.0376%" height="15" fill="rgb(223,4,10)" fg:x="48653" fg:w="21"/><text x="87.4371%" y="127.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (10 samples, 0.02%)</title><rect x="87.2247%" y="117" width="0.0179%" height="15" fill="rgb(234,103,6)" fg:x="48674" fg:w="10"/><text x="87.4747%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (10 samples, 0.02%)</title><rect x="87.2587%" y="117" width="0.0179%" height="15" fill="rgb(227,97,0)" fg:x="48693" fg:w="10"/><text x="87.5087%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (6 samples, 0.01%)</title><rect x="87.2910%" y="117" width="0.0108%" height="15" fill="rgb(234,150,53)" fg:x="48711" fg:w="6"/><text x="87.5410%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (9 samples, 0.02%)</title><rect x="87.3053%" y="117" width="0.0161%" height="15" fill="rgb(228,201,54)" fg:x="48719" fg:w="9"/><text x="87.5553%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (175 samples, 0.31%)</title><rect x="87.0150%" y="133" width="0.3136%" height="15" fill="rgb(222,22,37)" fg:x="48557" fg:w="175"/><text x="87.2650%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (13 samples, 0.02%)</title><rect x="87.3376%" y="101" width="0.0233%" height="15" fill="rgb(237,53,32)" fg:x="48737" fg:w="13"/><text x="87.5876%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (13 samples, 0.02%)</title><rect x="87.3376%" y="85" width="0.0233%" height="15" fill="rgb(233,25,53)" fg:x="48737" fg:w="13"/><text x="87.5876%" y="95.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (18 samples, 0.03%)</title><rect x="87.3304%" y="133" width="0.0323%" height="15" fill="rgb(210,40,34)" fg:x="48733" fg:w="18"/><text x="87.5804%" y="143.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (18 samples, 0.03%)</title><rect x="87.3304%" y="117" width="0.0323%" height="15" fill="rgb(241,220,44)" fg:x="48733" fg:w="18"/><text x="87.5804%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (221 samples, 0.40%)</title><rect x="86.9917%" y="149" width="0.3960%" height="15" fill="rgb(235,28,35)" fg:x="48544" fg:w="221"/><text x="87.2417%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all (225 samples, 0.40%)</title><rect x="86.9917%" y="165" width="0.4032%" height="15" fill="rgb(210,56,17)" fg:x="48544" fg:w="225"/><text x="87.2417%" y="175.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (18 samples, 0.03%)</title><rect x="87.6333%" y="133" width="0.0323%" height="15" fill="rgb(224,130,29)" fg:x="48902" fg:w="18"/><text x="87.8833%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (12 samples, 0.02%)</title><rect x="89.8178%" y="101" width="0.0215%" height="15" fill="rgb(235,212,8)" fg:x="50121" fg:w="12"/><text x="90.0678%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (9 samples, 0.02%)</title><rect x="89.8428%" y="101" width="0.0161%" height="15" fill="rgb(223,33,50)" fg:x="50135" fg:w="9"/><text x="90.0928%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (7 samples, 0.01%)</title><rect x="89.8590%" y="101" width="0.0125%" height="15" fill="rgb(219,149,13)" fg:x="50144" fg:w="7"/><text x="90.1090%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (37 samples, 0.07%)</title><rect x="89.9038%" y="101" width="0.0663%" height="15" fill="rgb(250,156,29)" fg:x="50169" fg:w="37"/><text x="90.1538%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (149 samples, 0.27%)</title><rect x="89.9701%" y="101" width="0.2670%" height="15" fill="rgb(216,193,19)" fg:x="50206" fg:w="149"/><text x="90.2201%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (15 samples, 0.03%)</title><rect x="90.2371%" y="101" width="0.0269%" height="15" fill="rgb(216,135,14)" fg:x="50355" fg:w="15"/><text x="90.4871%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (40 samples, 0.07%)</title><rect x="90.2729%" y="101" width="0.0717%" height="15" fill="rgb(241,47,5)" fg:x="50375" fg:w="40"/><text x="90.5229%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (13 samples, 0.02%)</title><rect x="90.3446%" y="101" width="0.0233%" height="15" fill="rgb(233,42,35)" fg:x="50415" fg:w="13"/><text x="90.5946%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (6 samples, 0.01%)</title><rect x="90.3679%" y="101" width="0.0108%" height="15" fill="rgb(231,13,6)" fg:x="50428" fg:w="6"/><text x="90.6179%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (24 samples, 0.04%)</title><rect x="90.3787%" y="101" width="0.0430%" height="15" fill="rgb(207,181,40)" fg:x="50434" fg:w="24"/><text x="90.6287%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (10 samples, 0.02%)</title><rect x="90.4235%" y="101" width="0.0179%" height="15" fill="rgb(254,173,49)" fg:x="50459" fg:w="10"/><text x="90.6735%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (11 samples, 0.02%)</title><rect x="90.4503%" y="101" width="0.0197%" height="15" fill="rgb(221,1,38)" fg:x="50474" fg:w="11"/><text x="90.7003%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (8 samples, 0.01%)</title><rect x="90.4700%" y="101" width="0.0143%" height="15" fill="rgb(206,124,46)" fg:x="50485" fg:w="8"/><text x="90.7200%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (7 samples, 0.01%)</title><rect x="90.4844%" y="101" width="0.0125%" height="15" fill="rgb(249,21,11)" fg:x="50493" fg:w="7"/><text x="90.7344%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (9 samples, 0.02%)</title><rect x="90.4969%" y="101" width="0.0161%" height="15" fill="rgb(222,201,40)" fg:x="50500" fg:w="9"/><text x="90.7469%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (9 samples, 0.02%)</title><rect x="90.5131%" y="101" width="0.0161%" height="15" fill="rgb(235,61,29)" fg:x="50509" fg:w="9"/><text x="90.7631%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (6 samples, 0.01%)</title><rect x="90.5310%" y="101" width="0.0108%" height="15" fill="rgb(219,207,3)" fg:x="50519" fg:w="6"/><text x="90.7810%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (42 samples, 0.08%)</title><rect x="90.5435%" y="101" width="0.0753%" height="15" fill="rgb(222,56,46)" fg:x="50526" fg:w="42"/><text x="90.7935%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (8 samples, 0.01%)</title><rect x="90.6313%" y="101" width="0.0143%" height="15" fill="rgb(239,76,54)" fg:x="50575" fg:w="8"/><text x="90.8813%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (45 samples, 0.08%)</title><rect x="90.6457%" y="101" width="0.0806%" height="15" fill="rgb(231,124,27)" fg:x="50583" fg:w="45"/><text x="90.8957%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (6 samples, 0.01%)</title><rect x="90.7460%" y="101" width="0.0108%" height="15" fill="rgb(249,195,6)" fg:x="50639" fg:w="6"/><text x="90.9960%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (144 samples, 0.26%)</title><rect x="90.7568%" y="101" width="0.2581%" height="15" fill="rgb(237,174,47)" fg:x="50645" fg:w="144"/><text x="91.0068%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (11 samples, 0.02%)</title><rect x="91.0309%" y="101" width="0.0197%" height="15" fill="rgb(206,201,31)" fg:x="50798" fg:w="11"/><text x="91.2809%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (9 samples, 0.02%)</title><rect x="91.0525%" y="101" width="0.0161%" height="15" fill="rgb(231,57,52)" fg:x="50810" fg:w="9"/><text x="91.3025%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (7 samples, 0.01%)</title><rect x="91.0722%" y="101" width="0.0125%" height="15" fill="rgb(248,177,22)" fg:x="50821" fg:w="7"/><text x="91.3222%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (7 samples, 0.01%)</title><rect x="91.0937%" y="101" width="0.0125%" height="15" fill="rgb(215,211,37)" fg:x="50833" fg:w="7"/><text x="91.3437%" y="111.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1,482 samples, 2.66%)</title><rect x="88.4522%" y="117" width="2.6558%" height="15" fill="rgb(241,128,51)" fg:x="49359" fg:w="1482"/><text x="88.7022%" y="127.50">da..</text></g><g><title>dateo_fun_remover`__rdl_alloc (19 samples, 0.03%)</title><rect x="91.1080%" y="117" width="0.0340%" height="15" fill="rgb(227,165,31)" fg:x="50841" fg:w="19"/><text x="91.3580%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (9 samples, 0.02%)</title><rect x="91.1510%" y="117" width="0.0161%" height="15" fill="rgb(228,167,24)" fg:x="50865" fg:w="9"/><text x="91.4010%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (9 samples, 0.02%)</title><rect x="91.1689%" y="117" width="0.0161%" height="15" fill="rgb(228,143,12)" fg:x="50875" fg:w="9"/><text x="91.4189%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (6 samples, 0.01%)</title><rect x="91.1869%" y="117" width="0.0108%" height="15" fill="rgb(249,149,8)" fg:x="50885" fg:w="6"/><text x="91.4369%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (9 samples, 0.02%)</title><rect x="91.1994%" y="117" width="0.0161%" height="15" fill="rgb(243,35,44)" fg:x="50892" fg:w="9"/><text x="91.4494%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (14 samples, 0.03%)</title><rect x="91.2155%" y="117" width="0.0251%" height="15" fill="rgb(246,89,9)" fg:x="50901" fg:w="14"/><text x="91.4655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (14 samples, 0.03%)</title><rect x="91.2406%" y="117" width="0.0251%" height="15" fill="rgb(233,213,13)" fg:x="50915" fg:w="14"/><text x="91.4906%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (9 samples, 0.02%)</title><rect x="91.2693%" y="117" width="0.0161%" height="15" fill="rgb(233,141,41)" fg:x="50931" fg:w="9"/><text x="91.5193%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (14 samples, 0.03%)</title><rect x="91.2890%" y="117" width="0.0251%" height="15" fill="rgb(239,167,4)" fg:x="50942" fg:w="14"/><text x="91.5390%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (13 samples, 0.02%)</title><rect x="91.3177%" y="117" width="0.0233%" height="15" fill="rgb(209,217,16)" fg:x="50958" fg:w="13"/><text x="91.5677%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (8 samples, 0.01%)</title><rect x="91.3589%" y="117" width="0.0143%" height="15" fill="rgb(219,88,35)" fg:x="50981" fg:w="8"/><text x="91.6089%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (9 samples, 0.02%)</title><rect x="91.3750%" y="117" width="0.0161%" height="15" fill="rgb(220,193,23)" fg:x="50990" fg:w="9"/><text x="91.6250%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (9 samples, 0.02%)</title><rect x="91.3911%" y="117" width="0.0161%" height="15" fill="rgb(230,90,52)" fg:x="50999" fg:w="9"/><text x="91.6411%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (6 samples, 0.01%)</title><rect x="91.4234%" y="117" width="0.0108%" height="15" fill="rgb(252,106,19)" fg:x="51017" fg:w="6"/><text x="91.6734%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (9 samples, 0.02%)</title><rect x="91.4359%" y="117" width="0.0161%" height="15" fill="rgb(206,74,20)" fg:x="51024" fg:w="9"/><text x="91.6859%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (8 samples, 0.01%)</title><rect x="91.4539%" y="117" width="0.0143%" height="15" fill="rgb(230,138,44)" fg:x="51034" fg:w="8"/><text x="91.7039%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (200 samples, 0.36%)</title><rect x="91.4682%" y="117" width="0.3584%" height="15" fill="rgb(235,182,43)" fg:x="51042" fg:w="200"/><text x="91.7182%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (6 samples, 0.01%)</title><rect x="91.8356%" y="117" width="0.0108%" height="15" fill="rgb(242,16,51)" fg:x="51247" fg:w="6"/><text x="92.0856%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (11 samples, 0.02%)</title><rect x="91.8517%" y="117" width="0.0197%" height="15" fill="rgb(248,9,4)" fg:x="51256" fg:w="11"/><text x="92.1017%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f1 (8 samples, 0.01%)</title><rect x="91.8714%" y="117" width="0.0143%" height="15" fill="rgb(210,31,22)" fg:x="51267" fg:w="8"/><text x="92.1214%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (102 samples, 0.18%)</title><rect x="91.8911%" y="117" width="0.1828%" height="15" fill="rgb(239,54,39)" fg:x="51278" fg:w="102"/><text x="92.1411%" y="127.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (95 samples, 0.17%)</title><rect x="91.9037%" y="101" width="0.1702%" height="15" fill="rgb(230,99,41)" fg:x="51285" fg:w="95"/><text x="92.1537%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223912 (10 samples, 0.02%)</title><rect x="92.0757%" y="117" width="0.0179%" height="15" fill="rgb(253,106,12)" fg:x="51381" fg:w="10"/><text x="92.3257%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (6 samples, 0.01%)</title><rect x="92.1044%" y="117" width="0.0108%" height="15" fill="rgb(213,46,41)" fg:x="51397" fg:w="6"/><text x="92.3544%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223934 (13 samples, 0.02%)</title><rect x="92.1169%" y="117" width="0.0233%" height="15" fill="rgb(215,133,35)" fg:x="51404" fg:w="13"/><text x="92.3669%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223947 (9 samples, 0.02%)</title><rect x="92.1420%" y="117" width="0.0161%" height="15" fill="rgb(213,28,5)" fg:x="51418" fg:w="9"/><text x="92.3920%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395b (11 samples, 0.02%)</title><rect x="92.1581%" y="117" width="0.0197%" height="15" fill="rgb(215,77,49)" fg:x="51427" fg:w="11"/><text x="92.4081%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396c (10 samples, 0.02%)</title><rect x="92.1832%" y="117" width="0.0179%" height="15" fill="rgb(248,100,22)" fg:x="51441" fg:w="10"/><text x="92.4332%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (47 samples, 0.08%)</title><rect x="92.2155%" y="117" width="0.0842%" height="15" fill="rgb(208,67,9)" fg:x="51459" fg:w="47"/><text x="92.4655%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399b (6 samples, 0.01%)</title><rect x="92.2997%" y="117" width="0.0108%" height="15" fill="rgb(219,133,21)" fg:x="51506" fg:w="6"/><text x="92.5497%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (76 samples, 0.14%)</title><rect x="92.3104%" y="117" width="0.1362%" height="15" fill="rgb(246,46,29)" fg:x="51512" fg:w="76"/><text x="92.5604%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (10 samples, 0.02%)</title><rect x="92.4556%" y="117" width="0.0179%" height="15" fill="rgb(246,185,52)" fg:x="51593" fg:w="10"/><text x="92.7056%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (6 samples, 0.01%)</title><rect x="92.4735%" y="117" width="0.0108%" height="15" fill="rgb(252,136,11)" fg:x="51603" fg:w="6"/><text x="92.7235%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (135 samples, 0.24%)</title><rect x="92.4843%" y="117" width="0.2419%" height="15" fill="rgb(219,138,53)" fg:x="51609" fg:w="135"/><text x="92.7343%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (11 samples, 0.02%)</title><rect x="92.7352%" y="117" width="0.0197%" height="15" fill="rgb(211,51,23)" fg:x="51749" fg:w="11"/><text x="92.9852%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (12 samples, 0.02%)</title><rect x="92.7549%" y="117" width="0.0215%" height="15" fill="rgb(247,221,28)" fg:x="51760" fg:w="12"/><text x="93.0049%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (11 samples, 0.02%)</title><rect x="92.7764%" y="117" width="0.0197%" height="15" fill="rgb(251,222,45)" fg:x="51772" fg:w="11"/><text x="93.0264%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (12 samples, 0.02%)</title><rect x="92.7961%" y="117" width="0.0215%" height="15" fill="rgb(217,162,53)" fg:x="51783" fg:w="12"/><text x="93.0461%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (7 samples, 0.01%)</title><rect x="92.8230%" y="117" width="0.0125%" height="15" fill="rgb(229,93,14)" fg:x="51798" fg:w="7"/><text x="93.0730%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (9 samples, 0.02%)</title><rect x="92.8445%" y="117" width="0.0161%" height="15" fill="rgb(209,67,49)" fg:x="51810" fg:w="9"/><text x="93.0945%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (9 samples, 0.02%)</title><rect x="92.8642%" y="117" width="0.0161%" height="15" fill="rgb(213,87,29)" fg:x="51821" fg:w="9"/><text x="93.1142%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d2c (6 samples, 0.01%)</title><rect x="92.8803%" y="117" width="0.0108%" height="15" fill="rgb(205,151,52)" fg:x="51830" fg:w="6"/><text x="93.1303%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (10 samples, 0.02%)</title><rect x="92.8911%" y="117" width="0.0179%" height="15" fill="rgb(253,215,39)" fg:x="51836" fg:w="10"/><text x="93.1411%" y="127.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (8 samples, 0.01%)</title><rect x="92.9090%" y="117" width="0.0143%" height="15" fill="rgb(221,220,41)" fg:x="51846" fg:w="8"/><text x="93.1590%" y="127.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (2,948 samples, 5.28%)</title><rect x="87.6655%" y="133" width="5.2829%" height="15" fill="rgb(218,133,21)" fg:x="48920" fg:w="2948"/><text x="87.9155%" y="143.50">dateo_..</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (14 samples, 0.03%)</title><rect x="92.9233%" y="117" width="0.0251%" height="15" fill="rgb(221,193,43)" fg:x="51854" fg:w="14"/><text x="93.1733%" y="127.50"></text></g><g><title>dateo_fun_remover`__rdl_dealloc (31 samples, 0.06%)</title><rect x="92.9538%" y="133" width="0.0556%" height="15" fill="rgb(240,128,52)" fg:x="51871" fg:w="31"/><text x="93.2038%" y="143.50"></text></g><g><title>dateo_fun_remover`__rdl_realloc (11 samples, 0.02%)</title><rect x="93.0792%" y="101" width="0.0197%" height="15" fill="rgb(253,114,12)" fg:x="51941" fg:w="11"/><text x="93.3292%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a004 (39 samples, 0.07%)</title><rect x="93.1581%" y="101" width="0.0699%" height="15" fill="rgb(215,223,47)" fg:x="51985" fg:w="39"/><text x="93.4081%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a1cb (43 samples, 0.08%)</title><rect x="93.3642%" y="69" width="0.0771%" height="15" fill="rgb(248,225,23)" fg:x="52100" fg:w="43"/><text x="93.6142%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (6 samples, 0.01%)</title><rect x="93.5111%" y="53" width="0.0108%" height="15" fill="rgb(250,108,0)" fg:x="52182" fg:w="6"/><text x="93.7611%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (24 samples, 0.04%)</title><rect x="93.5219%" y="53" width="0.0430%" height="15" fill="rgb(228,208,7)" fg:x="52188" fg:w="24"/><text x="93.7719%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (14 samples, 0.03%)</title><rect x="93.5702%" y="53" width="0.0251%" height="15" fill="rgb(244,45,10)" fg:x="52215" fg:w="14"/><text x="93.8202%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (6 samples, 0.01%)</title><rect x="93.6025%" y="53" width="0.0108%" height="15" fill="rgb(207,125,25)" fg:x="52233" fg:w="6"/><text x="93.8525%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (26 samples, 0.05%)</title><rect x="93.6616%" y="53" width="0.0466%" height="15" fill="rgb(210,195,18)" fg:x="52266" fg:w="26"/><text x="93.9116%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (9 samples, 0.02%)</title><rect x="93.7100%" y="53" width="0.0161%" height="15" fill="rgb(249,80,12)" fg:x="52293" fg:w="9"/><text x="93.9600%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (9 samples, 0.02%)</title><rect x="93.7351%" y="53" width="0.0161%" height="15" fill="rgb(221,65,9)" fg:x="52307" fg:w="9"/><text x="93.9851%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c852 (160 samples, 0.29%)</title><rect x="93.4824%" y="69" width="0.2867%" height="15" fill="rgb(235,49,36)" fg:x="52166" fg:w="160"/><text x="93.7324%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c86f (16 samples, 0.03%)</title><rect x="93.7781%" y="69" width="0.0287%" height="15" fill="rgb(225,32,20)" fg:x="52331" fg:w="16"/><text x="94.0281%" y="79.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (16 samples, 0.03%)</title><rect x="93.7781%" y="53" width="0.0287%" height="15" fill="rgb(215,141,46)" fg:x="52331" fg:w="16"/><text x="94.0281%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (48 samples, 0.09%)</title><rect x="93.8516%" y="53" width="0.0860%" height="15" fill="rgb(250,160,47)" fg:x="52372" fg:w="48"/><text x="94.1016%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (15 samples, 0.03%)</title><rect x="93.9466%" y="53" width="0.0269%" height="15" fill="rgb(216,222,40)" fg:x="52425" fg:w="15"/><text x="94.1966%" y="63.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (13 samples, 0.02%)</title><rect x="93.9501%" y="37" width="0.0233%" height="15" fill="rgb(234,217,39)" fg:x="52427" fg:w="13"/><text x="94.2001%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (12 samples, 0.02%)</title><rect x="94.0003%" y="53" width="0.0215%" height="15" fill="rgb(207,178,40)" fg:x="52455" fg:w="12"/><text x="94.2503%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (6 samples, 0.01%)</title><rect x="94.0290%" y="53" width="0.0108%" height="15" fill="rgb(221,136,13)" fg:x="52471" fg:w="6"/><text x="94.2790%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (33 samples, 0.06%)</title><rect x="94.0415%" y="53" width="0.0591%" height="15" fill="rgb(249,199,10)" fg:x="52478" fg:w="33"/><text x="94.2915%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (170 samples, 0.30%)</title><rect x="93.8086%" y="69" width="0.3046%" height="15" fill="rgb(249,222,13)" fg:x="52348" fg:w="170"/><text x="94.0586%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (464 samples, 0.83%)</title><rect x="93.3068%" y="85" width="0.8315%" height="15" fill="rgb(244,185,38)" fg:x="52068" fg:w="464"/><text x="93.5568%" y="95.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (7 samples, 0.01%)</title><rect x="94.1258%" y="69" width="0.0125%" height="15" fill="rgb(236,202,9)" fg:x="52525" fg:w="7"/><text x="94.3758%" y="79.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (489 samples, 0.88%)</title><rect x="93.2746%" y="101" width="0.8763%" height="15" fill="rgb(250,229,37)" fg:x="52050" fg:w="489"/><text x="93.5246%" y="111.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::finish_grow (618 samples, 1.11%)</title><rect x="93.0631%" y="117" width="1.1075%" height="15" fill="rgb(206,174,23)" fg:x="51932" fg:w="618"/><text x="93.3131%" y="127.50"></text></g><g><title>dateo_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (647 samples, 1.16%)</title><rect x="93.0165%" y="133" width="1.1594%" height="15" fill="rgb(211,33,43)" fg:x="51906" fg:w="647"/><text x="93.2665%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f20470 (149 samples, 0.27%)</title><rect x="94.1777%" y="133" width="0.2670%" height="15" fill="rgb(245,58,50)" fg:x="52554" fg:w="149"/><text x="94.4277%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (268 samples, 0.48%)</title><rect x="94.4447%" y="133" width="0.4803%" height="15" fill="rgb(244,68,36)" fg:x="52703" fg:w="268"/><text x="94.6947%" y="143.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$log (6 samples, 0.01%)</title><rect x="94.9250%" y="133" width="0.0108%" height="15" fill="rgb(232,229,15)" fg:x="52971" fg:w="6"/><text x="95.1750%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (6 samples, 0.01%)</title><rect x="94.9411%" y="133" width="0.0108%" height="15" fill="rgb(254,30,23)" fg:x="52980" fg:w="6"/><text x="95.1911%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (15 samples, 0.03%)</title><rect x="94.9519%" y="133" width="0.0269%" height="15" fill="rgb(235,160,14)" fg:x="52986" fg:w="15"/><text x="95.2019%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (6 samples, 0.01%)</title><rect x="95.0110%" y="133" width="0.0108%" height="15" fill="rgb(212,155,44)" fg:x="53019" fg:w="6"/><text x="95.2610%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (10 samples, 0.02%)</title><rect x="95.0379%" y="133" width="0.0179%" height="15" fill="rgb(226,2,50)" fg:x="53034" fg:w="10"/><text x="95.2879%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (16 samples, 0.03%)</title><rect x="95.0702%" y="133" width="0.0287%" height="15" fill="rgb(234,177,6)" fg:x="53052" fg:w="16"/><text x="95.3202%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (15 samples, 0.03%)</title><rect x="95.0988%" y="133" width="0.0269%" height="15" fill="rgb(217,24,9)" fg:x="53068" fg:w="15"/><text x="95.3488%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (9 samples, 0.02%)</title><rect x="95.1257%" y="133" width="0.0161%" height="15" fill="rgb(220,13,46)" fg:x="53083" fg:w="9"/><text x="95.3757%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (8 samples, 0.01%)</title><rect x="95.1472%" y="133" width="0.0143%" height="15" fill="rgb(239,221,27)" fg:x="53095" fg:w="8"/><text x="95.3972%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (11 samples, 0.02%)</title><rect x="95.1616%" y="133" width="0.0197%" height="15" fill="rgb(222,198,25)" fg:x="53103" fg:w="11"/><text x="95.4116%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (13 samples, 0.02%)</title><rect x="95.1831%" y="133" width="0.0233%" height="15" fill="rgb(211,99,13)" fg:x="53115" fg:w="13"/><text x="95.4331%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (10 samples, 0.02%)</title><rect x="95.2099%" y="133" width="0.0179%" height="15" fill="rgb(232,111,31)" fg:x="53130" fg:w="10"/><text x="95.4599%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (12 samples, 0.02%)</title><rect x="95.2279%" y="133" width="0.0215%" height="15" fill="rgb(245,82,37)" fg:x="53140" fg:w="12"/><text x="95.4779%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (4,386 samples, 7.86%)</title><rect x="87.4093%" y="149" width="7.8598%" height="15" fill="rgb(227,149,46)" fg:x="48777" fg:w="4386"/><text x="87.6593%" y="159.50">dateo_fun_r..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (11 samples, 0.02%)</title><rect x="95.2494%" y="133" width="0.0197%" height="15" fill="rgb(218,36,50)" fg:x="53152" fg:w="11"/><text x="95.4994%" y="143.50"></text></g><g><title>dateo_fun_remover`&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.02%)</title><rect x="95.2691%" y="149" width="0.0179%" height="15" fill="rgb(226,80,48)" fg:x="53163" fg:w="10"/><text x="95.5191%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (6 samples, 0.01%)</title><rect x="95.2977%" y="149" width="0.0108%" height="15" fill="rgb(238,224,15)" fg:x="53179" fg:w="6"/><text x="95.5477%" y="159.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::operation::Operation::apply_all_rev (4,420 samples, 7.92%)</title><rect x="87.3949%" y="165" width="7.9207%" height="15" fill="rgb(241,136,10)" fg:x="48769" fg:w="4420"/><text x="87.6449%" y="175.50">dateo_fun_r..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (27 samples, 0.05%)</title><rect x="95.3515%" y="165" width="0.0484%" height="15" fill="rgb(208,32,45)" fg:x="53209" fg:w="27"/><text x="95.6015%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (11 samples, 0.02%)</title><rect x="95.4124%" y="165" width="0.0197%" height="15" fill="rgb(207,135,9)" fg:x="53243" fg:w="11"/><text x="95.6624%" y="175.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (11 samples, 0.02%)</title><rect x="95.4124%" y="149" width="0.0197%" height="15" fill="rgb(206,86,44)" fg:x="53243" fg:w="11"/><text x="95.6624%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (17 samples, 0.03%)</title><rect x="95.4572%" y="165" width="0.0305%" height="15" fill="rgb(245,177,15)" fg:x="53268" fg:w="17"/><text x="95.7072%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (8 samples, 0.01%)</title><rect x="95.4949%" y="165" width="0.0143%" height="15" fill="rgb(206,64,50)" fg:x="53289" fg:w="8"/><text x="95.7449%" y="175.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_node (5,934 samples, 10.63%)</title><rect x="84.8933%" y="181" width="10.6338%" height="15" fill="rgb(234,36,40)" fg:x="47373" fg:w="5934"/><text x="85.1433%" y="191.50">dateo_fun_remove..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (17 samples, 0.03%)</title><rect x="95.5271%" y="181" width="0.0305%" height="15" fill="rgb(213,64,8)" fg:x="53307" fg:w="17"/><text x="95.7771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (14 samples, 0.03%)</title><rect x="95.5576%" y="181" width="0.0251%" height="15" fill="rgb(210,75,36)" fg:x="53324" fg:w="14"/><text x="95.8076%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (15 samples, 0.03%)</title><rect x="95.5845%" y="181" width="0.0269%" height="15" fill="rgb(229,88,21)" fg:x="53339" fg:w="15"/><text x="95.8345%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (9 samples, 0.02%)</title><rect x="95.6185%" y="181" width="0.0161%" height="15" fill="rgb(252,204,47)" fg:x="53358" fg:w="9"/><text x="95.8685%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (17 samples, 0.03%)</title><rect x="95.6364%" y="181" width="0.0305%" height="15" fill="rgb(208,77,27)" fg:x="53368" fg:w="17"/><text x="95.8864%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (12 samples, 0.02%)</title><rect x="95.6759%" y="181" width="0.0215%" height="15" fill="rgb(221,76,26)" fg:x="53390" fg:w="12"/><text x="95.9259%" y="191.50"></text></g><g><title>libsystem_kernel.dylib`madvise (8 samples, 0.01%)</title><rect x="95.7117%" y="165" width="0.0143%" height="15" fill="rgb(225,139,18)" fg:x="53410" fg:w="8"/><text x="95.9617%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (121 samples, 0.22%)</title><rect x="95.7117%" y="181" width="0.2168%" height="15" fill="rgb(230,137,11)" fg:x="53410" fg:w="121"/><text x="95.9617%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21468c (113 samples, 0.20%)</title><rect x="95.7260%" y="165" width="0.2025%" height="15" fill="rgb(212,28,1)" fg:x="53418" fg:w="113"/><text x="95.9760%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a215ce7 (113 samples, 0.20%)</title><rect x="95.7260%" y="149" width="0.2025%" height="15" fill="rgb(248,164,17)" fg:x="53418" fg:w="113"/><text x="95.9760%" y="159.50"></text></g><g><title>libsystem_kernel.dylib`_kernelrpc_mach_vm_deallocate_trap (113 samples, 0.20%)</title><rect x="95.7260%" y="133" width="0.2025%" height="15" fill="rgb(222,171,42)" fg:x="53418" fg:w="113"/><text x="95.9760%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (7 samples, 0.01%)</title><rect x="95.9285%" y="181" width="0.0125%" height="15" fill="rgb(243,84,45)" fg:x="53531" fg:w="7"/><text x="96.1785%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (6 samples, 0.01%)</title><rect x="95.9411%" y="181" width="0.0108%" height="15" fill="rgb(252,49,23)" fg:x="53538" fg:w="6"/><text x="96.1911%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (6 samples, 0.01%)</title><rect x="95.9554%" y="181" width="0.0108%" height="15" fill="rgb(215,19,7)" fg:x="53546" fg:w="6"/><text x="96.2054%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (7 samples, 0.01%)</title><rect x="95.9662%" y="181" width="0.0125%" height="15" fill="rgb(238,81,41)" fg:x="53552" fg:w="7"/><text x="96.2162%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (15 samples, 0.03%)</title><rect x="95.9787%" y="181" width="0.0269%" height="15" fill="rgb(210,199,37)" fg:x="53559" fg:w="15"/><text x="96.2287%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (7 samples, 0.01%)</title><rect x="96.0074%" y="181" width="0.0125%" height="15" fill="rgb(244,192,49)" fg:x="53575" fg:w="7"/><text x="96.2574%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (8 samples, 0.01%)</title><rect x="96.0199%" y="181" width="0.0143%" height="15" fill="rgb(226,211,11)" fg:x="53582" fg:w="8"/><text x="96.2699%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (7 samples, 0.01%)</title><rect x="96.0396%" y="181" width="0.0125%" height="15" fill="rgb(236,162,54)" fg:x="53593" fg:w="7"/><text x="96.2896%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22383d (6 samples, 0.01%)</title><rect x="96.0880%" y="181" width="0.0108%" height="15" fill="rgb(220,229,9)" fg:x="53620" fg:w="6"/><text x="96.3380%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (195 samples, 0.35%)</title><rect x="96.1400%" y="181" width="0.3494%" height="15" fill="rgb(250,87,22)" fg:x="53649" fg:w="195"/><text x="96.3900%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (8 samples, 0.01%)</title><rect x="96.5038%" y="181" width="0.0143%" height="15" fill="rgb(239,43,17)" fg:x="53852" fg:w="8"/><text x="96.7538%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (45 samples, 0.08%)</title><rect x="96.5253%" y="181" width="0.0806%" height="15" fill="rgb(231,177,25)" fg:x="53864" fg:w="45"/><text x="96.7753%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (45 samples, 0.08%)</title><rect x="96.5253%" y="165" width="0.0806%" height="15" fill="rgb(219,179,1)" fg:x="53864" fg:w="45"/><text x="96.7753%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (6 samples, 0.01%)</title><rect x="96.6113%" y="181" width="0.0108%" height="15" fill="rgb(238,219,53)" fg:x="53912" fg:w="6"/><text x="96.8613%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223959 (8 samples, 0.01%)</title><rect x="96.6615%" y="181" width="0.0143%" height="15" fill="rgb(232,167,36)" fg:x="53940" fg:w="8"/><text x="96.9115%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223969 (6 samples, 0.01%)</title><rect x="96.6812%" y="181" width="0.0108%" height="15" fill="rgb(244,19,51)" fg:x="53951" fg:w="6"/><text x="96.9312%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (43 samples, 0.08%)</title><rect x="96.7063%" y="181" width="0.0771%" height="15" fill="rgb(224,6,22)" fg:x="53965" fg:w="43"/><text x="96.9563%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (58 samples, 0.10%)</title><rect x="96.7941%" y="181" width="0.1039%" height="15" fill="rgb(224,145,5)" fg:x="54014" fg:w="58"/><text x="97.0441%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (6 samples, 0.01%)</title><rect x="96.8998%" y="181" width="0.0108%" height="15" fill="rgb(234,130,49)" fg:x="54073" fg:w="6"/><text x="97.1498%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (55 samples, 0.10%)</title><rect x="96.9177%" y="181" width="0.0986%" height="15" fill="rgb(254,6,2)" fg:x="54083" fg:w="55"/><text x="97.1677%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (8 samples, 0.01%)</title><rect x="97.0252%" y="181" width="0.0143%" height="15" fill="rgb(208,96,46)" fg:x="54143" fg:w="8"/><text x="97.2752%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (11 samples, 0.02%)</title><rect x="97.0557%" y="181" width="0.0197%" height="15" fill="rgb(239,3,39)" fg:x="54160" fg:w="11"/><text x="97.3057%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (7 samples, 0.01%)</title><rect x="97.0754%" y="181" width="0.0125%" height="15" fill="rgb(233,210,1)" fg:x="54171" fg:w="7"/><text x="97.3254%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (10 samples, 0.02%)</title><rect x="97.0880%" y="181" width="0.0179%" height="15" fill="rgb(244,137,37)" fg:x="54178" fg:w="10"/><text x="97.3380%" y="191.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_memmove (12 samples, 0.02%)</title><rect x="97.1059%" y="181" width="0.0215%" height="15" fill="rgb(240,136,2)" fg:x="54188" fg:w="12"/><text x="97.3559%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (10 samples, 0.02%)</title><rect x="97.1274%" y="181" width="0.0179%" height="15" fill="rgb(239,18,37)" fg:x="54200" fg:w="10"/><text x="97.3774%" y="191.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (1,449 samples, 2.60%)</title><rect x="97.1453%" y="181" width="2.5966%" height="15" fill="rgb(218,185,22)" fg:x="54210" fg:w="1449"/><text x="97.3953%" y="191.50">li..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::Arena::solve::rec (18,400 samples, 32.97%)</title><rect x="66.7706%" y="197" width="32.9731%" height="15" fill="rgb(225,218,4)" fg:x="37260" fg:w="18400"/><text x="67.0206%" y="207.50">dateo_fun_remover`dateo_fun_remover::finder::tree::Ar..</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::tree::expand_funcs (19 samples, 0.03%)</title><rect x="99.7437%" y="197" width="0.0340%" height="15" fill="rgb(230,182,32)" fg:x="55660" fg:w="19"/><text x="99.9937%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (11 samples, 0.02%)</title><rect x="99.7778%" y="197" width="0.0197%" height="15" fill="rgb(242,56,43)" fg:x="55679" fg:w="11"/><text x="100.0278%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (9 samples, 0.02%)</title><rect x="99.8136%" y="197" width="0.0161%" height="15" fill="rgb(233,99,24)" fg:x="55699" fg:w="9"/><text x="100.0636%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (20 samples, 0.04%)</title><rect x="99.8548%" y="197" width="0.0358%" height="15" fill="rgb(234,209,42)" fg:x="55722" fg:w="20"/><text x="100.1048%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (7 samples, 0.01%)</title><rect x="99.8961%" y="197" width="0.0125%" height="15" fill="rgb(227,7,12)" fg:x="55745" fg:w="7"/><text x="100.1461%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a21da5f (9 samples, 0.02%)</title><rect x="99.9265%" y="197" width="0.0161%" height="15" fill="rgb(245,203,43)" fg:x="55762" fg:w="9"/><text x="100.1765%" y="207.50"></text></g><g><title>libsystem_kernel.dylib`madvise (9 samples, 0.02%)</title><rect x="99.9265%" y="181" width="0.0161%" height="15" fill="rgb(238,205,33)" fg:x="55762" fg:w="9"/><text x="100.1765%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (10 samples, 0.02%)</title><rect x="99.9588%" y="197" width="0.0179%" height="15" fill="rgb(231,56,7)" fg:x="55780" fg:w="10"/><text x="100.2088%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (8 samples, 0.01%)</title><rect x="99.9767%" y="197" width="0.0143%" height="15" fill="rgb(244,186,29)" fg:x="55790" fg:w="8"/><text x="100.2267%" y="207.50"></text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve (55,800 samples, 99.99%)</title><rect x="0.0018%" y="213" width="99.9946%" height="15" fill="rgb(234,111,31)" fg:x="1" fg:w="55800"/><text x="0.2518%" y="223.50">dateo_fun_remover`dateo_fun_remover::finder::joiner::Joiner::solve</text></g><g><title>dateo_fun_remover`dateo_fun_remover::finder::solve (55,802 samples, 100.00%)</title><rect x="0.0000%" y="229" width="99.9982%" height="15" fill="rgb(241,149,10)" fg:x="0" fg:w="55802"/><text x="0.2500%" y="239.50">dateo_fun_remover`dateo_fun_remover::finder::solve</text></g><g><title>all (55,803 samples, 100%)</title><rect x="0.0000%" y="341" width="100.0000%" height="15" fill="rgb(249,206,44)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="351.50"></text></g><g><title>dyld`start (55,803 samples, 100.00%)</title><rect x="0.0000%" y="325" width="100.0000%" height="15" fill="rgb(251,153,30)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="335.50">dyld`start</text></g><g><title>dateo_fun_remover`main (55,803 samples, 100.00%)</title><rect x="0.0000%" y="309" width="100.0000%" height="15" fill="rgb(239,152,38)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="319.50">dateo_fun_remover`main</text></g><g><title>dateo_fun_remover`std::rt::lang_start_internal (55,803 samples, 100.00%)</title><rect x="0.0000%" y="293" width="100.0000%" height="15" fill="rgb(249,139,47)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="303.50">dateo_fun_remover`std::rt::lang_start_internal</text></g><g><title>dateo_fun_remover`std::rt::lang_start::_{{closure}} (55,803 samples, 100.00%)</title><rect x="0.0000%" y="277" width="100.0000%" height="15" fill="rgb(244,64,35)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="287.50">dateo_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (55,803 samples, 100.00%)</title><rect x="0.0000%" y="261" width="100.0000%" height="15" fill="rgb(216,46,15)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="271.50">dateo_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>dateo_fun_remover`dateo_fun_remover::main (55,803 samples, 100.00%)</title><rect x="0.0000%" y="245" width="100.0000%" height="15" fill="rgb(250,74,19)" fg:x="0" fg:w="55803"/><text x="0.2500%" y="255.50">dateo_fun_remover`dateo_fun_remover::main</text></g></svg></svg>