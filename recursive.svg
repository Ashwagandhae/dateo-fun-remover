<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="406" onload="init(evt)" viewBox="0 0 1200 406" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="406" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="389.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="389.00"> </text><svg id="frames" x="10" width="1180" total_samples="210628"><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (243 samples, 0.12%)</title><rect x="0.0005%" y="229" width="0.1154%" height="15" fill="rgb(227,0,7)" fg:x="1" fg:w="243"/><text x="0.2505%" y="239.50"></text></g><g><title>datoe_fun_remover`__rdl_dealloc (929 samples, 0.44%)</title><rect x="0.1225%" y="229" width="0.4411%" height="15" fill="rgb(217,0,24)" fg:x="258" fg:w="929"/><text x="0.3725%" y="239.50"></text></g><g><title>datoe_fun_remover`__rust_dealloc (260 samples, 0.12%)</title><rect x="0.5636%" y="229" width="0.1234%" height="15" fill="rgb(221,193,54)" fg:x="1187" fg:w="260"/><text x="0.8136%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (624 samples, 0.30%)</title><rect x="0.6898%" y="229" width="0.2963%" height="15" fill="rgb(248,212,6)" fg:x="1453" fg:w="624"/><text x="0.9398%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (470 samples, 0.22%)</title><rect x="3.2508%" y="213" width="0.2231%" height="15" fill="rgb(208,68,35)" fg:x="6847" fg:w="470"/><text x="3.5008%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209393 (303 samples, 0.14%)</title><rect x="12.4822%" y="181" width="0.1439%" height="15" fill="rgb(232,128,0)" fg:x="26291" fg:w="303"/><text x="12.7322%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209395 (130 samples, 0.06%)</title><rect x="12.6261%" y="181" width="0.0617%" height="15" fill="rgb(207,160,47)" fg:x="26594" fg:w="130"/><text x="12.8761%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209397 (141 samples, 0.07%)</title><rect x="12.6878%" y="181" width="0.0669%" height="15" fill="rgb(228,23,34)" fg:x="26724" fg:w="141"/><text x="12.9378%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209399 (355 samples, 0.17%)</title><rect x="12.7547%" y="181" width="0.1685%" height="15" fill="rgb(218,30,26)" fg:x="26865" fg:w="355"/><text x="13.0047%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20939b (30 samples, 0.01%)</title><rect x="12.9233%" y="181" width="0.0142%" height="15" fill="rgb(220,122,19)" fg:x="27220" fg:w="30"/><text x="13.1733%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20939c (66 samples, 0.03%)</title><rect x="12.9375%" y="181" width="0.0313%" height="15" fill="rgb(250,228,42)" fg:x="27250" fg:w="66"/><text x="13.1875%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a0 (305 samples, 0.14%)</title><rect x="12.9688%" y="181" width="0.1448%" height="15" fill="rgb(240,193,28)" fg:x="27316" fg:w="305"/><text x="13.2188%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a4 (24 samples, 0.01%)</title><rect x="13.1136%" y="181" width="0.0114%" height="15" fill="rgb(216,20,37)" fg:x="27621" fg:w="24"/><text x="13.3636%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093a8 (87 samples, 0.04%)</title><rect x="13.1250%" y="181" width="0.0413%" height="15" fill="rgb(206,188,39)" fg:x="27645" fg:w="87"/><text x="13.3750%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b2 (242 samples, 0.11%)</title><rect x="13.1739%" y="181" width="0.1149%" height="15" fill="rgb(217,207,13)" fg:x="27748" fg:w="242"/><text x="13.4239%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093b6 (27 samples, 0.01%)</title><rect x="13.2888%" y="181" width="0.0128%" height="15" fill="rgb(231,73,38)" fg:x="27990" fg:w="27"/><text x="13.5388%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093c3 (82 samples, 0.04%)</title><rect x="13.3017%" y="181" width="0.0389%" height="15" fill="rgb(225,20,46)" fg:x="28017" fg:w="82"/><text x="13.5517%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093c6 (31 samples, 0.01%)</title><rect x="13.3406%" y="181" width="0.0147%" height="15" fill="rgb(210,31,41)" fg:x="28099" fg:w="31"/><text x="13.5906%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093ca (277 samples, 0.13%)</title><rect x="13.3553%" y="181" width="0.1315%" height="15" fill="rgb(221,200,47)" fg:x="28130" fg:w="277"/><text x="13.6053%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093cc (36 samples, 0.02%)</title><rect x="13.4868%" y="181" width="0.0171%" height="15" fill="rgb(226,26,5)" fg:x="28407" fg:w="36"/><text x="13.7368%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d3 (98 samples, 0.05%)</title><rect x="13.5039%" y="181" width="0.0465%" height="15" fill="rgb(249,33,26)" fg:x="28443" fg:w="98"/><text x="13.7539%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093d9 (288 samples, 0.14%)</title><rect x="13.5504%" y="181" width="0.1367%" height="15" fill="rgb(235,183,28)" fg:x="28541" fg:w="288"/><text x="13.8004%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093dd (1,517 samples, 0.72%)</title><rect x="13.6872%" y="181" width="0.7202%" height="15" fill="rgb(221,5,38)" fg:x="28829" fg:w="1517"/><text x="13.9372%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (6,170 samples, 2.93%)</title><rect x="14.4169%" y="181" width="2.9293%" height="15" fill="rgb(247,18,42)" fg:x="30366" fg:w="6170"/><text x="14.6669%" y="191.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093eb (489 samples, 0.23%)</title><rect x="17.3462%" y="181" width="0.2322%" height="15" fill="rgb(241,131,45)" fg:x="36536" fg:w="489"/><text x="17.5962%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093f8 (408 samples, 0.19%)</title><rect x="17.5803%" y="181" width="0.1937%" height="15" fill="rgb(249,31,29)" fg:x="37029" fg:w="408"/><text x="17.8303%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (1,665 samples, 0.79%)</title><rect x="17.7764%" y="181" width="0.7905%" height="15" fill="rgb(225,111,53)" fg:x="37442" fg:w="1665"/><text x="18.0264%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20940a (417 samples, 0.20%)</title><rect x="18.5669%" y="181" width="0.1980%" height="15" fill="rgb(238,160,17)" fg:x="39107" fg:w="417"/><text x="18.8169%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209414 (410 samples, 0.19%)</title><rect x="18.7677%" y="181" width="0.1947%" height="15" fill="rgb(214,148,48)" fg:x="39530" fg:w="410"/><text x="19.0177%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20941b (957 samples, 0.45%)</title><rect x="18.9647%" y="181" width="0.4544%" height="15" fill="rgb(232,36,49)" fg:x="39945" fg:w="957"/><text x="19.2147%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20942b (422 samples, 0.20%)</title><rect x="19.4271%" y="181" width="0.2004%" height="15" fill="rgb(209,103,24)" fg:x="40919" fg:w="422"/><text x="19.6771%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209439 (380 samples, 0.18%)</title><rect x="19.6341%" y="181" width="0.1804%" height="15" fill="rgb(229,88,8)" fg:x="41355" fg:w="380"/><text x="19.8841%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20943e (42 samples, 0.02%)</title><rect x="19.8193%" y="181" width="0.0199%" height="15" fill="rgb(213,181,19)" fg:x="41745" fg:w="42"/><text x="20.0693%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209442 (125 samples, 0.06%)</title><rect x="19.8392%" y="181" width="0.0593%" height="15" fill="rgb(254,191,54)" fg:x="41787" fg:w="125"/><text x="20.0892%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209445 (408 samples, 0.19%)</title><rect x="19.8986%" y="181" width="0.1937%" height="15" fill="rgb(241,83,37)" fg:x="41912" fg:w="408"/><text x="20.1486%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209452 (397 samples, 0.19%)</title><rect x="20.0951%" y="181" width="0.1885%" height="15" fill="rgb(233,36,39)" fg:x="42326" fg:w="397"/><text x="20.3451%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209467 (373 samples, 0.18%)</title><rect x="20.2870%" y="181" width="0.1771%" height="15" fill="rgb(226,3,54)" fg:x="42730" fg:w="373"/><text x="20.5370%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209484 (403 samples, 0.19%)</title><rect x="20.4683%" y="181" width="0.1913%" height="15" fill="rgb(245,192,40)" fg:x="43112" fg:w="403"/><text x="20.7183%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209493 (399 samples, 0.19%)</title><rect x="20.6734%" y="181" width="0.1894%" height="15" fill="rgb(238,167,29)" fg:x="43544" fg:w="399"/><text x="20.9234%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094a4 (370 samples, 0.18%)</title><rect x="20.8747%" y="181" width="0.1757%" height="15" fill="rgb(232,182,51)" fg:x="43968" fg:w="370"/><text x="21.1247%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (153 samples, 0.07%)</title><rect x="21.0608%" y="181" width="0.0726%" height="15" fill="rgb(231,60,39)" fg:x="44360" fg:w="153"/><text x="21.3108%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d2 (130 samples, 0.06%)</title><rect x="21.1344%" y="181" width="0.0617%" height="15" fill="rgb(208,69,12)" fg:x="44515" fg:w="130"/><text x="21.3844%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d5 (141 samples, 0.07%)</title><rect x="21.1961%" y="181" width="0.0669%" height="15" fill="rgb(235,93,37)" fg:x="44645" fg:w="141"/><text x="21.4461%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094d9 (385 samples, 0.18%)</title><rect x="21.2631%" y="181" width="0.1828%" height="15" fill="rgb(213,116,39)" fg:x="44786" fg:w="385"/><text x="21.5131%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e0 (91 samples, 0.04%)</title><rect x="21.4492%" y="181" width="0.0432%" height="15" fill="rgb(222,207,29)" fg:x="45178" fg:w="91"/><text x="21.6992%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e3 (116 samples, 0.06%)</title><rect x="21.4924%" y="181" width="0.0551%" height="15" fill="rgb(206,96,30)" fg:x="45269" fg:w="116"/><text x="21.7424%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094e7 (402 samples, 0.19%)</title><rect x="21.5475%" y="181" width="0.1909%" height="15" fill="rgb(218,138,4)" fg:x="45385" fg:w="402"/><text x="21.7975%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (1,722 samples, 0.82%)</title><rect x="21.7412%" y="181" width="0.8176%" height="15" fill="rgb(250,191,14)" fg:x="45793" fg:w="1722"/><text x="21.9912%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fc (396 samples, 0.19%)</title><rect x="22.5654%" y="181" width="0.1880%" height="15" fill="rgb(239,60,40)" fg:x="47529" fg:w="396"/><text x="22.8154%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094fe (415 samples, 0.20%)</title><rect x="22.7534%" y="181" width="0.1970%" height="15" fill="rgb(206,27,48)" fg:x="47925" fg:w="415"/><text x="23.0034%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209504 (373 samples, 0.18%)</title><rect x="22.9504%" y="181" width="0.1771%" height="15" fill="rgb(225,35,8)" fg:x="48340" fg:w="373"/><text x="23.2004%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209509 (6,515 samples, 3.09%)</title><rect x="23.1275%" y="181" width="3.0931%" height="15" fill="rgb(250,213,24)" fg:x="48713" fg:w="6515"/><text x="23.3775%" y="191.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095a4 (427 samples, 0.20%)</title><rect x="26.2316%" y="181" width="0.2027%" height="15" fill="rgb(247,123,22)" fg:x="55251" fg:w="427"/><text x="26.4816%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095ae (382 samples, 0.18%)</title><rect x="26.4390%" y="181" width="0.1814%" height="15" fill="rgb(231,138,38)" fg:x="55688" fg:w="382"/><text x="26.6890%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b6 (87 samples, 0.04%)</title><rect x="26.6261%" y="181" width="0.0413%" height="15" fill="rgb(231,145,46)" fg:x="56082" fg:w="87"/><text x="26.8761%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b9 (388 samples, 0.18%)</title><rect x="26.6674%" y="181" width="0.1842%" height="15" fill="rgb(251,118,11)" fg:x="56169" fg:w="388"/><text x="26.9174%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095c6 (406 samples, 0.19%)</title><rect x="26.8559%" y="181" width="0.1928%" height="15" fill="rgb(217,147,25)" fg:x="56566" fg:w="406"/><text x="27.1059%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095d8 (360 samples, 0.17%)</title><rect x="27.0520%" y="181" width="0.1709%" height="15" fill="rgb(247,81,37)" fg:x="56979" fg:w="360"/><text x="27.3020%" y="191.50"></text></g><g><title>datoe_fun_remover`&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (41,007 samples, 19.47%)</title><rect x="7.7691%" y="197" width="19.4689%" height="15" fill="rgb(209,12,38)" fg:x="16364" fg:w="41007"/><text x="8.0191%" y="207.50">datoe_fun_remover`&lt;alloc::vec:..</text></g><g><title>datoe_fun_remover`__rdl_alloc (979 samples, 0.46%)</title><rect x="27.2447%" y="197" width="0.4648%" height="15" fill="rgb(227,1,9)" fg:x="57385" fg:w="979"/><text x="27.4947%" y="207.50"></text></g><g><title>datoe_fun_remover`__rust_alloc (320 samples, 0.15%)</title><rect x="27.7095%" y="197" width="0.1519%" height="15" fill="rgb(248,47,43)" fg:x="58364" fg:w="320"/><text x="27.9595%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ef (23 samples, 0.01%)</title><rect x="27.9407%" y="165" width="0.0109%" height="15" fill="rgb(221,10,30)" fg:x="58851" fg:w="23"/><text x="28.1907%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a004 (49 samples, 0.02%)</title><rect x="27.9953%" y="165" width="0.0233%" height="15" fill="rgb(210,229,1)" fg:x="58966" fg:w="49"/><text x="28.2453%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a1cb (44 samples, 0.02%)</title><rect x="28.0575%" y="133" width="0.0209%" height="15" fill="rgb(222,148,37)" fg:x="59097" fg:w="44"/><text x="28.3075%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2093e7 (24 samples, 0.01%)</title><rect x="28.0931%" y="117" width="0.0114%" height="15" fill="rgb(234,67,33)" fg:x="59172" fg:w="24"/><text x="28.3431%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209407 (22 samples, 0.01%)</title><rect x="28.1050%" y="117" width="0.0104%" height="15" fill="rgb(247,98,35)" fg:x="59197" fg:w="22"/><text x="28.3550%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2094ce (28 samples, 0.01%)</title><rect x="28.1344%" y="117" width="0.0133%" height="15" fill="rgb(247,138,52)" fg:x="59259" fg:w="28"/><text x="28.3844%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c852 (176 samples, 0.08%)</title><rect x="28.0841%" y="133" width="0.0836%" height="15" fill="rgb(213,79,30)" fg:x="59153" fg:w="176"/><text x="28.3341%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c86f (60 samples, 0.03%)</title><rect x="28.1691%" y="133" width="0.0285%" height="15" fill="rgb(246,177,23)" fg:x="59332" fg:w="60"/><text x="28.4191%" y="143.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (59 samples, 0.03%)</title><rect x="28.1696%" y="117" width="0.0280%" height="15" fill="rgb(230,62,27)" fg:x="59333" fg:w="59"/><text x="28.4196%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (36 samples, 0.02%)</title><rect x="28.2099%" y="117" width="0.0171%" height="15" fill="rgb(216,154,8)" fg:x="59418" fg:w="36"/><text x="28.4599%" y="127.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c87c (184 samples, 0.09%)</title><rect x="28.1976%" y="133" width="0.0874%" height="15" fill="rgb(244,35,45)" fg:x="59392" fg:w="184"/><text x="28.4476%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (524 samples, 0.25%)</title><rect x="28.0423%" y="149" width="0.2488%" height="15" fill="rgb(251,115,12)" fg:x="59065" fg:w="524"/><text x="28.2923%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (584 samples, 0.28%)</title><rect x="28.0371%" y="165" width="0.2773%" height="15" fill="rgb(240,54,50)" fg:x="59054" fg:w="584"/><text x="28.2871%" y="175.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (926 samples, 0.44%)</title><rect x="27.8838%" y="181" width="0.4396%" height="15" fill="rgb(233,84,52)" fg:x="58731" fg:w="926"/><text x="28.1338%" y="191.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1,007 samples, 0.48%)</title><rect x="27.8614%" y="197" width="0.4781%" height="15" fill="rgb(207,117,47)" fg:x="58684" fg:w="1007"/><text x="28.1114%" y="207.50"></text></g><g><title>datoe_fun_remover`itertools::lazy_buffer::LazyBuffer&lt;I&gt;::get_next (29 samples, 0.01%)</title><rect x="28.3410%" y="197" width="0.0138%" height="15" fill="rgb(249,43,39)" fg:x="59694" fg:w="29"/><text x="28.5910%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209350 (876 samples, 0.42%)</title><rect x="28.3547%" y="197" width="0.4159%" height="15" fill="rgb(209,38,44)" fg:x="59723" fg:w="876"/><text x="28.6047%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20938f (107 samples, 0.05%)</title><rect x="28.7820%" y="197" width="0.0508%" height="15" fill="rgb(236,212,23)" fg:x="60623" fg:w="107"/><text x="29.0320%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095b5 (391 samples, 0.19%)</title><rect x="28.8352%" y="197" width="0.1856%" height="15" fill="rgb(242,79,21)" fg:x="60735" fg:w="391"/><text x="29.0852%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cdd (438 samples, 0.21%)</title><rect x="29.0208%" y="197" width="0.2079%" height="15" fill="rgb(211,96,35)" fg:x="61126" fg:w="438"/><text x="29.2708%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf1 (396 samples, 0.19%)</title><rect x="29.2392%" y="197" width="0.1880%" height="15" fill="rgb(253,215,40)" fg:x="61586" fg:w="396"/><text x="29.4892%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cf3 (26 samples, 0.01%)</title><rect x="29.4272%" y="197" width="0.0123%" height="15" fill="rgb(211,81,21)" fg:x="61982" fg:w="26"/><text x="29.6772%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225cfd (98 samples, 0.05%)</title><rect x="29.4486%" y="197" width="0.0465%" height="15" fill="rgb(208,190,38)" fg:x="62027" fg:w="98"/><text x="29.6986%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d04 (382 samples, 0.18%)</title><rect x="29.4951%" y="197" width="0.1814%" height="15" fill="rgb(235,213,38)" fg:x="62125" fg:w="382"/><text x="29.7451%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d0d (379 samples, 0.18%)</title><rect x="29.6846%" y="197" width="0.1799%" height="15" fill="rgb(237,122,38)" fg:x="62524" fg:w="379"/><text x="29.9346%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d17 (28 samples, 0.01%)</title><rect x="29.8711%" y="197" width="0.0133%" height="15" fill="rgb(244,218,35)" fg:x="62917" fg:w="28"/><text x="30.1211%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d19 (398 samples, 0.19%)</title><rect x="29.8844%" y="197" width="0.1890%" height="15" fill="rgb(240,68,47)" fg:x="62945" fg:w="398"/><text x="30.1344%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1d (94 samples, 0.04%)</title><rect x="30.0734%" y="197" width="0.0446%" height="15" fill="rgb(210,16,53)" fg:x="63343" fg:w="94"/><text x="30.3234%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d1f (97 samples, 0.05%)</title><rect x="30.1180%" y="197" width="0.0461%" height="15" fill="rgb(235,124,12)" fg:x="63437" fg:w="97"/><text x="30.3680%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d28 (324 samples, 0.15%)</title><rect x="30.1679%" y="197" width="0.1538%" height="15" fill="rgb(224,169,11)" fg:x="63542" fg:w="324"/><text x="30.4179%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::combinations_with_replacement::CombinationsWithReplacement&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (56,738 samples, 26.94%)</title><rect x="3.4739%" y="213" width="26.9375%" height="15" fill="rgb(250,166,2)" fg:x="7317" fg:w="56738"/><text x="3.7239%" y="223.50">datoe_fun_remover`&lt;itertools::combinations_..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a225d2c (189 samples, 0.09%)</title><rect x="30.3217%" y="197" width="0.0897%" height="15" fill="rgb(242,216,29)" fg:x="63866" fg:w="189"/><text x="30.5717%" y="207.50"></text></g><g><title>datoe_fun_remover`alloc::vec::from_elem (132 samples, 0.06%)</title><rect x="30.4219%" y="213" width="0.0627%" height="15" fill="rgb(230,116,27)" fg:x="64077" fg:w="132"/><text x="30.6719%" y="223.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$pow (38 samples, 0.02%)</title><rect x="43.4069%" y="165" width="0.0180%" height="15" fill="rgb(228,99,48)" fg:x="91427" fg:w="38"/><text x="43.6569%" y="175.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (47 samples, 0.02%)</title><rect x="43.4249%" y="165" width="0.0223%" height="15" fill="rgb(253,11,6)" fg:x="91465" fg:w="47"/><text x="43.6749%" y="175.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$pow (109 samples, 0.05%)</title><rect x="48.9588%" y="149" width="0.0518%" height="15" fill="rgb(247,143,39)" fg:x="103121" fg:w="109"/><text x="49.2088%" y="159.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (77 samples, 0.04%)</title><rect x="49.0106%" y="149" width="0.0366%" height="15" fill="rgb(236,97,10)" fg:x="103230" fg:w="77"/><text x="49.2606%" y="159.50"></text></g><g><title>datoe_fun_remover`DYLD-STUB$$trunc (102 samples, 0.05%)</title><rect x="54.1504%" y="133" width="0.0484%" height="15" fill="rgb(233,208,19)" fg:x="114056" fg:w="102"/><text x="54.4004%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (4,811 samples, 2.28%)</title><rect x="54.1989%" y="133" width="2.2841%" height="15" fill="rgb(216,164,2)" fg:x="114158" fg:w="4811"/><text x="54.4489%" y="143.50">d..</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (16,210 samples, 7.70%)</title><rect x="49.0471%" y="149" width="7.6960%" height="15" fill="rgb(220,129,5)" fg:x="103307" fg:w="16210"/><text x="49.2971%" y="159.50">datoe_fun_r..</text></g><g><title>libsystem_m.dylib`trunc (548 samples, 0.26%)</title><rect x="56.4830%" y="133" width="0.2602%" height="15" fill="rgb(242,17,10)" fg:x="118969" fg:w="548"/><text x="56.7330%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (4,545 samples, 2.16%)</title><rect x="56.7432%" y="149" width="2.1578%" height="15" fill="rgb(242,107,0)" fg:x="119517" fg:w="4545"/><text x="56.9932%" y="159.50">d..</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (4,699 samples, 2.23%)</title><rect x="58.9010%" y="149" width="2.2309%" height="15" fill="rgb(251,28,31)" fg:x="124062" fg:w="4699"/><text x="59.1510%" y="159.50">d..</text></g><g><title>libsystem_m.dylib`fmod (660 samples, 0.31%)</title><rect x="60.8186%" y="133" width="0.3133%" height="15" fill="rgb(233,223,10)" fg:x="128101" fg:w="660"/><text x="61.0686%" y="143.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (12,010 samples, 5.70%)</title><rect x="61.1319%" y="149" width="5.7020%" height="15" fill="rgb(215,21,27)" fg:x="128761" fg:w="12010"/><text x="61.3819%" y="159.50">libsyst..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (160 samples, 0.08%)</title><rect x="66.8339%" y="149" width="0.0760%" height="15" fill="rgb(232,23,21)" fg:x="140771" fg:w="160"/><text x="67.0839%" y="159.50"></text></g><g><title>libsystem_m.dylib`fmod (36 samples, 0.02%)</title><rect x="66.9099%" y="149" width="0.0171%" height="15" fill="rgb(244,5,23)" fg:x="140931" fg:w="36"/><text x="67.1599%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (49,650 samples, 23.57%)</title><rect x="43.4472%" y="165" width="23.5724%" height="15" fill="rgb(226,81,46)" fg:x="91512" fg:w="49650"/><text x="43.6972%" y="175.50">datoe_fun_remover`datoe_fun_remover::..</text></g><g><title>libsystem_m.dylib`trunc (195 samples, 0.09%)</title><rect x="66.9270%" y="149" width="0.0926%" height="15" fill="rgb(247,70,30)" fg:x="140967" fg:w="195"/><text x="67.1770%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (2,766 samples, 1.31%)</title><rect x="67.0196%" y="165" width="1.3132%" height="15" fill="rgb(212,68,19)" fg:x="141162" fg:w="2766"/><text x="67.2696%" y="175.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (2,505 samples, 1.19%)</title><rect x="68.3328%" y="165" width="1.1893%" height="15" fill="rgb(240,187,13)" fg:x="143928" fg:w="2505"/><text x="68.5828%" y="175.50"></text></g><g><title>libsystem_m.dylib`fmod (358 samples, 0.17%)</title><rect x="69.3521%" y="149" width="0.1700%" height="15" fill="rgb(223,113,26)" fg:x="146075" fg:w="358"/><text x="69.6021%" y="159.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (6,108 samples, 2.90%)</title><rect x="69.5221%" y="165" width="2.8999%" height="15" fill="rgb(206,192,2)" fg:x="146433" fg:w="6108"/><text x="69.7721%" y="175.50">li..</text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (75 samples, 0.04%)</title><rect x="72.4220%" y="165" width="0.0356%" height="15" fill="rgb(241,108,4)" fg:x="152541" fg:w="75"/><text x="72.6720%" y="175.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (71,986 samples, 34.18%)</title><rect x="38.3681%" y="181" width="34.1768%" height="15" fill="rgb(247,173,49)" fg:x="80814" fg:w="71986"/><text x="38.6181%" y="191.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom..</text></g><g><title>libsystem_m.dylib`trunc (172 samples, 0.08%)</title><rect x="72.4633%" y="165" width="0.0817%" height="15" fill="rgb(224,114,35)" fg:x="152628" fg:w="172"/><text x="72.7133%" y="175.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (1,727 samples, 0.82%)</title><rect x="72.5450%" y="181" width="0.8199%" height="15" fill="rgb(245,159,27)" fg:x="152800" fg:w="1727"/><text x="72.7950%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (1,148 samples, 0.55%)</title><rect x="73.3649%" y="181" width="0.5450%" height="15" fill="rgb(245,172,44)" fg:x="154527" fg:w="1148"/><text x="73.6149%" y="191.50"></text></g><g><title>libsystem_m.dylib`fmod (235 samples, 0.11%)</title><rect x="73.7984%" y="165" width="0.1116%" height="15" fill="rgb(236,23,11)" fg:x="155440" fg:w="235"/><text x="74.0484%" y="175.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (2,348 samples, 1.11%)</title><rect x="73.9099%" y="181" width="1.1148%" height="15" fill="rgb(205,117,38)" fg:x="155675" fg:w="2348"/><text x="74.1599%" y="191.50"></text></g><g><title>libsystem_m.dylib`DYLD-STUB$$pow (37 samples, 0.02%)</title><rect x="75.0247%" y="181" width="0.0176%" height="15" fill="rgb(237,72,25)" fg:x="158023" fg:w="37"/><text x="75.2747%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (87,582 samples, 41.58%)</title><rect x="33.5027%" y="197" width="41.5814%" height="15" fill="rgb(244,70,9)" fg:x="70566" fg:w="87582"/><text x="33.7527%" y="207.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec</text></g><g><title>libsystem_m.dylib`trunc (71 samples, 0.03%)</title><rect x="75.0503%" y="181" width="0.0337%" height="15" fill="rgb(217,125,39)" fg:x="158077" fg:w="71"/><text x="75.3003%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::func::Func::apply (346 samples, 0.16%)</title><rect x="75.0840%" y="197" width="0.1643%" height="15" fill="rgb(235,36,10)" fg:x="158148" fg:w="346"/><text x="75.3340%" y="207.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::operation::Operation::apply (466 samples, 0.22%)</title><rect x="75.2483%" y="197" width="0.2212%" height="15" fill="rgb(251,123,47)" fg:x="158494" fg:w="466"/><text x="75.4983%" y="207.50"></text></g><g><title>libsystem_m.dylib`fmod (132 samples, 0.06%)</title><rect x="75.4069%" y="181" width="0.0627%" height="15" fill="rgb(221,13,13)" fg:x="158828" fg:w="132"/><text x="75.6569%" y="191.50"></text></g><g><title>libsystem_m.dylib`0x00007ff825f22aa0 (777 samples, 0.37%)</title><rect x="75.4695%" y="197" width="0.3689%" height="15" fill="rgb(238,131,9)" fg:x="158960" fg:w="777"/><text x="75.7195%" y="207.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (95,555 samples, 45.37%)</title><rect x="30.4846%" y="213" width="45.3667%" height="15" fill="rgb(211,50,8)" fg:x="64209" fg:w="95555"/><text x="30.7346%" y="223.50">datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec</text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (215 samples, 0.10%)</title><rect x="75.8513%" y="213" width="0.1021%" height="15" fill="rgb(245,182,24)" fg:x="159764" fg:w="215"/><text x="76.1013%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (161 samples, 0.08%)</title><rect x="75.8769%" y="197" width="0.0764%" height="15" fill="rgb(242,14,37)" fg:x="159818" fg:w="161"/><text x="76.1269%" y="207.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (61 samples, 0.03%)</title><rect x="75.9244%" y="181" width="0.0290%" height="15" fill="rgb(246,228,12)" fg:x="159918" fg:w="61"/><text x="76.1744%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fc (84 samples, 0.04%)</title><rect x="75.9709%" y="213" width="0.0399%" height="15" fill="rgb(213,55,15)" fg:x="160016" fg:w="84"/><text x="76.2209%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236fe (318 samples, 0.15%)</title><rect x="76.0108%" y="213" width="0.1510%" height="15" fill="rgb(209,9,3)" fg:x="160100" fg:w="318"/><text x="76.2608%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223700 (31 samples, 0.01%)</title><rect x="76.1618%" y="213" width="0.0147%" height="15" fill="rgb(230,59,30)" fg:x="160418" fg:w="31"/><text x="76.4118%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223702 (24 samples, 0.01%)</title><rect x="76.1765%" y="213" width="0.0114%" height="15" fill="rgb(209,121,21)" fg:x="160449" fg:w="24"/><text x="76.4265%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223704 (98 samples, 0.05%)</title><rect x="76.1879%" y="213" width="0.0465%" height="15" fill="rgb(220,109,13)" fg:x="160473" fg:w="98"/><text x="76.4379%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223705 (285 samples, 0.14%)</title><rect x="76.2344%" y="213" width="0.1353%" height="15" fill="rgb(232,18,1)" fg:x="160571" fg:w="285"/><text x="76.4844%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223706 (28 samples, 0.01%)</title><rect x="76.3697%" y="213" width="0.0133%" height="15" fill="rgb(215,41,42)" fg:x="160856" fg:w="28"/><text x="76.6197%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370c (73 samples, 0.03%)</title><rect x="76.3901%" y="213" width="0.0347%" height="15" fill="rgb(224,123,36)" fg:x="160899" fg:w="73"/><text x="76.6401%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22370f (308 samples, 0.15%)</title><rect x="76.4248%" y="213" width="0.1462%" height="15" fill="rgb(240,125,3)" fg:x="160972" fg:w="308"/><text x="76.6748%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223725 (88 samples, 0.04%)</title><rect x="76.5876%" y="213" width="0.0418%" height="15" fill="rgb(205,98,50)" fg:x="161315" fg:w="88"/><text x="76.8376%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22372f (310 samples, 0.15%)</title><rect x="76.6294%" y="213" width="0.1472%" height="15" fill="rgb(205,185,37)" fg:x="161403" fg:w="310"/><text x="76.8794%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22373f (46 samples, 0.02%)</title><rect x="76.7823%" y="213" width="0.0218%" height="15" fill="rgb(238,207,15)" fg:x="161725" fg:w="46"/><text x="77.0323%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223746 (200 samples, 0.09%)</title><rect x="76.8041%" y="213" width="0.0950%" height="15" fill="rgb(213,199,42)" fg:x="161771" fg:w="200"/><text x="77.0541%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22374f (300 samples, 0.14%)</title><rect x="76.8991%" y="213" width="0.1424%" height="15" fill="rgb(235,201,11)" fg:x="161971" fg:w="300"/><text x="77.1491%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22375f (23 samples, 0.01%)</title><rect x="77.0501%" y="213" width="0.0109%" height="15" fill="rgb(207,46,11)" fg:x="162289" fg:w="23"/><text x="77.3001%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237dd (72 samples, 0.03%)</title><rect x="77.0610%" y="213" width="0.0342%" height="15" fill="rgb(241,35,35)" fg:x="162312" fg:w="72"/><text x="77.3110%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e0 (268 samples, 0.13%)</title><rect x="77.0952%" y="213" width="0.1272%" height="15" fill="rgb(243,32,47)" fg:x="162384" fg:w="268"/><text x="77.3452%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237e3 (22 samples, 0.01%)</title><rect x="77.2224%" y="213" width="0.0104%" height="15" fill="rgb(247,202,23)" fg:x="162652" fg:w="22"/><text x="77.4724%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ef (112 samples, 0.05%)</title><rect x="77.2414%" y="213" width="0.0532%" height="15" fill="rgb(219,102,11)" fg:x="162692" fg:w="112"/><text x="77.4914%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f2 (290 samples, 0.14%)</title><rect x="77.2946%" y="213" width="0.1377%" height="15" fill="rgb(243,110,44)" fg:x="162804" fg:w="290"/><text x="77.5446%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237f5 (25 samples, 0.01%)</title><rect x="77.4323%" y="213" width="0.0119%" height="15" fill="rgb(222,74,54)" fg:x="163094" fg:w="25"/><text x="77.6823%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2237ff (780 samples, 0.37%)</title><rect x="77.4489%" y="213" width="0.3703%" height="15" fill="rgb(216,99,12)" fg:x="163129" fg:w="780"/><text x="77.6989%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223802 (173 samples, 0.08%)</title><rect x="77.8192%" y="213" width="0.0821%" height="15" fill="rgb(226,22,26)" fg:x="163909" fg:w="173"/><text x="78.0692%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223813 (240 samples, 0.11%)</title><rect x="77.9046%" y="213" width="0.1139%" height="15" fill="rgb(217,163,10)" fg:x="164089" fg:w="240"/><text x="78.1546%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223816 (165 samples, 0.08%)</title><rect x="78.0186%" y="213" width="0.0783%" height="15" fill="rgb(213,25,53)" fg:x="164329" fg:w="165"/><text x="78.2686%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223820 (252 samples, 0.12%)</title><rect x="78.1003%" y="213" width="0.1196%" height="15" fill="rgb(252,105,26)" fg:x="164501" fg:w="252"/><text x="78.3503%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223826 (203 samples, 0.10%)</title><rect x="78.2199%" y="213" width="0.0964%" height="15" fill="rgb(220,39,43)" fg:x="164753" fg:w="203"/><text x="78.4699%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382d (105 samples, 0.05%)</title><rect x="78.3186%" y="213" width="0.0499%" height="15" fill="rgb(229,68,48)" fg:x="164961" fg:w="105"/><text x="78.5686%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22382f (206 samples, 0.10%)</title><rect x="78.3685%" y="213" width="0.0978%" height="15" fill="rgb(252,8,32)" fg:x="165066" fg:w="206"/><text x="78.6185%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223835 (228 samples, 0.11%)</title><rect x="78.4663%" y="213" width="0.1082%" height="15" fill="rgb(223,20,43)" fg:x="165272" fg:w="228"/><text x="78.7163%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22383d (378 samples, 0.18%)</title><rect x="78.5745%" y="213" width="0.1795%" height="15" fill="rgb(229,81,49)" fg:x="165500" fg:w="378"/><text x="78.8245%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223841 (25 samples, 0.01%)</title><rect x="78.7545%" y="213" width="0.0119%" height="15" fill="rgb(236,28,36)" fg:x="165879" fg:w="25"/><text x="79.0045%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223849 (75 samples, 0.04%)</title><rect x="78.7664%" y="213" width="0.0356%" height="15" fill="rgb(249,185,26)" fg:x="165904" fg:w="75"/><text x="79.0164%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223851 (203 samples, 0.10%)</title><rect x="78.8020%" y="213" width="0.0964%" height="15" fill="rgb(249,174,33)" fg:x="165979" fg:w="203"/><text x="79.0520%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22385e (151 samples, 0.07%)</title><rect x="78.8983%" y="213" width="0.0717%" height="15" fill="rgb(233,201,37)" fg:x="166182" fg:w="151"/><text x="79.1483%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223866 (111 samples, 0.05%)</title><rect x="78.9715%" y="213" width="0.0527%" height="15" fill="rgb(221,78,26)" fg:x="166336" fg:w="111"/><text x="79.2215%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22386d (192 samples, 0.09%)</title><rect x="79.0242%" y="213" width="0.0912%" height="15" fill="rgb(250,127,30)" fg:x="166447" fg:w="192"/><text x="79.2742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223870 (151 samples, 0.07%)</title><rect x="79.1153%" y="213" width="0.0717%" height="15" fill="rgb(230,49,44)" fg:x="166639" fg:w="151"/><text x="79.3653%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223876 (77 samples, 0.04%)</title><rect x="79.1965%" y="213" width="0.0366%" height="15" fill="rgb(229,67,23)" fg:x="166810" fg:w="77"/><text x="79.4465%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223879 (192 samples, 0.09%)</title><rect x="79.2331%" y="213" width="0.0912%" height="15" fill="rgb(249,83,47)" fg:x="166887" fg:w="192"/><text x="79.4831%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22387d (142 samples, 0.07%)</title><rect x="79.3242%" y="213" width="0.0674%" height="15" fill="rgb(215,43,3)" fg:x="167079" fg:w="142"/><text x="79.5742%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223884 (88 samples, 0.04%)</title><rect x="79.3935%" y="213" width="0.0418%" height="15" fill="rgb(238,154,13)" fg:x="167225" fg:w="88"/><text x="79.6435%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223887 (179 samples, 0.08%)</title><rect x="79.4353%" y="213" width="0.0850%" height="15" fill="rgb(219,56,2)" fg:x="167313" fg:w="179"/><text x="79.6853%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22388c (161 samples, 0.08%)</title><rect x="79.5203%" y="213" width="0.0764%" height="15" fill="rgb(233,0,4)" fg:x="167492" fg:w="161"/><text x="79.7703%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223891 (11,572 samples, 5.49%)</title><rect x="79.6001%" y="213" width="5.4940%" height="15" fill="rgb(235,30,7)" fg:x="167660" fg:w="11572"/><text x="79.8501%" y="223.50">libsyst..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238c2 (161 samples, 0.08%)</title><rect x="85.0946%" y="213" width="0.0764%" height="15" fill="rgb(250,79,13)" fg:x="179233" fg:w="161"/><text x="85.3446%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238cd (27 samples, 0.01%)</title><rect x="85.1753%" y="213" width="0.0128%" height="15" fill="rgb(211,146,34)" fg:x="179403" fg:w="27"/><text x="85.4253%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d0 (334 samples, 0.16%)</title><rect x="85.1881%" y="213" width="0.1586%" height="15" fill="rgb(228,22,38)" fg:x="179430" fg:w="334"/><text x="85.4381%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238d5 (47 samples, 0.02%)</title><rect x="85.3467%" y="213" width="0.0223%" height="15" fill="rgb(235,168,5)" fg:x="179764" fg:w="47"/><text x="85.5967%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238e5 (398 samples, 0.19%)</title><rect x="85.3775%" y="213" width="0.1890%" height="15" fill="rgb(221,155,16)" fg:x="179829" fg:w="398"/><text x="85.6275%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f1 (350 samples, 0.17%)</title><rect x="85.5784%" y="213" width="0.1662%" height="15" fill="rgb(215,215,53)" fg:x="180252" fg:w="350"/><text x="85.8284%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2238f5 (49 samples, 0.02%)</title><rect x="85.7445%" y="213" width="0.0233%" height="15" fill="rgb(223,4,10)" fg:x="180602" fg:w="49"/><text x="85.9945%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223901 (3,028 samples, 1.44%)</title><rect x="85.7782%" y="213" width="1.4376%" height="15" fill="rgb(234,103,6)" fg:x="180673" fg:w="3028"/><text x="86.0282%" y="223.50"></text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (2,567 samples, 1.22%)</title><rect x="85.9971%" y="197" width="1.2187%" height="15" fill="rgb(227,97,0)" fg:x="181134" fg:w="2567"/><text x="86.2471%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223908 (60 samples, 0.03%)</title><rect x="87.2187%" y="213" width="0.0285%" height="15" fill="rgb(234,150,53)" fg:x="183707" fg:w="60"/><text x="87.4687%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22390f (40 samples, 0.02%)</title><rect x="87.2472%" y="213" width="0.0190%" height="15" fill="rgb(228,201,54)" fg:x="183767" fg:w="40"/><text x="87.4972%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223912 (380 samples, 0.18%)</title><rect x="87.2662%" y="213" width="0.1804%" height="15" fill="rgb(222,22,37)" fg:x="183807" fg:w="380"/><text x="87.5162%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22391d (159 samples, 0.08%)</title><rect x="87.4480%" y="213" width="0.0755%" height="15" fill="rgb(237,53,32)" fg:x="184190" fg:w="159"/><text x="87.6980%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223924 (387 samples, 0.18%)</title><rect x="87.5259%" y="213" width="0.1837%" height="15" fill="rgb(233,25,53)" fg:x="184354" fg:w="387"/><text x="87.7759%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223928 (52 samples, 0.02%)</title><rect x="87.7096%" y="213" width="0.0247%" height="15" fill="rgb(210,40,34)" fg:x="184741" fg:w="52"/><text x="87.9596%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223934 (346 samples, 0.16%)</title><rect x="87.7362%" y="213" width="0.1643%" height="15" fill="rgb(241,220,44)" fg:x="184797" fg:w="346"/><text x="87.9862%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223939 (34 samples, 0.02%)</title><rect x="87.9005%" y="213" width="0.0161%" height="15" fill="rgb(235,28,35)" fg:x="185143" fg:w="34"/><text x="88.1505%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223947 (353 samples, 0.17%)</title><rect x="87.9195%" y="213" width="0.1676%" height="15" fill="rgb(210,56,17)" fg:x="185183" fg:w="353"/><text x="88.1695%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22394d (44 samples, 0.02%)</title><rect x="88.0871%" y="213" width="0.0209%" height="15" fill="rgb(224,130,29)" fg:x="185536" fg:w="44"/><text x="88.3371%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395b (351 samples, 0.17%)</title><rect x="88.1103%" y="213" width="0.1666%" height="15" fill="rgb(235,212,8)" fg:x="185585" fg:w="351"/><text x="88.3603%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22395d (48 samples, 0.02%)</title><rect x="88.2770%" y="213" width="0.0228%" height="15" fill="rgb(223,33,50)" fg:x="185936" fg:w="48"/><text x="88.5270%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396c (358 samples, 0.17%)</title><rect x="88.3017%" y="213" width="0.1700%" height="15" fill="rgb(219,149,13)" fg:x="185988" fg:w="358"/><text x="88.5517%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22396e (57 samples, 0.03%)</title><rect x="88.4716%" y="213" width="0.0271%" height="15" fill="rgb(250,156,29)" fg:x="186346" fg:w="57"/><text x="88.7216%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223992 (170 samples, 0.08%)</title><rect x="88.5091%" y="213" width="0.0807%" height="15" fill="rgb(216,193,19)" fg:x="186425" fg:w="170"/><text x="88.7591%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399b (336 samples, 0.16%)</title><rect x="88.5951%" y="213" width="0.1595%" height="15" fill="rgb(216,135,14)" fg:x="186606" fg:w="336"/><text x="88.8451%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22399e (5,128 samples, 2.43%)</title><rect x="88.7546%" y="213" width="2.4346%" height="15" fill="rgb(241,47,5)" fg:x="186942" fg:w="5128"/><text x="89.0046%" y="223.50">li..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a0 (60 samples, 0.03%)</title><rect x="91.1892%" y="213" width="0.0285%" height="15" fill="rgb(233,42,35)" fg:x="192070" fg:w="60"/><text x="91.4392%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a2 (101 samples, 0.05%)</title><rect x="91.2177%" y="213" width="0.0480%" height="15" fill="rgb(231,13,6)" fg:x="192130" fg:w="101"/><text x="91.4677%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239a8 (358 samples, 0.17%)</title><rect x="91.2656%" y="213" width="0.1700%" height="15" fill="rgb(207,181,40)" fg:x="192231" fg:w="358"/><text x="91.5156%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239aa (334 samples, 0.16%)</title><rect x="91.4356%" y="213" width="0.1586%" height="15" fill="rgb(254,173,49)" fg:x="192589" fg:w="334"/><text x="91.6856%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239b7 (7,265 samples, 3.45%)</title><rect x="91.6037%" y="213" width="3.4492%" height="15" fill="rgb(221,1,38)" fg:x="192943" fg:w="7265"/><text x="91.8537%" y="223.50">lib..</text></g><g><title>libsystem_malloc.dylib`0x7ff81a2239f6 (111 samples, 0.05%)</title><rect x="95.0605%" y="213" width="0.0527%" height="15" fill="rgb(206,124,46)" fg:x="200224" fg:w="111"/><text x="95.3105%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a39 (409 samples, 0.19%)</title><rect x="95.1137%" y="213" width="0.1942%" height="15" fill="rgb(249,21,11)" fg:x="200336" fg:w="409"/><text x="95.3637%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a40 (402 samples, 0.19%)</title><rect x="95.3159%" y="213" width="0.1909%" height="15" fill="rgb(222,201,40)" fg:x="200762" fg:w="402"/><text x="95.5659%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a22c472 (375 samples, 0.18%)</title><rect x="95.5139%" y="213" width="0.1780%" height="15" fill="rgb(235,61,29)" fg:x="201179" fg:w="375"/><text x="95.7639%" y="223.50"></text></g><g><title>libsystem_platform.dylib`DYLD-STUB$$_platform_bzero (449 samples, 0.21%)</title><rect x="95.6919%" y="213" width="0.2132%" height="15" fill="rgb(219,207,3)" fg:x="201554" fg:w="449"/><text x="95.9419%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group (200,446 samples, 95.17%)</title><rect x="0.9861%" y="229" width="95.1659%" height="15" fill="rgb(222,56,46)" fg:x="2077" fg:w="200446"/><text x="1.2361%" y="239.50">datoe_fun_remover`datoe_fun_remover::finder::get_solution_in_group</text></g><g><title>libsystem_platform.dylib`_platform_bzero$VARIANT$Haswell (520 samples, 0.25%)</title><rect x="95.9051%" y="213" width="0.2469%" height="15" fill="rgb(239,76,54)" fg:x="202003" fg:w="520"/><text x="96.1551%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e2b (438 samples, 0.21%)</title><rect x="96.1520%" y="229" width="0.2079%" height="15" fill="rgb(231,124,27)" fg:x="202523" fg:w="438"/><text x="96.4020%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e30 (35 samples, 0.02%)</title><rect x="96.3599%" y="229" width="0.0166%" height="15" fill="rgb(249,195,6)" fg:x="202961" fg:w="35"/><text x="96.6099%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3a (575 samples, 0.27%)</title><rect x="96.3766%" y="229" width="0.2730%" height="15" fill="rgb(237,174,47)" fg:x="202996" fg:w="575"/><text x="96.6266%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e3c (52 samples, 0.02%)</title><rect x="96.6495%" y="229" width="0.0247%" height="15" fill="rgb(206,201,31)" fg:x="203571" fg:w="52"/><text x="96.8995%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e43 (49 samples, 0.02%)</title><rect x="96.6742%" y="229" width="0.0233%" height="15" fill="rgb(231,57,52)" fg:x="203623" fg:w="49"/><text x="96.9242%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e45 (358 samples, 0.17%)</title><rect x="96.6975%" y="229" width="0.1700%" height="15" fill="rgb(248,177,22)" fg:x="203672" fg:w="358"/><text x="96.9475%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e4d (144 samples, 0.07%)</title><rect x="96.8675%" y="229" width="0.0684%" height="15" fill="rgb(215,211,37)" fg:x="204030" fg:w="144"/><text x="97.1175%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e4f (73 samples, 0.03%)</title><rect x="96.9358%" y="229" width="0.0347%" height="15" fill="rgb(241,128,51)" fg:x="204174" fg:w="73"/><text x="97.1858%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e57 (361 samples, 0.17%)</title><rect x="96.9705%" y="229" width="0.1714%" height="15" fill="rgb(227,165,31)" fg:x="204247" fg:w="361"/><text x="97.2205%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e59 (50 samples, 0.02%)</title><rect x="97.1419%" y="229" width="0.0237%" height="15" fill="rgb(228,167,24)" fg:x="204608" fg:w="50"/><text x="97.3919%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e60 (386 samples, 0.18%)</title><rect x="97.1656%" y="229" width="0.1833%" height="15" fill="rgb(228,143,12)" fg:x="204658" fg:w="386"/><text x="97.4156%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e62 (60 samples, 0.03%)</title><rect x="97.3489%" y="229" width="0.0285%" height="15" fill="rgb(249,149,8)" fg:x="205044" fg:w="60"/><text x="97.5989%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e69 (65 samples, 0.03%)</title><rect x="97.3774%" y="229" width="0.0309%" height="15" fill="rgb(243,35,44)" fg:x="205104" fg:w="65"/><text x="97.6274%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e6c (420 samples, 0.20%)</title><rect x="97.4082%" y="229" width="0.1994%" height="15" fill="rgb(246,89,9)" fg:x="205169" fg:w="420"/><text x="97.6582%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e70 (1,436 samples, 0.68%)</title><rect x="97.6076%" y="229" width="0.6818%" height="15" fill="rgb(233,213,13)" fg:x="205589" fg:w="1436"/><text x="97.8576%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e72 (266 samples, 0.13%)</title><rect x="98.2894%" y="229" width="0.1263%" height="15" fill="rgb(233,141,41)" fg:x="207025" fg:w="266"/><text x="98.5394%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a209e79 (63 samples, 0.03%)</title><rect x="98.4157%" y="229" width="0.0299%" height="15" fill="rgb(239,167,4)" fg:x="207291" fg:w="63"/><text x="98.6657%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2236f8 (314 samples, 0.15%)</title><rect x="98.4532%" y="229" width="0.1491%" height="15" fill="rgb(209,217,16)" fg:x="207370" fg:w="314"/><text x="98.7032%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a47 (389 samples, 0.18%)</title><rect x="98.6075%" y="229" width="0.1847%" height="15" fill="rgb(219,88,35)" fg:x="207695" fg:w="389"/><text x="98.8575%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a48 (332 samples, 0.16%)</title><rect x="98.7922%" y="229" width="0.1576%" height="15" fill="rgb(220,193,23)" fg:x="208084" fg:w="332"/><text x="99.0422%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (208,487 samples, 98.98%)</title><rect x="0.0000%" y="245" width="98.9835%" height="15" fill="rgb(230,90,52)" fg:x="0" fg:w="208487"/><text x="0.2500%" y="255.50">datoe_fun_remover`&lt;core::iter::adapters::rev::Rev&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold</text></g><g><title>libsystem_malloc.dylib`0x7ff81a223a4d (71 samples, 0.03%)</title><rect x="98.9498%" y="229" width="0.0337%" height="15" fill="rgb(252,106,19)" fg:x="208416" fg:w="71"/><text x="99.1998%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (22 samples, 0.01%)</title><rect x="99.0747%" y="117" width="0.0104%" height="15" fill="rgb(206,74,20)" fg:x="208679" fg:w="22"/><text x="99.3247%" y="127.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (96 samples, 0.05%)</title><rect x="99.0400%" y="133" width="0.0456%" height="15" fill="rgb(230,138,44)" fg:x="208606" fg:w="96"/><text x="99.2900%" y="143.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (185 samples, 0.09%)</title><rect x="99.0329%" y="149" width="0.0878%" height="15" fill="rgb(235,182,43)" fg:x="208591" fg:w="185"/><text x="99.2829%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (25 samples, 0.01%)</title><rect x="99.1435%" y="149" width="0.0119%" height="15" fill="rgb(242,16,51)" fg:x="208824" fg:w="25"/><text x="99.3935%" y="159.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (306 samples, 0.15%)</title><rect x="99.0139%" y="165" width="0.1453%" height="15" fill="rgb(248,9,4)" fg:x="208551" fg:w="306"/><text x="99.2639%" y="175.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (25 samples, 0.01%)</title><rect x="99.1848%" y="165" width="0.0119%" height="15" fill="rgb(210,31,22)" fg:x="208911" fg:w="25"/><text x="99.4348%" y="175.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (400 samples, 0.19%)</title><rect x="99.0087%" y="181" width="0.1899%" height="15" fill="rgb(239,54,39)" fg:x="208540" fg:w="400"/><text x="99.2587%" y="191.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20d532 (49 samples, 0.02%)</title><rect x="99.2323%" y="101" width="0.0233%" height="15" fill="rgb(230,99,41)" fg:x="209011" fg:w="49"/><text x="99.4823%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (66 samples, 0.03%)</title><rect x="99.2247%" y="117" width="0.0313%" height="15" fill="rgb(253,106,12)" fg:x="208995" fg:w="66"/><text x="99.4747%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (91 samples, 0.04%)</title><rect x="99.2133%" y="165" width="0.0432%" height="15" fill="rgb(213,46,41)" fg:x="208971" fg:w="91"/><text x="99.4633%" y="175.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (88 samples, 0.04%)</title><rect x="99.2147%" y="149" width="0.0418%" height="15" fill="rgb(215,133,35)" fg:x="208974" fg:w="88"/><text x="99.4647%" y="159.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (68 samples, 0.03%)</title><rect x="99.2242%" y="133" width="0.0323%" height="15" fill="rgb(213,28,5)" fg:x="208994" fg:w="68"/><text x="99.4742%" y="143.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (24 samples, 0.01%)</title><rect x="99.2679%" y="149" width="0.0114%" height="15" fill="rgb(215,77,49)" fg:x="209086" fg:w="24"/><text x="99.5179%" y="159.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (22 samples, 0.01%)</title><rect x="99.2897%" y="117" width="0.0104%" height="15" fill="rgb(248,100,22)" fg:x="209132" fg:w="22"/><text x="99.5397%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (26 samples, 0.01%)</title><rect x="99.2888%" y="133" width="0.0123%" height="15" fill="rgb(208,67,9)" fg:x="209130" fg:w="26"/><text x="99.5388%" y="143.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20a464 (26 samples, 0.01%)</title><rect x="99.3201%" y="37" width="0.0123%" height="15" fill="rgb(219,133,21)" fg:x="209196" fg:w="26"/><text x="99.5701%" y="47.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c7a0 (29 samples, 0.01%)</title><rect x="99.3201%" y="53" width="0.0138%" height="15" fill="rgb(246,46,29)" fg:x="209196" fg:w="29"/><text x="99.5701%" y="63.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20c698 (53 samples, 0.03%)</title><rect x="99.3163%" y="69" width="0.0252%" height="15" fill="rgb(246,185,52)" fg:x="209188" fg:w="53"/><text x="99.5663%" y="79.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (68 samples, 0.03%)</title><rect x="99.3102%" y="101" width="0.0323%" height="15" fill="rgb(252,136,11)" fg:x="209175" fg:w="68"/><text x="99.5602%" y="111.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20b235 (56 samples, 0.03%)</title><rect x="99.3159%" y="85" width="0.0266%" height="15" fill="rgb(219,138,53)" fg:x="209187" fg:w="56"/><text x="99.5659%" y="95.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (73 samples, 0.03%)</title><rect x="99.3083%" y="117" width="0.0347%" height="15" fill="rgb(211,51,23)" fg:x="209171" fg:w="73"/><text x="99.5583%" y="127.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::codons_from_atom_rec (312 samples, 0.15%)</title><rect x="99.2090%" y="181" width="0.1481%" height="15" fill="rgb(247,221,28)" fg:x="208962" fg:w="312"/><text x="99.4590%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::codons_from_atom_rec (212 samples, 0.10%)</title><rect x="99.2565%" y="165" width="0.1007%" height="15" fill="rgb(251,222,45)" fg:x="209062" fg:w="212"/><text x="99.5065%" y="175.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::codons_from_atom_rec (164 samples, 0.08%)</title><rect x="99.2793%" y="149" width="0.0779%" height="15" fill="rgb(217,162,53)" fg:x="209110" fg:w="164"/><text x="99.5293%" y="159.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::codons_from_atom_rec (118 samples, 0.06%)</title><rect x="99.3011%" y="133" width="0.0560%" height="15" fill="rgb(229,93,14)" fg:x="209156" fg:w="118"/><text x="99.5511%" y="143.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::codons_from_atom_rec (29 samples, 0.01%)</title><rect x="99.3434%" y="117" width="0.0138%" height="15" fill="rgb(209,67,49)" fg:x="209245" fg:w="29"/><text x="99.5934%" y="127.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (25 samples, 0.01%)</title><rect x="99.3453%" y="101" width="0.0119%" height="15" fill="rgb(213,87,29)" fg:x="209249" fg:w="25"/><text x="99.5953%" y="111.50"></text></g><g><title>datoe_fun_remover`alloc::raw_vec::finish_grow (25 samples, 0.01%)</title><rect x="99.3453%" y="85" width="0.0119%" height="15" fill="rgb(205,151,52)" fg:x="209249" fg:w="25"/><text x="99.5953%" y="95.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20e006 (26 samples, 0.01%)</title><rect x="99.3648%" y="181" width="0.0123%" height="15" fill="rgb(253,215,39)" fg:x="209290" fg:w="26"/><text x="99.6148%" y="191.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomGroup::new (995 samples, 0.47%)</title><rect x="98.9982%" y="197" width="0.4724%" height="15" fill="rgb(221,220,41)" fg:x="208518" fg:w="995"/><text x="99.2482%" y="207.50"></text></g><g><title>libsystem_platform.dylib`_platform_memmove$VARIANT$Haswell (172 samples, 0.08%)</title><rect x="99.3890%" y="181" width="0.0817%" height="15" fill="rgb(218,133,21)" fg:x="209341" fg:w="172"/><text x="99.6390%" y="191.50"></text></g><g><title>datoe_fun_remover`&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::iter::traits::collect::FromIterator&lt;(K,V)&gt;&gt;::from_iter (1,007 samples, 0.48%)</title><rect x="98.9982%" y="229" width="0.4781%" height="15" fill="rgb(221,193,43)" fg:x="208518" fg:w="1007"/><text x="99.2482%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1,007 samples, 0.48%)</title><rect x="98.9982%" y="213" width="0.4781%" height="15" fill="rgb(240,128,52)" fg:x="208518" fg:w="1007"/><text x="99.2482%" y="223.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (33 samples, 0.02%)</title><rect x="99.4991%" y="165" width="0.0157%" height="15" fill="rgb(253,114,12)" fg:x="209573" fg:w="33"/><text x="99.7491%" y="175.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (85 samples, 0.04%)</title><rect x="99.4929%" y="181" width="0.0404%" height="15" fill="rgb(215,223,47)" fg:x="209560" fg:w="85"/><text x="99.7429%" y="191.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (167 samples, 0.08%)</title><rect x="99.4849%" y="197" width="0.0793%" height="15" fill="rgb(248,225,23)" fg:x="209543" fg:w="167"/><text x="99.7349%" y="207.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (233 samples, 0.11%)</title><rect x="99.4834%" y="213" width="0.1106%" height="15" fill="rgb(250,108,0)" fg:x="209540" fg:w="233"/><text x="99.7334%" y="223.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;datoe_fun_remover::finder::atom::Atom&gt;&gt; (292 samples, 0.14%)</title><rect x="99.4806%" y="229" width="0.1386%" height="15" fill="rgb(228,208,7)" fg:x="209534" fg:w="292"/><text x="99.7306%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (47 samples, 0.02%)</title><rect x="99.6192%" y="229" width="0.0223%" height="15" fill="rgb(244,45,10)" fg:x="209826" fg:w="47"/><text x="99.8692%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::traverse (35 samples, 0.02%)</title><rect x="99.6249%" y="213" width="0.0166%" height="15" fill="rgb(207,125,25)" fg:x="209838" fg:w="35"/><text x="99.8749%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom_store::AtomStore::new (1,405 samples, 0.67%)</title><rect x="98.9840%" y="245" width="0.6671%" height="15" fill="rgb(210,195,18)" fg:x="208488" fg:w="1405"/><text x="99.2340%" y="255.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (91 samples, 0.04%)</title><rect x="99.6819%" y="197" width="0.0432%" height="15" fill="rgb(249,80,12)" fg:x="209958" fg:w="91"/><text x="99.9319%" y="207.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (24 samples, 0.01%)</title><rect x="99.7503%" y="197" width="0.0114%" height="15" fill="rgb(221,65,9)" fg:x="210102" fg:w="24"/><text x="100.0003%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (195 samples, 0.09%)</title><rect x="99.6719%" y="213" width="0.0926%" height="15" fill="rgb(235,49,36)" fg:x="209937" fg:w="195"/><text x="99.9219%" y="223.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a2095dd (24 samples, 0.01%)</title><rect x="99.7897%" y="213" width="0.0114%" height="15" fill="rgb(225,32,20)" fg:x="210185" fg:w="24"/><text x="100.0397%" y="223.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (291 samples, 0.14%)</title><rect x="99.6653%" y="229" width="0.1382%" height="15" fill="rgb(215,141,46)" fg:x="209923" fg:w="291"/><text x="99.9153%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (41 samples, 0.02%)</title><rect x="99.8148%" y="181" width="0.0195%" height="15" fill="rgb(250,160,47)" fg:x="210238" fg:w="41"/><text x="100.0648%" y="191.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (77 samples, 0.04%)</title><rect x="99.8087%" y="197" width="0.0366%" height="15" fill="rgb(216,222,40)" fg:x="210225" fg:w="77"/><text x="100.0587%" y="207.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (111 samples, 0.05%)</title><rect x="99.8063%" y="213" width="0.0527%" height="15" fill="rgb(234,217,39)" fg:x="210220" fg:w="111"/><text x="100.0563%" y="223.50"></text></g><g><title>datoe_fun_remover`&lt;itertools::adaptors::Product&lt;I,J&gt; as core::iter::traits::iterator::Iterator&gt;::next (145 samples, 0.07%)</title><rect x="99.8034%" y="229" width="0.0688%" height="15" fill="rgb(207,178,40)" fg:x="210214" fg:w="145"/><text x="100.0534%" y="239.50"></text></g><g><title>datoe_fun_remover`core::ptr::drop_in_place&lt;datoe_fun_remover::finder::atom::Atom&gt; (40 samples, 0.02%)</title><rect x="99.8747%" y="229" width="0.0190%" height="15" fill="rgb(221,136,13)" fg:x="210364" fg:w="40"/><text x="100.1247%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::eval_rec (22 samples, 0.01%)</title><rect x="99.8937%" y="229" width="0.0104%" height="15" fill="rgb(249,199,10)" fg:x="210404" fg:w="22"/><text x="100.1437%" y="239.50"></text></g><g><title>libsystem_malloc.dylib`0x7ff81a20959d (26 samples, 0.01%)</title><rect x="99.9212%" y="213" width="0.0123%" height="15" fill="rgb(249,222,13)" fg:x="210462" fg:w="26"/><text x="100.1712%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::atom::Atom::new_express (85 samples, 0.04%)</title><rect x="99.9041%" y="229" width="0.0404%" height="15" fill="rgb(244,185,38)" fg:x="210426" fg:w="85"/><text x="100.1541%" y="239.50"></text></g><g><title>datoe_fun_remover`&lt;datoe_fun_remover::finder::atom::Atom as core::clone::Clone&gt;::clone (23 samples, 0.01%)</title><rect x="99.9449%" y="213" width="0.0109%" height="15" fill="rgb(236,202,9)" fg:x="210512" fg:w="23"/><text x="100.1949%" y="223.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms_rec (52 samples, 0.02%)</title><rect x="99.9445%" y="229" width="0.0247%" height="15" fill="rgb(250,229,37)" fg:x="210511" fg:w="52"/><text x="100.1945%" y="239.50"></text></g><g><title>datoe_fun_remover`datoe_fun_remover::finder::create_atoms_rec (731 samples, 0.35%)</title><rect x="99.6510%" y="245" width="0.3471%" height="15" fill="rgb(206,174,23)" fg:x="209893" fg:w="731"/><text x="99.9010%" y="255.50"></text></g><g><title>dyld`start (210,627 samples, 100.00%)</title><rect x="0.0000%" y="341" width="99.9995%" height="15" fill="rgb(211,33,43)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="351.50">dyld`start</text></g><g><title>datoe_fun_remover`main (210,627 samples, 100.00%)</title><rect x="0.0000%" y="325" width="99.9995%" height="15" fill="rgb(245,58,50)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="335.50">datoe_fun_remover`main</text></g><g><title>datoe_fun_remover`std::rt::lang_start_internal (210,627 samples, 100.00%)</title><rect x="0.0000%" y="309" width="99.9995%" height="15" fill="rgb(244,68,36)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="319.50">datoe_fun_remover`std::rt::lang_start_internal</text></g><g><title>datoe_fun_remover`std::rt::lang_start::_{{closure}} (210,627 samples, 100.00%)</title><rect x="0.0000%" y="293" width="99.9995%" height="15" fill="rgb(232,229,15)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="303.50">datoe_fun_remover`std::rt::lang_start::_{{closure}}</text></g><g><title>datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace (210,627 samples, 100.00%)</title><rect x="0.0000%" y="277" width="99.9995%" height="15" fill="rgb(254,30,23)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="287.50">datoe_fun_remover`std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>datoe_fun_remover`datoe_fun_remover::main (210,627 samples, 100.00%)</title><rect x="0.0000%" y="261" width="99.9995%" height="15" fill="rgb(235,160,14)" fg:x="0" fg:w="210627"/><text x="0.2500%" y="271.50">datoe_fun_remover`datoe_fun_remover::main</text></g><g><title>all (210,628 samples, 100%)</title><rect x="0.0000%" y="357" width="100.0000%" height="15" fill="rgb(212,155,44)" fg:x="0" fg:w="210628"/><text x="0.2500%" y="367.50"></text></g></svg></svg>